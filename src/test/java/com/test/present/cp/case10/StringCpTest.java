package com.test.present.cp.case10;

import com.test.present.cp.ConstantPoolPresenterTestBase;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

public class StringCpTest extends ConstantPoolPresenterTestBase {

    @Before
    public void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.String"));
    }

    @Test
    public void test() {
        expectedLines = List.of(
                "     #1 = Methodref          #2.#3        // java/lang/Object.\"<init>\":()V",
                "    #27 = Methodref          #10.#28      // java/lang/String.\"<init>\":([CIILjava/lang/Void;)V",
                "    #30 = Methodref          #10.#31      // java/lang/String.rangeCheck:([CII)Ljava/lang/Void;",
                "    #34 = Methodref          #10.#35      // java/lang/String.checkBoundsOffCount:(III)I",
                "    #41 = Methodref          #42.#43      // java/lang/StringLatin1.toBytes:([III)[B",
                "    #47 = Methodref          #48.#43      // java/lang/StringUTF16.toBytes:([III)[B",
                "    #50 = Methodref          #51.#52      // java/util/Arrays.copyOfRange:([BII)[B",
                "    #56 = Methodref          #48.#57      // java/lang/StringUTF16.newBytesFor:(I)[B",
                "    #60 = Methodref          #48.#61      // java/lang/StringUTF16.putChar:([BII)V",
                "    #64 = Methodref          #10.#65      // java/lang/String.\"<init>\":([BIII)V",
                "    #67 = Methodref          #10.#68      // java/lang/String.lookupCharset:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "    #71 = Methodref          #10.#72      // java/lang/String.\"<init>\":(Ljava/nio/charset/Charset;[BII)V",
                "    #74 = Methodref          #75.#76      // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;",
                "    #88 = Methodref          #89.#90      // java/lang/StringCoding.countPositives:([BII)I",
                "    #94 = Methodref          #95.#96      // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V",
                "   #100 = Methodref          #10.#101     // java/lang/String.decode2:(II)C",
                "   #104 = Methodref          #51.#105     // java/util/Arrays.copyOf:([BI)[B",
                "   #108 = Methodref          #42.#109     // java/lang/StringLatin1.inflate:([BI[BII)V",
                "   #112 = Methodref          #10.#113     // java/lang/String.decodeUTF8_UTF16:([BII[BIZ)I",
                "   #121 = Methodref          #42.#122     // java/lang/StringLatin1.inflate:([BII)[B",
                "   #128 = Methodref          #89.#129     // java/lang/StringCoding.hasNegatives:([BII)Z",
                "   #133 = Methodref          #80.#134     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;",
                "   #150 = Methodref          #151.#152    // java/nio/charset/CharsetDecoder.maxCharsPerByte:()F",
                "   #156 = Methodref          #10.#157     // java/lang/String.scale:(IF)I",
                "   #166 = Methodref          #151.#167    // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #170 = Methodref          #151.#171    // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #177 = Methodref          #48.#178     // java/lang/StringUTF16.compress:([CII)[B",
                "   #181 = Methodref          #48.#182     // java/lang/StringUTF16.toBytes:([CII)[B",
                "   #183 = Methodref          #2.#184      // java/lang/Object.getClass:()Ljava/lang/Class;",
                "   #187 = Methodref          #188.#189    // java/lang/Class.getClassLoader0:()Ljava/lang/ClassLoader;",
                "   #193 = Methodref          #95.#194     // java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;",
                "   #197 = Methodref          #10.#198     // java/lang/String.decodeWithDecoder:(Ljava/nio/charset/CharsetDecoder;[C[BII)I",
                "   #205 = Methodref          #203.#206    // java/lang/Error.\"<init>\":(Ljava/lang/Throwable;)V",
                "   #208 = Methodref          #10.#209     // java/lang/String.\"<init>\":([BB)V",
                "   #211 = Methodref          #10.#212     // java/lang/String.newStringNoRepl1:([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "   #217 = Methodref          #215.#218    // java/lang/IllegalArgumentException.getCause:()Ljava/lang/Throwable;",
                "   #223 = Methodref          #10.#224     // java/lang/String.newStringUTF8NoRepl:([BIIZ)Ljava/lang/String;",
                "   #227 = Methodref          #10.#228     // java/lang/String.throwMalformed:([B)V",
                "   #231 = Methodref          #10.#232     // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V",
                "   #234 = Methodref          #215.#206    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/Throwable;)V",
                "   #235 = Methodref          #80.#236     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "   #244 = Methodref          #242.#245    // java/io/UnsupportedEncodingException.\"<init>\":(Ljava/lang/String;)V",
                "   #247 = Methodref          #10.#248     // java/lang/String.encodeUTF8:(B[BZ)[B",
                "   #251 = Methodref          #10.#252     // java/lang/String.encode8859_1:(B[B)[B",
                "   #255 = Methodref          #10.#256     // java/lang/String.encodeASCII:(B[B)[B",
                "   #258 = Methodref          #10.#259     // java/lang/String.encodeWithEncoder:(Ljava/nio/charset/Charset;B[BZ)[B",
                "   #262 = Methodref          #80.#263     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;",
                "   #266 = Methodref          #267.#268    // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F",
                "   #274 = Methodref          #275.#276    // \"[B\".clone:()Ljava/lang/Object;",
                "   #285 = Methodref          #10.#286     // java/lang/String.safeTrim:([BIZ)[B",
                "   #289 = Methodref          #267.#290    // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #292 = Methodref          #267.#293    // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #294 = Methodref          #42.#295     // java/lang/StringLatin1.toChars:([B)[C",
                "   #298 = Methodref          #48.#295     // java/lang/StringUTF16.toChars:([B)[C",
                "   #299 = Methodref          #300.#301    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;",
                "   #305 = Methodref          #306.#307    // java/nio/CharBuffer.wrap:([CII)Ljava/nio/CharBuffer;",
                "   #310 = Methodref          #267.#311    // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #314 = Methodref          #315.#316    // java/nio/charset/CoderResult.isUnderflow:()Z",
                "   #319 = Methodref          #315.#320    // java/nio/charset/CoderResult.throwException:()V",
                "   #322 = Methodref          #267.#323    // java/nio/charset/CharsetEncoder.flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;",
                "   #326 = Methodref          #300.#327    // java/nio/ByteBuffer.position:()I",
                "   #330 = Methodref          #10.#331     // java/lang/String.coder:()B",
                "   #333 = Methodref          #10.#334     // java/lang/String.value:()[B",
                "   #336 = Methodref          #10.#337     // java/lang/String.getBytesNoRepl1:(Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "   #342 = Methodref          #10.#343     // java/lang/String.isASCII:([B)Z",
                "   #346 = Methodref          #10.#347     // java/lang/String.encode8859_1:(B[BZ)[B",
                "   #348 = Methodref          #10.#349     // java/lang/String.throwUnmappable:([B)V",
                "   #351 = Methodref          #10.#352     // java/lang/String.replaceNegatives:([BI)V",
                "   #355 = Methodref          #48.#356     // java/lang/StringUTF16.getChar:([BI)C",
                "   #359 = Methodref          #360.#361    // java/lang/Character.isHighSurrogate:(C)Z",
                "   #365 = Methodref          #360.#366    // java/lang/Character.isLowSurrogate:(C)Z",
                "   #368 = Methodref          #89.#369     // java/lang/StringCoding.implEncodeISOArray:([BI[BII)I",
                "   #372 = Methodref          #10.#373     // java/lang/String.throwUnmappable:(I)V",
                "   #375 = Methodref          #42.#376     // java/lang/StringLatin1.inflate:([BI[CII)V",
                "   #380 = Methodref          #10.#381     // java/lang/String.isNotContinuation:(I)Z",
                "   #384 = Methodref          #10.#385     // java/lang/String.throwMalformed:(II)V",
                "   #387 = Methodref          #10.#388     // java/lang/String.isMalformed3:(III)Z",
                "   #391 = Methodref          #10.#392     // java/lang/String.malformed3:([BI)I",
                "   #395 = Methodref          #10.#396     // java/lang/String.decode3:(III)C",
                "   #399 = Methodref          #360.#400    // java/lang/Character.isSurrogate:(C)Z",
                "   #402 = Methodref          #10.#403     // java/lang/String.isMalformed3_2:(II)Z",
                "   #406 = Methodref          #10.#407     // java/lang/String.decode4:(IIII)I",
                "   #410 = Methodref          #10.#411     // java/lang/String.isMalformed4:(III)Z",
                "   #413 = Methodref          #360.#414    // java/lang/Character.isSupplementaryCodePoint:(I)Z",
                "   #416 = Methodref          #10.#417     // java/lang/String.malformed4:([BI)I",
                "   #419 = Methodref          #360.#420    // java/lang/Character.highSurrogate:(I)C",
                "   #423 = Methodref          #360.#424    // java/lang/Character.lowSurrogate:(I)C",
                "   #426 = Methodref          #10.#427     // java/lang/String.isMalformed4_2:(II)Z",
                "   #429 = Methodref          #10.#430     // java/lang/String.isMalformed4_3:(I)Z",
                "   #432 = Methodref          #300.#433    // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;",
                "   #435 = Methodref          #151.#436    // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #438 = Methodref          #151.#439    // java/nio/charset/CharsetDecoder.flush:(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;",
                "   #441 = Methodref          #306.#327    // java/nio/CharBuffer.position:()I",
                "   #444 = Methodref          #442.#3      // java/lang/StringBuilder.\"<init>\":()V",
                "   #447 = Methodref          #442.#448    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #451 = Methodref          #442.#452    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;",
                "   #456 = Methodref          #442.#457    // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "   #460 = Methodref          #221.#461    // java/nio/charset/MalformedInputException.\"<init>\":(I)V",
                "   #462 = Methodref          #215.#463    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V",
                "   #467 = Methodref          #340.#461    // java/nio/charset/UnmappableCharacterException.\"<init>\":(I)V",
                "   #468 = Methodref          #10.#469     // java/lang/String.encodeUTF8_UTF16:([BZ)[B",
                "   #472 = Methodref          #360.#473    // java/lang/Character.toCodePoint:(CC)I",
                "   #476 = Methodref          #80.#477     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;",
                "   #480 = Methodref          #481.#457    // java/lang/StringBuffer.toString:()Ljava/lang/String;",
                "   #483 = Methodref          #10.#245     // java/lang/String.\"<init>\":(Ljava/lang/String;)V",
                "   #484 = Methodref          #10.#485     // java/lang/String.\"<init>\":(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V",
                "   #487 = Methodref          #10.#488     // java/lang/String.isLatin1:()Z",
                "   #490 = Methodref          #42.#491     // java/lang/StringLatin1.charAt:([BI)C",
                "   #493 = Methodref          #48.#491     // java/lang/StringUTF16.charAt:([BI)C",
                "   #494 = Methodref          #10.#495     // java/lang/String.checkIndex:(II)V",
                "   #497 = Methodref          #48.#498     // java/lang/StringUTF16.codePointAt:([BII)I",
                "   #500 = Methodref          #10.#501     // java/lang/String.length:()I",
                "   #503 = Methodref          #48.#504     // java/lang/StringUTF16.codePointBefore:([BI)I",
                "   #506 = Methodref          #75.#507     // java/util/Objects.checkFromToIndex:(III)I",
                "   #509 = Methodref          #48.#510     // java/lang/StringUTF16.codePointCount:([BII)I",
                "   #512 = Methodref          #360.#513    // java/lang/Character.offsetByCodePoints:(Ljava/lang/CharSequence;II)I",
                "   #516 = Methodref          #10.#517     // java/lang/String.checkBoundsBeginEnd:(III)V",
                "   #520 = Methodref          #42.#521     // java/lang/StringLatin1.getChars:([BII[CI)V",
                "   #524 = Methodref          #48.#521     // java/lang/StringUTF16.getChars:([BII[CI)V",
                "   #525 = Methodref          #42.#526     // java/lang/StringLatin1.getBytes:([BII[BI)V",
                "   #529 = Methodref          #48.#526     // java/lang/StringUTF16.getBytes:([BII[BI)V",
                "   #530 = Methodref          #10.#531     // java/lang/String.encode:(Ljava/nio/charset/Charset;B[B)[B",
                "   #535 = Methodref          #533.#3      // java/lang/NullPointerException.\"<init>\":()V",
                "   #536 = Methodref          #42.#537     // java/lang/StringLatin1.equals:([B[B)Z",
                "   #540 = Methodref          #10.#541     // java/lang/String.contentEquals:(Ljava/lang/CharSequence;)Z",
                "   #544 = Methodref          #545.#501    // java/lang/AbstractStringBuilder.length:()I",
                "   #547 = Methodref          #545.#548    // java/lang/AbstractStringBuilder.getValue:()[B",
                "   #550 = Methodref          #545.#551    // java/lang/AbstractStringBuilder.getCoder:()B",
                "   #553 = Methodref          #554.#555    // jdk/internal/util/ArraysSupport.mismatch:([B[BI)I",
                "   #559 = Methodref          #48.#560     // java/lang/StringUTF16.contentEquals:([B[BI)Z",
                "   #562 = Methodref          #10.#563     // java/lang/String.nonSyncContentEquals:(Ljava/lang/AbstractStringBuilder;)Z",
                "   #566 = Methodref          #10.#567     // java/lang/String.equals:(Ljava/lang/Object;)Z",
                "   #574 = Methodref          #48.#575     // java/lang/StringUTF16.contentEquals:([BLjava/lang/CharSequence;I)Z",
                "   #577 = Methodref          #10.#578     // java/lang/String.regionMatches:(ZILjava/lang/String;II)Z",
                "   #581 = Methodref          #42.#582     // java/lang/StringLatin1.compareTo:([B[B)I",
                "   #585 = Methodref          #48.#582     // java/lang/StringUTF16.compareTo:([B[B)I",
                "   #586 = Methodref          #42.#587     // java/lang/StringLatin1.compareToUTF16:([B[B)I",
                "   #589 = Methodref          #48.#590     // java/lang/StringUTF16.compareToLatin1:([B[B)I",
                "   #602 = Methodref          #554.#603    // jdk/internal/util/ArraysSupport.mismatch:([BI[BII)I",
                "   #604 = Methodref          #42.#356     // java/lang/StringLatin1.getChar:([BI)C",
                "   #605 = Methodref          #10.#606     // java/lang/String.regionMatches:(ILjava/lang/String;II)Z",
                "   #608 = Methodref          #42.#609     // java/lang/StringLatin1.regionMatchesCI:([BI[BII)Z",
                "   #612 = Methodref          #48.#609     // java/lang/StringUTF16.regionMatchesCI:([BI[BII)Z",
                "   #613 = Methodref          #42.#614     // java/lang/StringLatin1.regionMatchesCI_UTF16:([BI[BII)Z",
                "   #616 = Methodref          #48.#617     // java/lang/StringUTF16.regionMatchesCI_Latin1:([BI[BII)Z",
                "   #619 = Methodref          #10.#620     // java/lang/String.startsWith:(Ljava/lang/String;I)Z",
                "   #623 = Methodref          #42.#624     // java/lang/StringLatin1.hashCode:([B)I",
                "   #627 = Methodref          #48.#624     // java/lang/StringUTF16.hashCode:([B)I",
                "   #628 = Methodref          #10.#629     // java/lang/String.indexOf:(II)I",
                "   #632 = Methodref          #42.#633     // java/lang/StringLatin1.indexOf:([BIII)I",
                "   #635 = Methodref          #48.#633     // java/lang/StringUTF16.indexOf:([BIII)I",
                "   #636 = Methodref          #10.#637     // java/lang/String.lastIndexOf:(II)I",
                "   #639 = Methodref          #42.#640     // java/lang/StringLatin1.lastIndexOf:([BII)I",
                "   #641 = Methodref          #48.#640     // java/lang/StringUTF16.lastIndexOf:([BII)I",
                "   #642 = Methodref          #42.#643     // java/lang/StringLatin1.indexOf:([B[B)I",
                "   #644 = Methodref          #48.#643     // java/lang/StringUTF16.indexOf:([B[B)I",
                "   #645 = Methodref          #48.#646     // java/lang/StringUTF16.indexOfLatin1:([B[B)I",
                "   #648 = Methodref          #10.#649     // java/lang/String.indexOf:([BBILjava/lang/String;I)I",
                "   #651 = Methodref          #10.#573     // java/lang/String.charAt:(I)C",
                "   #652 = Methodref          #10.#653     // java/lang/String.indexOf:(III)I",
                "   #654 = Methodref          #655.#656    // java/lang/Math.clamp:(JII)I",
                "   #660 = Methodref          #42.#661     // java/lang/StringLatin1.indexOf:([BI[BII)I",
                "   #662 = Methodref          #48.#661     // java/lang/StringUTF16.indexOf:([BI[BII)I",
                "   #663 = Methodref          #48.#664     // java/lang/StringUTF16.indexOfLatin1:([BI[BII)I",
                "   #665 = Methodref          #10.#666     // java/lang/String.lastIndexOf:(Ljava/lang/String;I)I",
                "   #668 = Methodref          #10.#669     // java/lang/String.lastIndexOf:([BBILjava/lang/String;I)I",
                "   #670 = Methodref          #42.#671     // java/lang/StringLatin1.lastIndexOf:([BI[BII)I",
                "   #672 = Methodref          #48.#671     // java/lang/StringUTF16.lastIndexOf:([BI[BII)I",
                "   #673 = Methodref          #48.#674     // java/lang/StringUTF16.lastIndexOfLatin1:([BI[BII)I",
                "   #676 = Methodref          #10.#677     // java/lang/String.substring:(II)Ljava/lang/String;",
                "   #680 = Methodref          #42.#681     // java/lang/StringLatin1.newString:([BII)Ljava/lang/String;",
                "   #684 = Methodref          #48.#681     // java/lang/StringUTF16.newString:([BII)Ljava/lang/String;",
                "   #685 = Methodref          #10.#686     // java/lang/String.isEmpty:()Z",
                "   #688 = Methodref          #689.#690    // java/lang/StringConcatHelper.simpleConcat:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;",
                "   #694 = Methodref          #42.#695     // java/lang/StringLatin1.replace:([BCC)Ljava/lang/String;",
                "   #698 = Methodref          #48.#695     // java/lang/StringUTF16.replace:([BCC)Ljava/lang/String;",
                "   #699 = Methodref          #700.#701    // java/util/regex/Pattern.matches:(Ljava/lang/String;Ljava/lang/CharSequence;)Z",
                "   #706 = Methodref          #10.#707     // java/lang/String.indexOf:(Ljava/lang/String;)I",
                "   #709 = Methodref          #700.#710    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;",
                "   #713 = Methodref          #700.#714    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;",
                "   #717 = Methodref          #718.#719    // java/util/regex/Matcher.replaceFirst:(Ljava/lang/String;)Ljava/lang/String;",
                "   #723 = Methodref          #718.#724    // java/util/regex/Matcher.replaceAll:(Ljava/lang/String;)Ljava/lang/String;",
                "   #726 = Methodref          #10.#727     // java/lang/String.replace:(CC)Ljava/lang/String;",
                "   #729 = Methodref          #42.#730     // java/lang/StringLatin1.replace:([BI[BI[BI)Ljava/lang/String;",
                "   #732 = Methodref          #48.#733     // java/lang/StringUTF16.replace:([BIZ[BIZ[BIZ)Ljava/lang/String;",
                "   #735 = Methodref          #655.#736    // java/lang/Math.addExact:(II)I",
                "   #738 = Methodref          #655.#739    // java/lang/Math.multiplyExact:(II)I",
                "   #747 = Methodref          #743.#245    // java/lang/OutOfMemoryError.\"<init>\":(Ljava/lang/String;)V",
                "   #748 = Methodref          #442.#461    // java/lang/StringBuilder.\"<init>\":(I)V",
                "   #749 = Methodref          #442.#750    // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;",
                "   #752 = Methodref          #10.#753     // java/lang/String.split:(Ljava/lang/String;IZ)[Ljava/lang/String;",
                "   #758 = Methodref          #10.#759     // java/lang/String.indexOf:(I)I",
                "   #763 = Methodref          #10.#764     // java/lang/String.split:(CIZ)[Ljava/lang/String;",
                "   #766 = Methodref          #700.#767    // java/util/regex/Pattern.splitWithDelimiters:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #770 = Methodref          #700.#771    // java/util/regex/Pattern.split:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #774 = Methodref          #772.#3      // java/util/ArrayList.\"<init>\":()V",
                "   #775 = Methodref          #10.#776     // java/lang/String.valueOf:(C)Ljava/lang/String;",
                "   #779 = Methodref          #772.#780    // java/util/ArrayList.add:(Ljava/lang/Object;)Z",
                "   #782 = Methodref          #772.#783    // java/util/ArrayList.size:()I",
                "   #785 = Methodref          #772.#786    // java/util/ArrayList.get:(I)Ljava/lang/Object;",
                "   #789 = Methodref          #772.#790    // java/util/ArrayList.subList:(II)Ljava/util/List;",
                "   #801 = Methodref          #10.#802     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;",
                "   #804 = Methodref          #10.#805     // java/lang/String.join:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;",
                "   #810 = Methodref          #689.#811    // java/lang/StringConcatHelper.newArray:(J)[B",
                "   #814 = Methodref          #10.#815     // java/lang/String.getBytes:([BIB)V",
                "   #831 = Methodref          #51.#832     // java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #834 = Methodref          #42.#835     // java/lang/StringLatin1.toLowerCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #838 = Methodref          #48.#835     // java/lang/StringUTF16.toLowerCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #839 = Methodref          #840.#841    // java/util/Locale.getDefault:()Ljava/util/Locale;",
                "   #845 = Methodref          #10.#846     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #848 = Methodref          #42.#849     // java/lang/StringLatin1.toUpperCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #851 = Methodref          #48.#849     // java/lang/StringUTF16.toUpperCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #852 = Methodref          #10.#853     // java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #854 = Methodref          #42.#855     // java/lang/StringLatin1.trim:([B)Ljava/lang/String;",
                "   #858 = Methodref          #48.#855     // java/lang/StringUTF16.trim:([B)Ljava/lang/String;",
                "   #859 = Methodref          #42.#860     // java/lang/StringLatin1.strip:([B)Ljava/lang/String;",
                "   #862 = Methodref          #48.#860     // java/lang/StringUTF16.strip:([B)Ljava/lang/String;",
                "   #863 = Methodref          #42.#864     // java/lang/StringLatin1.stripLeading:([B)Ljava/lang/String;",
                "   #866 = Methodref          #48.#864     // java/lang/StringUTF16.stripLeading:([B)Ljava/lang/String;",
                "   #867 = Methodref          #42.#868     // java/lang/StringLatin1.stripTrailing:([B)Ljava/lang/String;",
                "   #870 = Methodref          #48.#868     // java/lang/StringUTF16.stripTrailing:([B)Ljava/lang/String;",
                "   #871 = Methodref          #10.#872     // java/lang/String.indexOfNonWhitespace:()I",
                "   #874 = Methodref          #42.#875     // java/lang/StringLatin1.lines:([B)Ljava/util/stream/Stream;",
                "   #878 = Methodref          #48.#875     // java/lang/StringUTF16.lines:([B)Ljava/util/stream/Stream;",
                "   #879 = Methodref          #10.#880     // java/lang/String.lines:()Ljava/util/stream/Stream;",
                "   #884 = Methodref          #10.#885     // java/lang/String.repeat:(I)Ljava/lang/String;",
                "   #909 = Methodref          #910.#911    // java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;",
                "   #919 = Methodref          #42.#920     // java/lang/StringLatin1.indexOfNonWhitespace:([B)I",
                "   #921 = Methodref          #48.#920     // java/lang/StringUTF16.indexOfNonWhitespace:([B)I",
                "   #922 = Methodref          #42.#923     // java/lang/StringLatin1.lastIndexOfNonWhitespace:([B)I",
                "   #925 = Methodref          #48.#923     // java/lang/StringUTF16.lastIndexOfNonWhitespace:([B)I",
                "   #930 = Methodref          #10.#931     // java/lang/String.outdent:(Ljava/util/List;)I",
                "   #940 = Methodref          #898.#941    // java/lang/Integer.min:(II)I",
                "   #945 = Methodref          #10.#946     // java/lang/String.isBlank:()Z",
                "   #948 = Methodref          #10.#949     // java/lang/String.toCharArray:()[C",
                "   #954 = Methodref          #360.#955    // java/lang/Character.valueOf:(C)Ljava/lang/Character;",
                "   #957 = Methodref          #898.#958    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;",
                "   #960 = Methodref          #10.#961     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "   #964 = Methodref          #215.#245    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "   #965 = Methodref          #10.#966     // java/lang/String.\"<init>\":([CII)V",
                "   #976 = Methodref          #972.#977    // java/lang/StringLatin1$CharsSpliterator.\"<init>\":([BI)V",
                "   #980 = Methodref          #978.#977    // java/lang/StringUTF16$CharsSpliterator.\"<init>\":([BI)V",
                "   #981 = Methodref          #982.#983    // java/util/stream/StreamSupport.intStream:(Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;",
                "   #989 = Methodref          #987.#977    // java/lang/StringUTF16$CodePointsSpliterator.\"<init>\":([BI)V",
                "   #992 = Methodref          #990.#3      // java/util/Formatter.\"<init>\":()V",
                "   #993 = Methodref          #990.#994    // java/util/Formatter.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;",
                "   #996 = Methodref          #990.#457    // java/util/Formatter.toString:()Ljava/lang/String;",
                "   #997 = Methodref          #990.#998    // java/util/Formatter.\"<init>\":(Ljava/util/Locale;)V",
                "  #1002 = Methodref          #2.#457      // java/lang/Object.toString:()Ljava/lang/String;",
                "  #1003 = Methodref          #10.#1004    // java/lang/String.\"<init>\":([C)V",
                "  #1010 = Methodref          #42.#1011    // java/lang/StringLatin1.canEncode:(I)Z",
                "  #1013 = Methodref          #42.#1014    // java/lang/StringLatin1.toBytes:(C)[B",
                "  #1016 = Methodref          #48.#1014    // java/lang/StringUTF16.toBytes:(C)[B",
                "  #1017 = Methodref          #898.#1018   // java/lang/Integer.toString:(I)Ljava/lang/String;",
                "  #1019 = Methodref          #1020.#1021  // java/lang/Long.toString:(J)Ljava/lang/String;",
                "  #1024 = Methodref          #1025.#1026  // java/lang/Float.toString:(F)Ljava/lang/String;",
                "  #1029 = Methodref          #1030.#1031  // java/lang/Double.toString:(D)Ljava/lang/String;",
                "  #1036 = Methodref          #51.#1037    // java/util/Arrays.fill:([BB)V",
                "  #1039 = Methodref          #10.#1040    // java/lang/String.repeatCopyRest:([BIII)V",
                "  #1042 = Methodref          #545.#488    // java/lang/AbstractStringBuilder.isLatin1:()Z",
                "  #1046 = Methodref          #48.#1047    // java/lang/StringUTF16.compress:([BII)[B",
                "  #1054 = Methodref          #1049.#1055  // jdk/internal/util/Preconditions.checkIndex:(IILjava/util/function/BiFunction;)I",
                "  #1057 = Methodref          #1049.#1058  // jdk/internal/util/Preconditions.checkFromToIndex:(IIILjava/util/function/BiFunction;)I",
                "  #1060 = Methodref          #1049.#1061  // jdk/internal/util/Preconditions.checkFromIndexSize:(IIILjava/util/function/BiFunction;)I",
                "  #1063 = Methodref          #360.#1064   // java/lang/Character.isBmpCodePoint:(I)Z",
                "  #1066 = Methodref          #48.#1067    // java/lang/StringUTF16.toBytesSupplementary:(I)[B",
                "  #1071 = Methodref          #1072.#1073  // java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;",
                "  #1077 = Methodref          #10.#1078    // java/lang/String.compareTo:(Ljava/lang/String;)I",
                "  #1079 = Methodref          #10.#1080    // java/lang/String.resolveConstantDesc:(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;",
                "  #1083 = Methodref          #10.#1084    // java/lang/String.lastIndexOfNonWhitespace:()I",
                "  #1085 = Methodref          #655.#941    // java/lang/Math.min:(II)I",
                "  #1086 = Methodref          #10.#1087    // java/lang/String.substring:(I)Ljava/lang/String;",
                "  #1088 = Methodref          #10.#1089    // java/lang/String.stripLeading:()Ljava/lang/String;",
                "  #1098 = Methodref          #1096.#3     // java/lang/String$CaseInsensitiveComparator.\"<init>\":()V",
                "  #1414 = Methodref          #10.#1415    // java/lang/String.lambda$indent$0:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1418 = Methodref          #10.#1419    // java/lang/String.lambda$indent$1:(Ljava/lang/String;)Ljava/lang/String;",
                "  #1421 = Methodref          #10.#1422    // java/lang/String.lambda$indent$2:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1424 = Methodref          #10.#1425    // java/lang/String.lambda$stripIndent$3:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1427 = Methodref          #1428.#1429  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
        );
    }
}
