package com.test.present.cp.case_all;

import com.test.present.cp.ConstantPoolPresenterTestBase;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

public class EnumCpTest extends ConstantPoolPresenterTestBase {

    @Before
    public void prepare() throws IOException {
        buildRealLines(Enum.class);
    }

    @Test
    public void test() {
        expectedLines = List.of(
                "    #1 = Fieldref           #2.#3         // java/lang/Enum.name:Ljava/lang/String;",
                "    #2 = Class              #4            // java/lang/Enum",
                "    #3 = NameAndType        #5:#6         // name:Ljava/lang/String;",
                "    #4 = Utf8               java/lang/Enum",
                "    #5 = Utf8               name",
                "    #6 = Utf8               Ljava/lang/String;",
                "    #7 = Fieldref           #2.#8         // java/lang/Enum.ordinal:I",
                "    #8 = NameAndType        #9:#10        // ordinal:I",
                "    #9 = Utf8               ordinal",
                "   #10 = Utf8               I",
                "   #11 = Methodref          #12.#13       // java/lang/Object.\"<init>\":()V",
                "   #12 = Class              #14           // java/lang/Object",
                "   #13 = NameAndType        #15:#16       // \"<init>\":()V",
                "   #14 = Utf8               java/lang/Object",
                "   #15 = Utf8               <init>",
                "   #16 = Utf8               ()V",
                "   #17 = Fieldref           #2.#18        // java/lang/Enum.hash:I",
                "   #18 = NameAndType        #19:#10       // hash:I",
                "   #19 = Utf8               hash",
                "   #20 = Methodref          #21.#22       // java/lang/System.identityHashCode:(Ljava/lang/Object;)I",
                "   #21 = Class              #23           // java/lang/System",
                "   #22 = NameAndType        #24:#25       // identityHashCode:(Ljava/lang/Object;)I",
                "   #23 = Utf8               java/lang/System",
                "   #24 = Utf8               identityHashCode",
                "   #25 = Utf8               (Ljava/lang/Object;)I",
                "   #26 = Class              #27           // java/lang/CloneNotSupportedException",
                "   #27 = Utf8               java/lang/CloneNotSupportedException",
                "   #28 = Methodref          #26.#13       // java/lang/CloneNotSupportedException.\"<init>\":()V",
                "   #29 = Methodref          #12.#30       // java/lang/Object.getClass:()Ljava/lang/Class;",
                "   #30 = NameAndType        #31:#32       // getClass:()Ljava/lang/Class;",
                "   #31 = Utf8               getClass",
                "   #32 = Utf8               ()Ljava/lang/Class;",
                "   #33 = Methodref          #2.#34        // java/lang/Enum.getDeclaringClass:()Ljava/lang/Class;",
                "   #34 = NameAndType        #35:#32       // getDeclaringClass:()Ljava/lang/Class;",
                "   #35 = Utf8               getDeclaringClass",
                "   #36 = Class              #37           // java/lang/ClassCastException",
                "   #37 = Utf8               java/lang/ClassCastException",
                "   #38 = Methodref          #36.#13       // java/lang/ClassCastException.\"<init>\":()V",
                "   #39 = Methodref          #40.#41       // java/lang/Class.getSuperclass:()Ljava/lang/Class;",
                "   #40 = Class              #42           // java/lang/Class",
                "   #41 = NameAndType        #43:#32       // getSuperclass:()Ljava/lang/Class;",
                "   #42 = Utf8               java/lang/Class",
                "   #43 = Utf8               getSuperclass",
                "   #44 = Methodref          #40.#45       // java/lang/Class.describeConstable:()Ljava/util/Optional;",
                "   #45 = NameAndType        #46:#47       // describeConstable:()Ljava/util/Optional;",
                "   #46 = Utf8               describeConstable",
                "   #47 = Utf8               ()Ljava/util/Optional;",
                "   #48 = InvokeDynamic      #0:#49        // #0:apply:(Ljava/lang/Enum;)Ljava/util/function/Function;",
                "   #49 = NameAndType        #50:#51       // apply:(Ljava/lang/Enum;)Ljava/util/function/Function;",
                "   #50 = Utf8               apply",
                "   #51 = Utf8               (Ljava/lang/Enum;)Ljava/util/function/Function;",
                "   #52 = Methodref          #53.#54       // java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;",
                "   #53 = Class              #55           // java/util/Optional",
                "   #54 = NameAndType        #56:#57       // map:(Ljava/util/function/Function;)Ljava/util/Optional;",
                "   #55 = Utf8               java/util/Optional",
                "   #56 = Utf8               map",
                "   #57 = Utf8               (Ljava/util/function/Function;)Ljava/util/Optional;",
                "   #58 = Methodref          #40.#59       // java/lang/Class.enumConstantDirectory:()Ljava/util/Map;",
                "   #59 = NameAndType        #60:#61       // enumConstantDirectory:()Ljava/util/Map;",
                "   #60 = Utf8               enumConstantDirectory",
                "   #61 = Utf8               ()Ljava/util/Map;",
                "   #62 = InterfaceMethodref #63.#64       // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #63 = Class              #65           // java/util/Map",
                "   #64 = NameAndType        #66:#67       // get:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #65 = Utf8               java/util/Map",
                "   #66 = Utf8               get",
                "   #67 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "   #68 = Class              #69           // java/lang/NullPointerException",
                "   #69 = Utf8               java/lang/NullPointerException",
                "   #70 = String             #71           // Name is null",
                "   #71 = Utf8               Name is null",
                "   #72 = Methodref          #68.#73       // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V",
                "   #73 = NameAndType        #15:#74       // \"<init>\":(Ljava/lang/String;)V",
                "   #74 = Utf8               (Ljava/lang/String;)V",
                "   #75 = Class              #76           // java/lang/IllegalArgumentException",
                "   #76 = Utf8               java/lang/IllegalArgumentException",
                "   #77 = Class              #78           // java/lang/StringBuilder",
                "   #78 = Utf8               java/lang/StringBuilder",
                "   #79 = Methodref          #77.#13       // java/lang/StringBuilder.\"<init>\":()V",
                "   #80 = String             #81           // No enum constant",
                "   #81 = Utf8               No enum constant",
                "   #82 = Methodref          #77.#83       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #83 = NameAndType        #84:#85       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #84 = Utf8               append",
                "   #85 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #86 = Methodref          #40.#87       // java/lang/Class.getCanonicalName:()Ljava/lang/String;",
                "   #87 = NameAndType        #88:#89       // getCanonicalName:()Ljava/lang/String;",
                "   #88 = Utf8               getCanonicalName",
                "   #89 = Utf8               ()Ljava/lang/String;",
                "   #90 = String             #91           // .",
                "   #91 = Utf8               .",
                "   #92 = Methodref          #77.#93       // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "   #93 = NameAndType        #94:#89       // toString:()Ljava/lang/String;",
                "   #94 = Utf8               toString",
                "   #95 = Methodref          #75.#73       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "   #96 = Class              #97           // java/io/InvalidObjectException",
                "   #97 = Utf8               java/io/InvalidObjectException",
                "   #98 = String             #99           // can\\'t deserialize enum",
                "   #99 = Utf8               can\\'t deserialize enum",
                "  #100 = Methodref          #96.#73       // java/io/InvalidObjectException.\"<init>\":(Ljava/lang/String;)V",
                "  #101 = Methodref          #2.#102       // java/lang/Enum.compareTo:(Ljava/lang/Enum;)I",
                "  #102 = NameAndType        #103:#104     // compareTo:(Ljava/lang/Enum;)I",
                "  #103 = Utf8               compareTo",
                "  #104 = Utf8               (Ljava/lang/Enum;)I",
                "  #105 = Methodref          #106.#107     // java/lang/Enum$EnumDesc.of:(Ljava/lang/constant/ClassDesc;Ljava/lang/String;)Ljava/lang/Enum$EnumDesc;",
                "  #106 = Class              #108          // java/lang/Enum$EnumDesc",
                "  #107 = NameAndType        #109:#110     // of:(Ljava/lang/constant/ClassDesc;Ljava/lang/String;)Ljava/lang/Enum$EnumDesc;",
                "  #108 = Utf8               java/lang/Enum$EnumDesc",
                "  #109 = Utf8               of",
                "  #110 = Utf8               (Ljava/lang/constant/ClassDesc;Ljava/lang/String;)Ljava/lang/Enum$EnumDesc;",
                "  #111 = Class              #112          // java/lang/constant/Constable",
                "  #112 = Utf8               java/lang/constant/Constable",
                "  #113 = Class              #114          // java/lang/Comparable",
                "  #114 = Utf8               java/lang/Comparable",
                "  #115 = Class              #116          // java/io/Serializable",
                "  #116 = Utf8               java/io/Serializable",
                "  #117 = Utf8               RuntimeVisibleAnnotations",
                "  #118 = Utf8               Ljdk/internal/vm/annotation/Stable;",
                "  #119 = Utf8               Code",
                "  #120 = Utf8               LineNumberTable",
                "  #121 = Utf8               LocalVariableTable",
                "  #122 = Utf8               this",
                "  #123 = Utf8               Ljava/lang/Enum;",
                "  #124 = Utf8               LocalVariableTypeTable",
                "  #125 = Utf8               Ljava/lang/Enum<TE;>;",
                "  #126 = Utf8               ()I",
                "  #127 = Utf8               (Ljava/lang/String;I)V",
                "  #128 = Utf8               equals",
                "  #129 = Utf8               (Ljava/lang/Object;)Z",
                "  #130 = Utf8               other",
                "  #131 = Utf8               Ljava/lang/Object;",
                "  #132 = Utf8               StackMapTable",
                "  #133 = Utf8               hashCode",
                "  #134 = Utf8               hc",
                "  #135 = Utf8               clone",
                "  #136 = Utf8               ()Ljava/lang/Object;",
                "  #137 = Utf8               Exceptions",
                "  #138 = Utf8               o",
                "  #139 = Utf8               self",
                "  #140 = Utf8               TE;",
                "  #141 = Utf8               Ljava/lang/Enum<*>;",
                "  #142 = Utf8               Signature",
                "  #143 = Utf8               (TE;)I",
                "  #144 = Utf8               clazz",
                "  #145 = Utf8               Ljava/lang/Class;",
                "  #146 = Utf8               zuper",
                "  #147 = Utf8               Ljava/lang/Class<*>;",
                "  #148 = Utf8               ()Ljava/lang/Class<TE;>;",
                "  #149 = Utf8               ()Ljava/util/Optional<Ljava/lang/Enum$EnumDesc<TE;>;>;",
                "  #150 = Utf8               valueOf",
                "  #151 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;",
                "  #152 = Utf8               enumClass",
                "  #153 = Utf8               result",
                "  #154 = Utf8               Ljava/lang/Class<TT;>;",
                "  #155 = Utf8               TT;",
                "  #156 = Utf8               <T:Ljava/lang/Enum<TT;>;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;",
                "  #157 = Utf8               finalize",
                "  #158 = Utf8               Deprecated",
                "  #159 = Utf8               Ljava/lang/Deprecated;",
                "  #160 = Utf8               since",
                "  #161 = Utf8               18",
                "  #162 = Utf8               forRemoval",
                "  #163 = Integer            1",
                "  #164 = Utf8               readObject",
                "  #165 = Utf8               (Ljava/io/ObjectInputStream;)V",
                "  #166 = Utf8               in",
                "  #167 = Utf8               Ljava/io/ObjectInputStream;",
                "  #168 = Class              #169          // java/io/IOException",
                "  #169 = Utf8               java/io/IOException",
                "  #170 = Class              #171          // java/lang/ClassNotFoundException",
                "  #171 = Utf8               java/lang/ClassNotFoundException",
                "  #172 = Utf8               readObjectNoData",
                "  #173 = Class              #174          // java/io/ObjectStreamException",
                "  #174 = Utf8               java/io/ObjectStreamException",
                "  #175 = Utf8               MethodParameters",
                "  #176 = Utf8               lambda$describeConstable$0",
                "  #177 = Utf8               (Ljava/lang/constant/ClassDesc;)Ljava/lang/Enum$EnumDesc;",
                "  #178 = Utf8               c",
                "  #179 = Utf8               Ljava/lang/constant/ClassDesc;",
                "  #180 = Utf8               <E:Ljava/lang/Enum<TE;>;>Ljava/lang/Object;Ljava/lang/constant/Constable;Ljava/lang/Comparable<TE;>;Ljava/io/Serializable;",
                "  #181 = Utf8               SourceFile",
                "  #182 = Utf8               Enum.java",
                "  #183 = Utf8               NestMembers",
                "  #184 = Utf8               BootstrapMethods",
                "  #185 = MethodType         #67           //  (Ljava/lang/Object;)Ljava/lang/Object;",
                "  #186 = MethodHandle       5:#187        // REF_invokeVirtual java/lang/Enum.lambda$describeConstable$0:(Ljava/lang/constant/ClassDesc;)Ljava/lang/Enum$EnumDesc;",
                "  #187 = Methodref          #2.#188       // java/lang/Enum.lambda$describeConstable$0:(Ljava/lang/constant/ClassDesc;)Ljava/lang/Enum$EnumDesc;",
                "  #188 = NameAndType        #176:#177     // lambda$describeConstable$0:(Ljava/lang/constant/ClassDesc;)Ljava/lang/Enum$EnumDesc;",
                "  #189 = MethodType         #177          //  (Ljava/lang/constant/ClassDesc;)Ljava/lang/Enum$EnumDesc;",
                "  #190 = MethodHandle       6:#191        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #191 = Methodref          #192.#193     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #192 = Class              #194          // java/lang/invoke/LambdaMetafactory",
                "  #193 = NameAndType        #195:#196     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #194 = Utf8               java/lang/invoke/LambdaMetafactory",
                "  #195 = Utf8               metafactory",
                "  #196 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #197 = Utf8               InnerClasses",
                "  #198 = Utf8               EnumDesc",
                "  #199 = Class              #200          // java/lang/invoke/MethodHandles$Lookup",
                "  #200 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "  #201 = Class              #202          // java/lang/invoke/MethodHandles",
                "  #202 = Utf8               java/lang/invoke/MethodHandles",
                "  #203 = Utf8               Lookup"
        );
    }
}
