package com.test.present.cp.case1;

import com.test.present.cp.ConstantPoolPresenterTestBase;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

public class StringCpTest extends ConstantPoolPresenterTestBase {

    @Before
    public void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.String"));
    }

    @Test
    public void test() {
        expectedLines = List.of(
                "     #4 = Utf8               java/lang/Object",
                "     #5 = Utf8               <init>",
                "     #6 = Utf8               ()V",
                "     #8 = Utf8",
                "    #12 = Utf8               java/lang/String",
                "    #13 = Utf8               value",
                "    #14 = Utf8               [B",
                "    #17 = Utf8               coder",
                "    #18 = Utf8               B",
                "    #21 = Utf8               hash",
                "    #22 = Utf8               I",
                "    #25 = Utf8               hashIsZero",
                "    #26 = Utf8               Z",
                "    #29 = Utf8               ([CIILjava/lang/Void;)V",
                "    #32 = Utf8               rangeCheck",
                "    #33 = Utf8               ([CII)Ljava/lang/Void;",
                "    #36 = Utf8               checkBoundsOffCount",
                "    #37 = Utf8               (III)I",
                "    #40 = Utf8               COMPACT_STRINGS",
                "    #44 = Utf8               java/lang/StringLatin1",
                "    #45 = Utf8               toBytes",
                "    #46 = Utf8               ([III)[B",
                "    #49 = Utf8               java/lang/StringUTF16",
                "    #53 = Utf8               java/util/Arrays",
                "    #54 = Utf8               copyOfRange",
                "    #55 = Utf8               ([BII)[B",
                "    #58 = Utf8               newBytesFor",
                "    #59 = Utf8               (I)[B",
                "    #62 = Utf8               putChar",
                "    #63 = Utf8               ([BII)V",
                "    #66 = Utf8               ([BIII)V",
                "    #69 = Utf8               lookupCharset",
                "    #70 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "    #73 = Utf8               (Ljava/nio/charset/Charset;[BII)V",
                "    #77 = Utf8               java/util/Objects",
                "    #78 = Utf8               requireNonNull",
                "    #79 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "    #81 = Utf8               java/nio/charset/Charset",
                "    #85 = Utf8               sun/nio/cs/UTF_8",
                "    #86 = Utf8               INSTANCE",
                "    #87 = Utf8               Lsun/nio/cs/UTF_8;",
                "    #91 = Utf8               java/lang/StringCoding",
                "    #92 = Utf8               countPositives",
                "    #93 = Utf8               ([BII)I",
                "    #97 = Utf8               java/lang/System",
                "    #98 = Utf8               arraycopy",
                "    #99 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V",
                "   #102 = Utf8               decode2",
                "   #103 = Utf8               (II)C",
                "   #106 = Utf8               copyOf",
                "   #107 = Utf8               ([BI)[B",
                "   #110 = Utf8               inflate",
                "   #111 = Utf8               ([BI[BII)V",
                "   #114 = Utf8               decodeUTF8_UTF16",
                "   #115 = Utf8               ([BII[BIZ)I",
                "   #119 = Utf8               sun/nio/cs/ISO_8859_1",
                "   #120 = Utf8               Lsun/nio/cs/ISO_8859_1;",
                "   #126 = Utf8               sun/nio/cs/US_ASCII",
                "   #127 = Utf8               Lsun/nio/cs/US_ASCII;",
                "   #130 = Utf8               hasNegatives",
                "   #131 = Utf8               ([BII)Z",
                "   #135 = Utf8               newDecoder",
                "   #136 = Utf8               ()Ljava/nio/charset/CharsetDecoder;",
                "   #138 = Utf8               sun/nio/cs/ArrayDecoder",
                "   #141 = Utf8               isASCIICompatible",
                "   #142 = Utf8               ()Z",
                "   #145 = Utf8               isLatin1Decodable",
                "   #148 = Utf8               decodeToLatin1",
                "   #149 = Utf8               ([BII[B)I",
                "   #153 = Utf8               java/nio/charset/CharsetDecoder",
                "   #154 = Utf8               maxCharsPerByte",
                "   #155 = Utf8               ()F",
                "   #158 = Utf8               scale",
                "   #159 = Utf8               (IF)I",
                "   #163 = Utf8               java/nio/charset/CodingErrorAction",
                "   #164 = Utf8               REPLACE",
                "   #165 = Utf8               Ljava/nio/charset/CodingErrorAction;",
                "   #168 = Utf8               onMalformedInput",
                "   #169 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #172 = Utf8               onUnmappableCharacter",
                "   #175 = Utf8               decode",
                "   #176 = Utf8               ([BII[C)I",
                "   #179 = Utf8               compress",
                "   #180 = Utf8               ([CII)[B",
                "   #185 = Utf8               getClass",
                "   #186 = Utf8               ()Ljava/lang/Class;",
                "   #190 = Utf8               java/lang/Class",
                "   #191 = Utf8               getClassLoader0",
                "   #192 = Utf8               ()Ljava/lang/ClassLoader;",
                "   #195 = Utf8               getSecurityManager",
                "   #196 = Utf8               ()Ljava/lang/SecurityManager;",
                "   #199 = Utf8               decodeWithDecoder",
                "   #200 = Utf8               (Ljava/nio/charset/CharsetDecoder;[C[BII)I",
                "   #202 = Utf8               java/nio/charset/CharacterCodingException",
                "   #204 = Utf8               java/lang/Error",
                "   #207 = Utf8               (Ljava/lang/Throwable;)V",
                "   #210 = Utf8               ([BB)V",
                "   #213 = Utf8               newStringNoRepl1",
                "   #214 = Utf8               ([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "   #216 = Utf8               java/lang/IllegalArgumentException",
                "   #219 = Utf8               getCause",
                "   #220 = Utf8               ()Ljava/lang/Throwable;",
                "   #222 = Utf8               java/nio/charset/MalformedInputException",
                "   #225 = Utf8               newStringUTF8NoRepl",
                "   #226 = Utf8               ([BIIZ)Ljava/lang/String;",
                "   #229 = Utf8               throwMalformed",
                "   #230 = Utf8               ([B)V",
                "   #233 = Utf8               ([BIILjava/nio/charset/Charset;)V",
                "   #237 = Utf8               forName",
                "   #239 = Utf8               java/nio/charset/UnsupportedCharsetException",
                "   #241 = Utf8               java/nio/charset/IllegalCharsetNameException",
                "   #243 = Utf8               java/io/UnsupportedEncodingException",
                "   #246 = Utf8               (Ljava/lang/String;)V",
                "   #249 = Utf8               encodeUTF8",
                "   #250 = Utf8               (B[BZ)[B",
                "   #253 = Utf8               encode8859_1",
                "   #254 = Utf8               (B[B)[B",
                "   #257 = Utf8               encodeASCII",
                "   #260 = Utf8               encodeWithEncoder",
                "   #261 = Utf8               (Ljava/nio/charset/Charset;B[BZ)[B",
                "   #264 = Utf8               newEncoder",
                "   #265 = Utf8               ()Ljava/nio/charset/CharsetEncoder;",
                "   #269 = Utf8               java/nio/charset/CharsetEncoder",
                "   #270 = Utf8               maxBytesPerChar",
                "   #272 = Utf8               sun/nio/cs/ArrayEncoder",
                "   #277 = Utf8               clone",
                "   #278 = Utf8               ()Ljava/lang/Object;",
                "   #281 = Utf8               encodeFromLatin1",
                "   #284 = Utf8               encodeFromUTF16",
                "   #287 = Utf8               safeTrim",
                "   #288 = Utf8               ([BIZ)[B",
                "   #291 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #296 = Utf8               toChars",
                "   #297 = Utf8               ([B)[C",
                "   #302 = Utf8               java/nio/ByteBuffer",
                "   #303 = Utf8               wrap",
                "   #304 = Utf8               ([B)Ljava/nio/ByteBuffer;",
                "   #308 = Utf8               java/nio/CharBuffer",
                "   #309 = Utf8               ([CII)Ljava/nio/CharBuffer;",
                "   #312 = Utf8               encode",
                "   #313 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #317 = Utf8               java/nio/charset/CoderResult",
                "   #318 = Utf8               isUnderflow",
                "   #321 = Utf8               throwException",
                "   #324 = Utf8               flush",
                "   #325 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;",
                "   #328 = Utf8               position",
                "   #329 = Utf8               ()I",
                "   #332 = Utf8               ()B",
                "   #335 = Utf8               ()[B",
                "   #338 = Utf8               getBytesNoRepl1",
                "   #339 = Utf8               (Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "   #341 = Utf8               java/nio/charset/UnmappableCharacterException",
                "   #344 = Utf8               isASCII",
                "   #345 = Utf8               ([B)Z",
                "   #350 = Utf8               throwUnmappable",
                "   #353 = Utf8               replaceNegatives",
                "   #354 = Utf8               ([BI)V",
                "   #357 = Utf8               getChar",
                "   #358 = Utf8               ([BI)C",
                "   #362 = Utf8               java/lang/Character",
                "   #363 = Utf8               isHighSurrogate",
                "   #364 = Utf8               (C)Z",
                "   #367 = Utf8               isLowSurrogate",
                "   #370 = Utf8               implEncodeISOArray",
                "   #371 = Utf8               ([BI[BII)I",
                "   #374 = Utf8               (I)V",
                "   #377 = Utf8               ([BI[CII)V",
                "   #382 = Utf8               isNotContinuation",
                "   #383 = Utf8               (I)Z",
                "   #386 = Utf8               (II)V",
                "   #389 = Utf8               isMalformed3",
                "   #390 = Utf8               (III)Z",
                "   #393 = Utf8               malformed3",
                "   #394 = Utf8               ([BI)I",
                "   #397 = Utf8               decode3",
                "   #398 = Utf8               (III)C",
                "   #401 = Utf8               isSurrogate",
                "   #404 = Utf8               isMalformed3_2",
                "   #405 = Utf8               (II)Z",
                "   #408 = Utf8               decode4",
                "   #409 = Utf8               (IIII)I",
                "   #412 = Utf8               isMalformed4",
                "   #415 = Utf8               isSupplementaryCodePoint",
                "   #418 = Utf8               malformed4",
                "   #421 = Utf8               highSurrogate",
                "   #422 = Utf8               (I)C",
                "   #425 = Utf8               lowSurrogate",
                "   #428 = Utf8               isMalformed4_2",
                "   #431 = Utf8               isMalformed4_3",
                "   #434 = Utf8               ([BII)Ljava/nio/ByteBuffer;",
                "   #437 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #440 = Utf8               (Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;",
                "   #443 = Utf8               java/lang/StringBuilder",
                "   #446 = Utf8               malformed input off :",
                "   #449 = Utf8               append",
                "   #450 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #453 = Utf8               (I)Ljava/lang/StringBuilder;",
                "   #455 = Utf8               , length :",
                "   #458 = Utf8               toString",
                "   #459 = Utf8               ()Ljava/lang/String;",
                "   #464 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V",
                "   #466 = Utf8               , length : 1",
                "   #470 = Utf8               encodeUTF8_UTF16",
                "   #471 = Utf8               ([BZ)[B",
                "   #474 = Utf8               toCodePoint",
                "   #475 = Utf8               (CC)I",
                "   #478 = Utf8               defaultCharset",
                "   #479 = Utf8               ()Ljava/nio/charset/Charset;",
                "   #482 = Utf8               java/lang/StringBuffer",
                "   #486 = Utf8               (Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V",
                "   #489 = Utf8               isLatin1",
                "   #492 = Utf8               charAt",
                "   #496 = Utf8               checkIndex",
                "   #499 = Utf8               codePointAt",
                "   #502 = Utf8               length",
                "   #505 = Utf8               codePointBefore",
                "   #508 = Utf8               checkFromToIndex",
                "   #511 = Utf8               codePointCount",
                "   #514 = Utf8               offsetByCodePoints",
                "   #515 = Utf8               (Ljava/lang/CharSequence;II)I",
                "   #518 = Utf8               checkBoundsBeginEnd",
                "   #519 = Utf8               (III)V",
                "   #522 = Utf8               getChars",
                "   #523 = Utf8               ([BII[CI)V",
                "   #527 = Utf8               getBytes",
                "   #528 = Utf8               ([BII[BI)V",
                "   #532 = Utf8               (Ljava/nio/charset/Charset;B[B)[B",
                "   #534 = Utf8               java/lang/NullPointerException",
                "   #538 = Utf8               equals",
                "   #539 = Utf8               ([B[B)Z",
                "   #542 = Utf8               contentEquals",
                "   #543 = Utf8               (Ljava/lang/CharSequence;)Z",
                "   #546 = Utf8               java/lang/AbstractStringBuilder",
                "   #549 = Utf8               getValue",
                "   #552 = Utf8               getCoder",
                "   #556 = Utf8               jdk/internal/util/ArraysSupport",
                "   #557 = Utf8               mismatch",
                "   #558 = Utf8               ([B[BI)I",
                "   #561 = Utf8               ([B[BI)Z",
                "   #564 = Utf8               nonSyncContentEquals",
                "   #565 = Utf8               (Ljava/lang/AbstractStringBuilder;)Z",
                "   #568 = Utf8               (Ljava/lang/Object;)Z",
                "   #571 = Utf8               java/lang/CharSequence",
                "   #576 = Utf8               ([BLjava/lang/CharSequence;I)Z",
                "   #579 = Utf8               regionMatches",
                "   #580 = Utf8               (ZILjava/lang/String;II)Z",
                "   #583 = Utf8               compareTo",
                "   #584 = Utf8               ([B[B)I",
                "   #588 = Utf8               compareToUTF16",
                "   #591 = Utf8               compareToLatin1",
                "   #594 = Utf8               CASE_INSENSITIVE_ORDER",
                "   #595 = Utf8               Ljava/util/Comparator;",
                "   #599 = Utf8               java/util/Comparator",
                "   #600 = Utf8               compare",
                "   #601 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)I",
                "   #607 = Utf8               (ILjava/lang/String;II)Z",
                "   #610 = Utf8               regionMatchesCI",
                "   #611 = Utf8               ([BI[BII)Z",
                "   #615 = Utf8               regionMatchesCI_UTF16",
                "   #618 = Utf8               regionMatchesCI_Latin1",
                "   #621 = Utf8               startsWith",
                "   #622 = Utf8               (Ljava/lang/String;I)Z",
                "   #625 = Utf8               hashCode",
                "   #626 = Utf8               ([B)I",
                "   #630 = Utf8               indexOf",
                "   #631 = Utf8               (II)I",
                "   #634 = Utf8               ([BIII)I",
                "   #638 = Utf8               lastIndexOf",
                "   #647 = Utf8               indexOfLatin1",
                "   #650 = Utf8               ([BBILjava/lang/String;I)I",
                "   #657 = Utf8               java/lang/Math",
                "   #658 = Utf8               clamp",
                "   #659 = Utf8               (JII)I",
                "   #667 = Utf8               (Ljava/lang/String;I)I",
                "   #675 = Utf8               lastIndexOfLatin1",
                "   #678 = Utf8               substring",
                "   #679 = Utf8               (II)Ljava/lang/String;",
                "   #682 = Utf8               newString",
                "   #683 = Utf8               ([BII)Ljava/lang/String;",
                "   #687 = Utf8               isEmpty",
                "   #691 = Utf8               java/lang/StringConcatHelper",
                "   #692 = Utf8               simpleConcat",
                "   #693 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;",
                "   #696 = Utf8               replace",
                "   #697 = Utf8               ([BCC)Ljava/lang/String;",
                "   #702 = Utf8               java/util/regex/Pattern",
                "   #703 = Utf8               matches",
                "   #704 = Utf8               (Ljava/lang/String;Ljava/lang/CharSequence;)Z",
                "   #708 = Utf8               (Ljava/lang/String;)I",
                "   #711 = Utf8               compile",
                "   #712 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;",
                "   #715 = Utf8               matcher",
                "   #716 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;",
                "   #720 = Utf8               java/util/regex/Matcher",
                "   #721 = Utf8               replaceFirst",
                "   #722 = Utf8               (Ljava/lang/String;)Ljava/lang/String;",
                "   #725 = Utf8               replaceAll",
                "   #728 = Utf8               (CC)Ljava/lang/String;",
                "   #731 = Utf8               ([BI[BI[BI)Ljava/lang/String;",
                "   #734 = Utf8               ([BIZ[BIZ[BIZ)Ljava/lang/String;",
                "   #737 = Utf8               addExact",
                "   #740 = Utf8               multiplyExact",
                "   #742 = Utf8               java/lang/ArithmeticException",
                "   #744 = Utf8               java/lang/OutOfMemoryError",
                "   #746 = Utf8               Required length exceeds implementation limit",
                "   #751 = Utf8               (C)Ljava/lang/StringBuilder;",
                "   #754 = Utf8               split",
                "   #755 = Utf8               (Ljava/lang/String;IZ)[Ljava/lang/String;",
                "   #757 = Utf8               .$|()[{^?*+\\\\",
                "   #760 = Utf8               (I)I",
                "   #765 = Utf8               (CIZ)[Ljava/lang/String;",
                "   #768 = Utf8               splitWithDelimiters",
                "   #769 = Utf8               (Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #773 = Utf8               java/util/ArrayList",
                "   #777 = Utf8               valueOf",
                "   #778 = Utf8               (C)Ljava/lang/String;",
                "   #781 = Utf8               add",
                "   #784 = Utf8               size",
                "   #787 = Utf8               get",
                "   #788 = Utf8               (I)Ljava/lang/Object;",
                "   #791 = Utf8               subList",
                "   #792 = Utf8               (II)Ljava/util/List;",
                "   #796 = Utf8               java/util/List",
                "   #797 = Utf8               toArray",
                "   #798 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;",
                "   #800 = Utf8               [Ljava/lang/String;",
                "   #803 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;",
                "   #806 = Utf8               join",
                "   #807 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;",
                "   #809 = Utf8               Requested string length exceeds VM limit",
                "   #812 = Utf8               newArray",
                "   #813 = Utf8               (J)[B",
                "   #816 = Utf8               ([BIB)V",
                "   #820 = Utf8               java/lang/Iterable",
                "   #821 = Utf8               iterator",
                "   #822 = Utf8               ()Ljava/util/Iterator;",
                "   #826 = Utf8               java/util/Iterator",
                "   #827 = Utf8               hasNext",
                "   #830 = Utf8               next",
                "   #833 = Utf8               ([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #836 = Utf8               toLowerCase",
                "   #837 = Utf8               (Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #842 = Utf8               java/util/Locale",
                "   #843 = Utf8               getDefault",
                "   #844 = Utf8               ()Ljava/util/Locale;",
                "   #847 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;",
                "   #850 = Utf8               toUpperCase",
                "   #856 = Utf8               trim",
                "   #857 = Utf8               ([B)Ljava/lang/String;",
                "   #861 = Utf8               strip",
                "   #865 = Utf8               stripLeading",
                "   #869 = Utf8               stripTrailing",
                "   #873 = Utf8               indexOfNonWhitespace",
                "   #876 = Utf8               lines",
                "   #877 = Utf8               ([B)Ljava/util/stream/Stream;",
                "   #881 = Utf8               ()Ljava/util/stream/Stream;",
                "   #883 = Utf8",
                "   #886 = Utf8               repeat",
                "   #887 = Utf8               (I)Ljava/lang/String;",
                "   #890 = Utf8               apply",
                "   #891 = Utf8               (Ljava/lang/String;)Ljava/util/function/Function;",
                "   #895 = Utf8               java/util/stream/Stream",
                "   #896 = Utf8               map",
                "   #897 = Utf8               (Ljava/util/function/Function;)Ljava/util/stream/Stream;",
                "   #899 = Utf8               java/lang/Integer",
                "   #903 = Utf8               ()Ljava/util/function/Function;",
                "   #906 = Utf8               (I)Ljava/util/function/Function;",
                "   #908 = Utf8               \\n",
                "   #912 = Utf8               java/util/stream/Collectors",
                "   #913 = Utf8               joining",
                "   #914 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;",
                "   #917 = Utf8               collect",
                "   #918 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;",
                "   #924 = Utf8               lastIndexOfNonWhitespace",
                "   #928 = Utf8               toList",
                "   #929 = Utf8               ()Ljava/util/List;",
                "   #932 = Utf8               outdent",
                "   #933 = Utf8               (Ljava/util/List;)I",
                "   #936 = Utf8               stream",
                "   #942 = Utf8               min",
                "   #947 = Utf8               isBlank",
                "   #950 = Utf8               toCharArray",
                "   #951 = Utf8               ()[C",
                "   #953 = Utf8               Invalid escape sequence: \\\\%c \\\\\\\\u%04X",
                "   #956 = Utf8               (C)Ljava/lang/Character;",
                "   #959 = Utf8               (I)Ljava/lang/Integer;",
                "   #962 = Utf8               format",
                "   #963 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "   #967 = Utf8               ([CII)V",
                "   #971 = Utf8               java/util/function/Function",
                "   #973 = Utf8               java/lang/StringLatin1$CharsSpliterator",
                "   #975 = Utf8               java/util/Spliterator",
                "   #979 = Utf8               java/lang/StringUTF16$CharsSpliterator",
                "   #984 = Utf8               java/util/stream/StreamSupport",
                "   #985 = Utf8               intStream",
                "   #986 = Utf8               (Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;",
                "   #988 = Utf8               java/lang/StringUTF16$CodePointsSpliterator",
                "   #991 = Utf8               java/util/Formatter",
                "   #995 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;",
                "   #999 = Utf8               (Ljava/util/Locale;)V",
                "  #1001 = Utf8               null",
                "  #1005 = Utf8               ([C)V",
                "  #1007 = Utf8               true",
                "  #1009 = Utf8               false",
                "  #1012 = Utf8               canEncode",
                "  #1015 = Utf8               (C)[B",
                "  #1022 = Utf8               java/lang/Long",
                "  #1023 = Utf8               (J)Ljava/lang/String;",
                "  #1027 = Utf8               java/lang/Float",
                "  #1028 = Utf8               (F)Ljava/lang/String;",
                "  #1032 = Utf8               java/lang/Double",
                "  #1033 = Utf8               (D)Ljava/lang/String;",
                "  #1035 = Utf8               count is negative:",
                "  #1038 = Utf8               fill",
                "  #1041 = Utf8               repeatCopyRest",
                "  #1045 = Utf8               maybeLatin1",
                "  #1051 = Utf8               jdk/internal/util/Preconditions",
                "  #1052 = Utf8               SIOOBE_FORMATTER",
                "  #1053 = Utf8               Ljava/util/function/BiFunction;",
                "  #1056 = Utf8               (IILjava/util/function/BiFunction;)I",
                "  #1059 = Utf8               (IIILjava/util/function/BiFunction;)I",
                "  #1062 = Utf8               checkFromIndexSize",
                "  #1065 = Utf8               isBmpCodePoint",
                "  #1068 = Utf8               toBytesSupplementary",
                "  #1070 = Utf8               Not a valid Unicode code point: 0x%X",
                "  #1074 = Utf8               java/util/Optional",
                "  #1075 = Utf8               of",
                "  #1076 = Utf8               (Ljava/lang/Object;)Ljava/util/Optional;",
                "  #1081 = Utf8               resolveConstantDesc",
                "  #1082 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;",
                "  #1091 = Utf8               java/io/ObjectStreamField",
                "  #1094 = Utf8               serialPersistentFields",
                "  #1095 = Utf8               [Ljava/io/ObjectStreamField;",
                "  #1097 = Utf8               java/lang/String$CaseInsensitiveComparator",
                "  #1100 = Utf8               java/io/Serializable",
                "  #1102 = Utf8               java/lang/Comparable",
                "  #1104 = Utf8               java/lang/constant/Constable",
                "  #1106 = Utf8               java/lang/constant/ConstantDesc",
                "  #1107 = Utf8               RuntimeVisibleAnnotations",
                "  #1108 = Utf8               Ljdk/internal/vm/annotation/Stable;",
                "  #1109 = Utf8               serialVersionUID",
                "  #1110 = Utf8               J",
                "  #1111 = Utf8               ConstantValue",
                "  #1114 = Utf8               REPL",
                "  #1115 = Utf8               C",
                "  #1116 = Utf8               Signature",
                "  #1117 = Utf8               Ljava/util/Comparator<Ljava/lang/String;>;",
                "  #1118 = Utf8               LATIN1",
                "  #1120 = Utf8               UTF16",
                "  #1122 = Utf8               Code",
                "  #1123 = Utf8               LineNumberTable",
                "  #1124 = Utf8               LocalVariableTable",
                "  #1125 = Utf8               this",
                "  #1126 = Utf8               Ljava/lang/String;",
                "  #1127 = Utf8               original",
                "  #1128 = Utf8               Ljdk/internal/vm/annotation/IntrinsicCandidate;",
                "  #1129 = Utf8               [C",
                "  #1130 = Utf8               offset",
                "  #1131 = Utf8               count",
                "  #1132 = Utf8               ([III)V",
                "  #1133 = Utf8               val",
                "  #1134 = Utf8               codePoints",
                "  #1135 = Utf8               [I",
                "  #1136 = Utf8               StackMapTable",
                "  #1138 = Utf8               i",
                "  #1139 = Utf8               ascii",
                "  #1140 = Utf8               hibyte",
                "  #1141 = Utf8               Deprecated",
                "  #1142 = Utf8               Ljava/lang/Deprecated;",
                "  #1143 = Utf8               since",
                "  #1144 = Utf8               1.1",
                "  #1145 = Utf8               ([BIILjava/lang/String;)V",
                "  #1146 = Utf8               bytes",
                "  #1147 = Utf8               charsetName",
                "  #1148 = Utf8               Exceptions",
                "  #1149 = Utf8               charset",
                "  #1150 = Utf8               Ljava/nio/charset/Charset;",
                "  #1151 = Utf8               b2",
                "  #1152 = Utf8               b1",
                "  #1153 = Utf8               dp",
                "  #1154 = Utf8               sl",
                "  #1155 = Utf8               dst",
                "  #1156 = Utf8               buf",
                "  #1157 = Utf8               b",
                "  #1158 = Utf8               bs",
                "  #1159 = Utf8               en",
                "  #1160 = Utf8               ca",
                "  #1161 = Utf8               clen",
                "  #1162 = Utf8               ad",
                "  #1163 = Utf8               Lsun/nio/cs/ArrayDecoder;",
                "  #1164 = Utf8               caLen",
                "  #1165 = Utf8               x",
                "  #1166 = Utf8               Ljava/nio/charset/CharacterCodingException;",
                "  #1167 = Utf8               cd",
                "  #1168 = Utf8               Ljava/nio/charset/CharsetDecoder;",
                "  #1170 = Utf8               noShare",
                "  #1171 = Utf8               newStringNoRepl",
                "  #1172 = Utf8               mie",
                "  #1173 = Utf8               Ljava/nio/charset/MalformedInputException;",
                "  #1174 = Utf8               cause",
                "  #1175 = Utf8               Ljava/lang/Throwable;",
                "  #1176 = Utf8               e",
                "  #1177 = Utf8               Ljava/lang/IllegalArgumentException;",
                "  #1178 = Utf8               src",
                "  #1179 = Utf8               cs",
                "  #1181 = Utf8               java/lang/Throwable",
                "  #1182 = Utf8               len",
                "  #1183 = Utf8               ba",
                "  #1184 = Utf8               isTrusted",
                "  #1185 = Utf8               expansionFactor",
                "  #1186 = Utf8               F",
                "  #1187 = Utf8               csn",
                "  #1188 = Utf8               blen",
                "  #1189 = Utf8               ae",
                "  #1190 = Utf8               Lsun/nio/cs/ArrayEncoder;",
                "  #1191 = Utf8               cr",
                "  #1192 = Utf8               Ljava/nio/charset/CoderResult;",
                "  #1193 = Utf8               doReplace",
                "  #1194 = Utf8               ce",
                "  #1195 = Utf8               Ljava/nio/charset/CharsetEncoder;",
                "  #1196 = Utf8               bb",
                "  #1197 = Utf8               Ljava/nio/ByteBuffer;",
                "  #1198 = Utf8               cb",
                "  #1199 = Utf8               Ljava/nio/CharBuffer;",
                "  #1200 = Utf8               getBytesUTF8NoRepl",
                "  #1201 = Utf8               (Ljava/lang/String;)[B",
                "  #1202 = Utf8               s",
                "  #1203 = Utf8               getBytesNoRepl",
                "  #1204 = Utf8               positives",
                "  #1205 = Utf8               c",
                "  #1206 = Utf8               fromIndex",
                "  #1207 = Utf8               ret",
                "  #1208 = Utf8               sp",
                "  #1209 = Utf8               decodeASCII",
                "  #1210 = Utf8               ([BI[CII)I",
                "  #1211 = Utf8               sa",
                "  #1212 = Utf8               da",
                "  #1213 = Utf8               b3",
                "  #1214 = Utf8               b4",
                "  #1215 = Utf8               uc",
                "  #1216 = Utf8               off",
                "  #1217 = Utf8               nb",
                "  #1218 = Utf8               msg",
                "  #1219 = Utf8               c2",
                "  #1220 = Utf8               ([BLjava/lang/String;)V",
                "  #1221 = Utf8               ([BLjava/nio/charset/Charset;)V",
                "  #1222 = Utf8               (Ljava/lang/StringBuffer;)V",
                "  #1223 = Utf8               buffer",
                "  #1224 = Utf8               Ljava/lang/StringBuffer;",
                "  #1225 = Utf8               (Ljava/lang/StringBuilder;)V",
                "  #1226 = Utf8               builder",
                "  #1227 = Utf8               Ljava/lang/StringBuilder;",
                "  #1228 = Utf8               index",
                "  #1229 = Utf8               beginIndex",
                "  #1230 = Utf8               endIndex",
                "  #1231 = Utf8               codePointOffset",
                "  #1232 = Utf8               (II[CI)V",
                "  #1233 = Utf8               srcBegin",
                "  #1234 = Utf8               srcEnd",
                "  #1235 = Utf8               dstBegin",
                "  #1236 = Utf8               (II[BI)V",
                "  #1237 = Utf8               (Ljava/nio/charset/Charset;)[B",
                "  #1238 = Utf8               aString",
                "  #1239 = Utf8               anObject",
                "  #1240 = Utf8               Ljava/lang/Object;",
                "  #1241 = Utf8               (Ljava/lang/StringBuffer;)Z",
                "  #1242 = Utf8               sb",
                "  #1243 = Utf8               Ljava/lang/AbstractStringBuilder;",
                "  #1244 = Utf8               v1",
                "  #1245 = Utf8               v2",
                "  #1246 = Utf8               Ljava/lang/CharSequence;",
                "  #1247 = Utf8               n",
                "  #1248 = Utf8               equalsIgnoreCase",
                "  #1249 = Utf8               (Ljava/lang/String;)Z",
                "  #1250 = Utf8               anotherString",
                "  #1251 = Utf8               compareToIgnoreCase",
                "  #1252 = Utf8               str",
                "  #1253 = Utf8               toffset",
                "  #1254 = Utf8               other",
                "  #1255 = Utf8               ooffset",
                "  #1256 = Utf8               tv",
                "  #1257 = Utf8               ov",
                "  #1258 = Utf8               ignoreCase",
                "  #1259 = Utf8               prefix",
                "  #1260 = Utf8               ta",
                "  #1261 = Utf8               pa",
                "  #1262 = Utf8               po",
                "  #1263 = Utf8               pc",
                "  #1264 = Utf8               endsWith",
                "  #1265 = Utf8               suffix",
                "  #1266 = Utf8               h",
                "  #1267 = Utf8               ch",
                "  #1268 = Utf8               (Ljava/lang/String;II)I",
                "  #1269 = Utf8               srcCoder",
                "  #1270 = Utf8               srcCount",
                "  #1271 = Utf8               tgtStr",
                "  #1272 = Utf8               tgtCount",
                "  #1273 = Utf8               tgt",
                "  #1274 = Utf8               tgtCoder",
                "  #1275 = Utf8               rightIndex",
                "  #1276 = Utf8               subLen",
                "  #1277 = Utf8               subSequence",
                "  #1278 = Utf8               (II)Ljava/lang/CharSequence;",
                "  #1279 = Utf8               concat",
                "  #1280 = Utf8               oldChar",
                "  #1281 = Utf8               newChar",
                "  #1282 = Utf8               regex",
                "  #1283 = Utf8               contains",
                "  #1284 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1285 = Utf8               replacement",
                "  #1286 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;",
                "  #1287 = Utf8               thisIsLatin1",
                "  #1288 = Utf8               trgtIsLatin1",
                "  #1289 = Utf8               replIsLatin1",
                "  #1290 = Utf8               resultLen",
                "  #1291 = Utf8               ignored",
                "  #1292 = Utf8               Ljava/lang/ArithmeticException;",
                "  #1293 = Utf8               target",
                "  #1294 = Utf8               trgtStr",
                "  #1295 = Utf8               replStr",
                "  #1296 = Utf8               thisLen",
                "  #1297 = Utf8               trgtLen",
                "  #1298 = Utf8               replLen",
                "  #1299 = Utf8               (Ljava/lang/String;I)[Ljava/lang/String;",
                "  #1300 = Utf8               limit",
                "  #1301 = Utf8               withDelimiters",
                "  #1302 = Utf8               pattern",
                "  #1303 = Utf8               Ljava/util/regex/Pattern;",
                "  #1304 = Utf8               last",
                "  #1305 = Utf8               matchCount",
                "  #1306 = Utf8               limited",
                "  #1307 = Utf8               list",
                "  #1308 = Utf8               Ljava/util/ArrayList;",
                "  #1309 = Utf8               del",
                "  #1310 = Utf8               resultSize",
                "  #1311 = Utf8               result",
                "  #1312 = Utf8               LocalVariableTypeTable",
                "  #1313 = Utf8               Ljava/util/ArrayList<Ljava/lang/String;>;",
                "  #1314 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;",
                "  #1315 = Utf8               (Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;",
                "  #1316 = Utf8               delimiter",
                "  #1317 = Utf8               elements",
                "  #1318 = Utf8               [Ljava/lang/CharSequence;",
                "  #1319 = Utf8               delim",
                "  #1320 = Utf8               elems",
                "  #1321 = Utf8               el",
                "  #1322 = Utf8               icoder",
                "  #1323 = Utf8               Ljdk/internal/vm/annotation/ForceInline;",
                "  #1324 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;",
                "  #1325 = Utf8               Ljava/lang/Iterable;",
                "  #1326 = Utf8               Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;",
                "  #1327 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)Ljava/lang/String;",
                "  #1328 = Utf8               locale",
                "  #1329 = Utf8               Ljava/util/Locale;",
                "  #1330 = Utf8               ()Ljava/util/stream/Stream<Ljava/lang/String;>;",
                "  #1331 = Utf8               indent",
                "  #1332 = Utf8               spaces",
                "  #1333 = Utf8               Ljava/util/stream/Stream;",
                "  #1334 = Utf8               Ljava/util/stream/Stream<Ljava/lang/String;>;",
                "  #1335 = Utf8               stripIndent",
                "  #1336 = Utf8               lastChar",
                "  #1337 = Utf8               optOut",
                "  #1338 = Utf8               Ljava/util/List;",
                "  #1339 = Utf8               Ljava/util/List<Ljava/lang/String;>;",
                "  #1340 = Utf8               leadingWhitespace",
                "  #1341 = Utf8               line",
                "  #1342 = Utf8               lastLine",
                "  #1343 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)I",
                "  #1344 = Utf8               translateEscapes",
                "  #1345 = Utf8               code",
                "  #1346 = Utf8               chars",
                "  #1347 = Utf8               from",
                "  #1348 = Utf8               to",
                "  #1349 = Utf8               transform",
                "  #1350 = Utf8               (Ljava/util/function/Function;)Ljava/lang/Object;",
                "  #1351 = Utf8               f",
                "  #1352 = Utf8               Ljava/util/function/Function;",
                "  #1353 = Utf8               Ljava/util/function/Function<-Ljava/lang/String;+TR;>;",
                "  #1354 = Utf8               <R:Ljava/lang/Object;>(Ljava/util/function/Function<-Ljava/lang/String;+TR;>;)TR;",
                "  #1355 = Utf8               ()Ljava/util/stream/IntStream;",
                "  #1357 = Utf8               java/util/Spliterator$OfInt",
                "  #1358 = Utf8               args",
                "  #1359 = Utf8               [Ljava/lang/Object;",
                "  #1360 = Utf8               (Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "  #1361 = Utf8               l",
                "  #1362 = Utf8               formatted",
                "  #1363 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;",
                "  #1364 = Utf8               obj",
                "  #1365 = Utf8               ([C)Ljava/lang/String;",
                "  #1366 = Utf8               data",
                "  #1367 = Utf8               ([CII)Ljava/lang/String;",
                "  #1368 = Utf8               copyValueOf",
                "  #1369 = Utf8               (Z)Ljava/lang/String;",
                "  #1370 = Utf8               d",
                "  #1371 = Utf8               D",
                "  #1372 = Utf8               intern",
                "  #1373 = Utf8               single",
                "  #1374 = Utf8               multiple",
                "  #1375 = Utf8               copied",
                "  #1376 = Utf8               ([BIIBI)V",
                "  #1377 = Utf8               srcPos",
                "  #1378 = Utf8               sig",
                "  #1379 = Utf8               Ljava/lang/Void;",
                "  #1381 = Utf8               java/lang/Void",
                "  #1382 = Utf8               asb",
                "  #1383 = Utf8               checkOffset",
                "  #1384 = Utf8               begin",
                "  #1385 = Utf8               end",
                "  #1386 = Utf8               valueOfCodePoint",
                "  #1387 = Utf8               codePoint",
                "  #1388 = Utf8               describeConstable",
                "  #1389 = Utf8               ()Ljava/util/Optional;",
                "  #1390 = Utf8               ()Ljava/util/Optional<Ljava/lang/String;>;",
                "  #1391 = Utf8               lookup",
                "  #1392 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;",
                "  #1393 = Utf8               (Ljava/lang/Object;)I",
                "  #1394 = Utf8               MethodParameters",
                "  #1395 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Object;",
                "  #1397 = Utf8               java/lang/ReflectiveOperationException",
                "  #1398 = Utf8               lambda$stripIndent$3",
                "  #1399 = Utf8               (ILjava/lang/String;)Ljava/lang/String;",
                "  #1400 = Utf8               firstNonWhitespace",
                "  #1401 = Utf8               lastNonWhitespace",
                "  #1402 = Utf8               incidentalWhitespace",
                "  #1403 = Utf8               lambda$indent$2",
                "  #1404 = Utf8               lambda$indent$1",
                "  #1405 = Utf8               lambda$indent$0",
                "  #1406 = Utf8               <clinit>",
                "  #1407 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;Ljava/lang/constant/Constable;Ljava/lang/constant/ConstantDesc;",
                "  #1408 = Utf8               SourceFile",
                "  #1409 = Utf8               String.java",
                "  #1410 = Utf8               NestMembers",
                "  #1411 = Utf8               BootstrapMethods",
                "  #1430 = Utf8               java/lang/invoke/LambdaMetafactory",
                "  #1431 = Utf8               metafactory",
                "  #1432 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #1433 = Utf8               InnerClasses",
                "  #1434 = Utf8               CharsSpliterator",
                "  #1435 = Utf8               OfInt",
                "  #1436 = Utf8               CodePointsSpliterator",
                "  #1438 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "  #1440 = Utf8               java/lang/invoke/MethodHandles",
                "  #1441 = Utf8               Lookup",
                "  #1442 = Utf8               CaseInsensitiveComparator"
        );
    }
}
