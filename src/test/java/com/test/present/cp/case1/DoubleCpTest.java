package com.test.present.cp.case1;

import com.test.present.cp.ConstantPoolPresenterTestBase;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

public class DoubleCpTest extends ConstantPoolPresenterTestBase {

    @Before
    public void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.Double"));
    }

    @Test
    public void test() {
        expectedLines = List.of(
                "    #2 = Utf8               java/lang/Double",
                "    #4 = Utf8               java/lang/Byte",
                "    #8 = Utf8               jdk/internal/math/DoubleToDecimal",
                "    #9 = Utf8               toString",
                "   #10 = Utf8               (D)Ljava/lang/String;",
                "   #13 = Utf8               isFinite",
                "   #14 = Utf8               (D)Z",
                "   #17 = Utf8               java/lang/StringBuilder",
                "   #20 = Utf8               <init>",
                "   #21 = Utf8               (I)V",
                "   #25 = Utf8               java/lang/Math",
                "   #26 = Utf8               copySign",
                "   #27 = Utf8               (DD)D",
                "   #31 = Utf8               -",
                "   #34 = Utf8               append",
                "   #35 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #37 = Utf8               0x",
                "   #40 = Utf8               abs",
                "   #41 = Utf8               (D)D",
                "   #43 = Utf8               0.0p0",
                "   #48 = Utf8               doubleToLongBits",
                "   #49 = Utf8               (D)J",
                "   #51 = Utf8               jdk/internal/math/DoubleConsts",
                "   #57 = Utf8               0.",
                "   #59 = Utf8               1.",
                "   #63 = Utf8               java/lang/Long",
                "   #64 = Utf8               toHexString",
                "   #65 = Utf8               (J)Ljava/lang/String;",
                "   #69 = Utf8               java/lang/String",
                "   #70 = Utf8               substring",
                "   #71 = Utf8               (II)Ljava/lang/String;",
                "   #73 = Utf8               0000000000000",
                "   #76 = Utf8               equals",
                "   #77 = Utf8               (Ljava/lang/Object;)Z",
                "   #79 = Utf8               0",
                "   #81 = Utf8               0{1,12}$",
                "   #83 = Utf8",
                "   #86 = Utf8               replaceFirst",
                "   #87 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "   #90 = Utf8               (C)Ljava/lang/StringBuilder;",
                "   #93 = Utf8               getExponent",
                "   #94 = Utf8               (D)I",
                "   #97 = Utf8               (I)Ljava/lang/StringBuilder;",
                "  #100 = Utf8               ()Ljava/lang/String;",
                "  #103 = Utf8               parseDouble",
                "  #104 = Utf8               (Ljava/lang/String;)D",
                "  #107 = Utf8               (D)V",
                "  #110 = Utf8               jdk/internal/math/FloatingDecimal",
                "  #116 = Utf8               java/lang/Number",
                "  #117 = Utf8               ()V",
                "  #120 = Utf8               value",
                "  #121 = Utf8               D",
                "  #124 = Utf8               isNaN",
                "  #127 = Utf8               isInfinite",
                "  #130 = Utf8               hashCode",
                "  #133 = Utf8               (J)I",
                "  #136 = Utf8               doubleToRawLongBits",
                "  #141 = Utf8               compare",
                "  #142 = Utf8               (DD)I",
                "  #145 = Utf8               max",
                "  #148 = Utf8               min",
                "  #152 = Utf8               java/util/Optional",
                "  #153 = Utf8               of",
                "  #154 = Utf8               (Ljava/lang/Object;)Ljava/util/Optional;",
                "  #157 = Utf8               compareTo",
                "  #158 = Utf8               (Ljava/lang/Double;)I",
                "  #161 = Utf8               resolveConstantDesc",
                "  #162 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Double;",
                "  #164 = Utf8               double",
                "  #168 = Utf8               java/lang/Class",
                "  #169 = Utf8               getPrimitiveClass",
                "  #170 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;",
                "  #173 = Utf8               TYPE",
                "  #174 = Utf8               Ljava/lang/Class;",
                "  #176 = Utf8               java/lang/Comparable",
                "  #178 = Utf8               java/lang/constant/Constable",
                "  #180 = Utf8               java/lang/constant/ConstantDesc",
                "  #181 = Utf8               POSITIVE_INFINITY",
                "  #182 = Utf8               ConstantValue",
                "  #185 = Utf8               NEGATIVE_INFINITY",
                "  #188 = Utf8               NaN",
                "  #191 = Utf8               MAX_VALUE",
                "  #192 = Utf8               MIN_NORMAL",
                "  #193 = Utf8               MIN_VALUE",
                "  #196 = Utf8               SIZE",
                "  #197 = Utf8               I",
                "  #199 = Utf8               PRECISION",
                "  #201 = Utf8               MAX_EXPONENT",
                "  #203 = Utf8               MIN_EXPONENT",
                "  #205 = Utf8               BYTES",
                "  #207 = Utf8               Signature",
                "  #208 = Utf8               Ljava/lang/Class<Ljava/lang/Double;>;",
                "  #209 = Utf8               serialVersionUID",
                "  #210 = Utf8               J",
                "  #213 = Utf8               Code",
                "  #214 = Utf8               LineNumberTable",
                "  #215 = Utf8               LocalVariableTable",
                "  #216 = Utf8               d",
                "  #217 = Utf8               subnormal",
                "  #218 = Utf8               Z",
                "  #219 = Utf8               signifBits",
                "  #220 = Utf8               signif",
                "  #221 = Utf8               Ljava/lang/String;",
                "  #222 = Utf8               answer",
                "  #223 = Utf8               Ljava/lang/StringBuilder;",
                "  #224 = Utf8               StackMapTable",
                "  #225 = Utf8               valueOf",
                "  #226 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;",
                "  #227 = Utf8               s",
                "  #228 = Utf8               Exceptions",
                "  #230 = Utf8               java/lang/NumberFormatException",
                "  #231 = Utf8               (D)Ljava/lang/Double;",
                "  #232 = Utf8               RuntimeVisibleAnnotations",
                "  #233 = Utf8               Ljdk/internal/vm/annotation/IntrinsicCandidate;",
                "  #234 = Utf8               v",
                "  #235 = Utf8               this",
                "  #236 = Utf8               Ljava/lang/Double;",
                "  #237 = Utf8               Deprecated",
                "  #238 = Utf8               Ljava/lang/Deprecated;",
                "  #239 = Utf8               since",
                "  #240 = Utf8               9",
                "  #241 = Utf8               forRemoval",
                "  #243 = Utf8               (Ljava/lang/String;)V",
                "  #244 = Utf8               ()Z",
                "  #245 = Utf8               byteValue",
                "  #246 = Utf8               ()B",
                "  #247 = Utf8               shortValue",
                "  #248 = Utf8               ()S",
                "  #249 = Utf8               intValue",
                "  #250 = Utf8               ()I",
                "  #251 = Utf8               longValue",
                "  #252 = Utf8               ()J",
                "  #253 = Utf8               floatValue",
                "  #254 = Utf8               ()F",
                "  #255 = Utf8               doubleValue",
                "  #256 = Utf8               ()D",
                "  #257 = Utf8               obj",
                "  #258 = Utf8               Ljava/lang/Object;",
                "  #259 = Utf8               longBitsToDouble",
                "  #260 = Utf8               (J)D",
                "  #261 = Utf8               anotherDouble",
                "  #262 = Utf8               d1",
                "  #263 = Utf8               d2",
                "  #264 = Utf8               thisBits",
                "  #265 = Utf8               anotherBits",
                "  #266 = Utf8               sum",
                "  #267 = Utf8               a",
                "  #268 = Utf8               b",
                "  #269 = Utf8               describeConstable",
                "  #270 = Utf8               ()Ljava/util/Optional;",
                "  #271 = Utf8               ()Ljava/util/Optional<Ljava/lang/Double;>;",
                "  #272 = Utf8               lookup",
                "  #273 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;",
                "  #274 = Utf8               (Ljava/lang/Object;)I",
                "  #275 = Utf8               MethodParameters",
                "  #276 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Object;",
                "  #278 = Utf8               java/lang/ReflectiveOperationException",
                "  #279 = Utf8               <clinit>",
                "  #280 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Ljava/lang/Double;>;Ljava/lang/constant/Constable;Ljava/lang/constant/ConstantDesc;",
                "  #281 = Utf8               SourceFile",
                "  #282 = Utf8               Double.java",
                "  #283 = Utf8               Ljdk/internal/ValueBased;",
                "  #284 = Utf8               InnerClasses",
                "  #286 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "  #288 = Utf8               java/lang/invoke/MethodHandles",
                "  #289 = Utf8               Lookup"
        );
    }
}
