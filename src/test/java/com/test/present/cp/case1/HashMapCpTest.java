package com.test.present.cp.case1;

import com.test.present.cp.ConstantPoolPresenterTestBase;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

public class HashMapCpTest extends ConstantPoolPresenterTestBase {

    @Before
    public void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.util.HashMap"));
    }

    @Test
    public void test() {
        expectedLines = List.of(
                "    #4 = Utf8               java/lang/Object",
                "    #5 = Utf8               hashCode",
                "    #6 = Utf8               ()I",
                "    #8 = Utf8               java/lang/Comparable",
                "   #11 = Utf8               getClass",
                "   #12 = Utf8               ()Ljava/lang/Class;",
                "   #14 = Utf8               java/lang/String",
                "   #18 = Utf8               java/lang/Class",
                "   #19 = Utf8               getGenericInterfaces",
                "   #20 = Utf8               ()[Ljava/lang/reflect/Type;",
                "   #22 = Utf8               java/lang/reflect/ParameterizedType",
                "   #25 = Utf8               getRawType",
                "   #26 = Utf8               ()Ljava/lang/reflect/Type;",
                "   #29 = Utf8               getActualTypeArguments",
                "   #32 = Utf8               compareTo",
                "   #33 = Utf8               (Ljava/lang/Object;)I",
                "   #37 = Utf8               java/lang/Integer",
                "   #38 = Utf8               numberOfLeadingZeros",
                "   #39 = Utf8               (I)I",
                "   #41 = Utf8               java/util/HashMap",
                "   #46 = Utf8               java/util/AbstractMap",
                "   #47 = Utf8               <init>",
                "   #48 = Utf8               ()V",
                "   #50 = Utf8               java/lang/IllegalArgumentException",
                "   #52 = Utf8               java/lang/StringBuilder",
                "   #55 = Utf8               Illegal initial capacity:",
                "   #58 = Utf8               append",
                "   #59 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #62 = Utf8               (I)Ljava/lang/StringBuilder;",
                "   #65 = Utf8               toString",
                "   #66 = Utf8               ()Ljava/lang/String;",
                "   #69 = Utf8               (Ljava/lang/String;)V",
                "   #73 = Utf8               java/lang/Float",
                "   #74 = Utf8               isNaN",
                "   #75 = Utf8               (F)Z",
                "   #77 = Utf8               Illegal load factor:",
                "   #80 = Utf8               (F)Ljava/lang/StringBuilder;",
                "   #83 = Utf8               loadFactor",
                "   #84 = Utf8               F",
                "   #87 = Utf8               tableSizeFor",
                "   #90 = Utf8               threshold",
                "   #91 = Utf8               I",
                "   #95 = Utf8               (IF)V",
                "   #98 = Utf8               putMapEntries",
                "   #99 = Utf8               (Ljava/util/Map;Z)V",
                "  #103 = Utf8               java/util/Map",
                "  #104 = Utf8               size",
                "  #107 = Utf8               table",
                "  #108 = Utf8               [Ljava/util/HashMap$Node;",
                "  #112 = Utf8               java/lang/Math",
                "  #113 = Utf8               ceil",
                "  #114 = Utf8               (D)D",
                "  #119 = Utf8               resize",
                "  #120 = Utf8               ()[Ljava/util/HashMap$Node;",
                "  #123 = Utf8               entrySet",
                "  #124 = Utf8               ()Ljava/util/Set;",
                "  #128 = Utf8               java/util/Set",
                "  #129 = Utf8               iterator",
                "  #130 = Utf8               ()Ljava/util/Iterator;",
                "  #134 = Utf8               java/util/Iterator",
                "  #135 = Utf8               hasNext",
                "  #136 = Utf8               ()Z",
                "  #139 = Utf8               next",
                "  #140 = Utf8               ()Ljava/lang/Object;",
                "  #142 = Utf8               java/util/Map$Entry",
                "  #145 = Utf8               getKey",
                "  #148 = Utf8               getValue",
                "  #151 = Utf8               hash",
                "  #154 = Utf8               putVal",
                "  #155 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;",
                "  #160 = Utf8               getNode",
                "  #161 = Utf8               (Ljava/lang/Object;)Ljava/util/HashMap$Node;",
                "  #165 = Utf8               java/util/HashMap$Node",
                "  #166 = Utf8               value",
                "  #167 = Utf8               Ljava/lang/Object;",
                "  #172 = Utf8               key",
                "  #175 = Utf8               equals",
                "  #176 = Utf8               (Ljava/lang/Object;)Z",
                "  #179 = Utf8               Ljava/util/HashMap$Node;",
                "  #181 = Utf8               java/util/HashMap$TreeNode",
                "  #184 = Utf8               getTreeNode",
                "  #185 = Utf8               (ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #188 = Utf8               newNode",
                "  #189 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #192 = Utf8               putTreeVal",
                "  #193 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #196 = Utf8               treeifyBin",
                "  #197 = Utf8               ([Ljava/util/HashMap$Node;I)V",
                "  #200 = Utf8               afterNodeAccess",
                "  #201 = Utf8               (Ljava/util/HashMap$Node;)V",
                "  #204 = Utf8               modCount",
                "  #207 = Utf8               afterNodeInsertion",
                "  #208 = Utf8               (Z)V",
                "  #213 = Utf8               split",
                "  #214 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;II)V",
                "  #217 = Utf8               replacementTreeNode",
                "  #218 = Utf8               (Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #221 = Utf8               prev",
                "  #222 = Utf8               Ljava/util/HashMap$TreeNode;",
                "  #226 = Utf8               treeify",
                "  #227 = Utf8               ([Ljava/util/HashMap$Node;)V",
                "  #230 = Utf8               removeNode",
                "  #231 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;",
                "  #234 = Utf8               removeTreeNode",
                "  #235 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;Z)V",
                "  #238 = Utf8               afterNodeRemoval",
                "  #241 = Utf8               keySet",
                "  #242 = Utf8               Ljava/util/Set;",
                "  #244 = Utf8               java/util/HashMap$KeySet",
                "  #247 = Utf8               (Ljava/util/HashMap;)V",
                "  #250 = Utf8               getComponentType",
                "  #254 = Utf8               java/lang/reflect/Array",
                "  #255 = Utf8               newInstance",
                "  #256 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #258 = Utf8               [Ljava/lang/Object;",
                "  #261 = Utf8               values",
                "  #262 = Utf8               Ljava/util/Collection;",
                "  #264 = Utf8               java/util/HashMap$Values",
                "  #269 = Utf8               java/util/HashMap$EntrySet",
                "  #272 = Utf8               java/lang/NullPointerException",
                "  #277 = Utf8               java/util/function/Function",
                "  #278 = Utf8               apply",
                "  #279 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "  #281 = Utf8               java/util/ConcurrentModificationException",
                "  #286 = Utf8               java/util/function/BiFunction",
                "  #287 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                "  #291 = Utf8               java/util/function/BiConsumer",
                "  #292 = Utf8               accept",
                "  #293 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V",
                "  #296 = Utf8               clone",
                "  #298 = Utf8               java/lang/CloneNotSupportedException",
                "  #300 = Utf8               java/lang/InternalError",
                "  #303 = Utf8               (Ljava/lang/Throwable;)V",
                "  #306 = Utf8               reinitialize",
                "  #309 = Utf8               capacity",
                "  #313 = Utf8               java/io/ObjectOutputStream",
                "  #314 = Utf8               defaultWriteObject",
                "  #317 = Utf8               writeInt",
                "  #318 = Utf8               (I)V",
                "  #321 = Utf8               internalWriteEntries",
                "  #322 = Utf8               (Ljava/io/ObjectOutputStream;)V",
                "  #326 = Utf8               java/io/ObjectInputStream",
                "  #327 = Utf8               readFields",
                "  #328 = Utf8               ()Ljava/io/ObjectInputStream$GetField;",
                "  #333 = Utf8               java/io/ObjectInputStream$GetField",
                "  #334 = Utf8               get",
                "  #335 = Utf8               (Ljava/lang/String;F)F",
                "  #337 = Utf8               java/io/InvalidObjectException",
                "  #343 = Utf8               clamp",
                "  #344 = Utf8               (FFF)F",
                "  #348 = Utf8               java/util/HashMap$UnsafeHolder",
                "  #349 = Utf8               putLoadFactor",
                "  #350 = Utf8               (Ljava/util/HashMap;F)V",
                "  #353 = Utf8               readInt",
                "  #355 = Utf8               Illegal mappings count:",
                "  #361 = Utf8               jdk/internal/access/SharedSecrets",
                "  #362 = Utf8               getJavaObjectInputStreamAccess",
                "  #363 = Utf8               ()Ljdk/internal/access/JavaObjectInputStreamAccess;",
                "  #365 = Utf8               [Ljava/util/Map$Entry;",
                "  #369 = Utf8               jdk/internal/access/JavaObjectInputStreamAccess",
                "  #370 = Utf8               checkArray",
                "  #371 = Utf8               (Ljava/io/ObjectInputStream;Ljava/lang/Class;I)V",
                "  #374 = Utf8               readObject",
                "  #377 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V",
                "  #381 = Utf8               writeObject",
                "  #382 = Utf8               (Ljava/lang/Object;)V",
                "  #386 = Utf8               Negative number of mappings:",
                "  #389 = Utf8               calculateHashMapCapacity",
                "  #393 = Utf8               java/lang/Cloneable",
                "  #395 = Utf8               java/io/Serializable",
                "  #396 = Utf8               serialVersionUID",
                "  #397 = Utf8               J",
                "  #398 = Utf8               ConstantValue",
                "  #401 = Utf8               DEFAULT_INITIAL_CAPACITY",
                "  #403 = Utf8               MAXIMUM_CAPACITY",
                "  #404 = Utf8               DEFAULT_LOAD_FACTOR",
                "  #405 = Utf8               TREEIFY_THRESHOLD",
                "  #407 = Utf8               UNTREEIFY_THRESHOLD",
                "  #409 = Utf8               MIN_TREEIFY_CAPACITY",
                "  #411 = Utf8               Signature",
                "  #412 = Utf8               [Ljava/util/HashMap$Node<TK;TV;>;",
                "  #413 = Utf8               Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;",
                "  #414 = Utf8               Code",
                "  #415 = Utf8               LineNumberTable",
                "  #416 = Utf8               LocalVariableTable",
                "  #417 = Utf8               h",
                "  #418 = Utf8               StackMapTable",
                "  #419 = Utf8               comparableClassFor",
                "  #420 = Utf8               (Ljava/lang/Object;)Ljava/lang/Class;",
                "  #421 = Utf8               as",
                "  #422 = Utf8               [Ljava/lang/reflect/Type;",
                "  #423 = Utf8               p",
                "  #424 = Utf8               Ljava/lang/reflect/ParameterizedType;",
                "  #425 = Utf8               t",
                "  #426 = Utf8               Ljava/lang/reflect/Type;",
                "  #427 = Utf8               c",
                "  #428 = Utf8               Ljava/lang/Class;",
                "  #429 = Utf8               ts",
                "  #430 = Utf8               x",
                "  #431 = Utf8               LocalVariableTypeTable",
                "  #432 = Utf8               Ljava/lang/Class<*>;",
                "  #434 = Utf8               (Ljava/lang/Object;)Ljava/lang/Class<*>;",
                "  #435 = Utf8               compareComparables",
                "  #436 = Utf8               (Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)I",
                "  #437 = Utf8               kc",
                "  #438 = Utf8               k",
                "  #439 = Utf8               (Ljava/lang/Class<*>;Ljava/lang/Object;Ljava/lang/Object;)I",
                "  #440 = Utf8               cap",
                "  #441 = Utf8               n",
                "  #442 = Utf8               this",
                "  #443 = Utf8               Ljava/util/HashMap;",
                "  #444 = Utf8               initialCapacity",
                "  #445 = Utf8               Ljava/util/HashMap<TK;TV;>;",
                "  #446 = Utf8               (Ljava/util/Map;)V",
                "  #447 = Utf8               m",
                "  #448 = Utf8               Ljava/util/Map;",
                "  #449 = Utf8               Ljava/util/Map<+TK;+TV;>;",
                "  #450 = Utf8               (Ljava/util/Map<+TK;+TV;>;)V",
                "  #451 = Utf8               dt",
                "  #452 = Utf8               D",
                "  #453 = Utf8               e",
                "  #454 = Utf8               Ljava/util/Map$Entry;",
                "  #455 = Utf8               evict",
                "  #456 = Utf8               Z",
                "  #457 = Utf8               s",
                "  #458 = Utf8               TK;",
                "  #459 = Utf8               TV;",
                "  #460 = Utf8               Ljava/util/Map$Entry<+TK;+TV;>;",
                "  #461 = Utf8               (Ljava/util/Map<+TK;+TV;>;Z)V",
                "  #462 = Utf8               isEmpty",
                "  #463 = Utf8               Ljava/util/HashMap$Node<TK;TV;>;",
                "  #464 = Utf8               (Ljava/lang/Object;)TV;",
                "  #465 = Utf8               first",
                "  #466 = Utf8               tab",
                "  #468 = Utf8               (Ljava/lang/Object;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #469 = Utf8               containsKey",
                "  #470 = Utf8               put",
                "  #471 = Utf8               (TK;TV;)TV;",
                "  #472 = Utf8               binCount",
                "  #473 = Utf8               oldValue",
                "  #474 = Utf8               onlyIfAbsent",
                "  #475 = Utf8               i",
                "  #476 = Utf8               (ITK;TV;ZZ)TV;",
                "  #477 = Utf8               newCap",
                "  #478 = Utf8               ft",
                "  #479 = Utf8               loHead",
                "  #480 = Utf8               loTail",
                "  #481 = Utf8               hiHead",
                "  #482 = Utf8               hiTail",
                "  #483 = Utf8               j",
                "  #484 = Utf8               oldTab",
                "  #485 = Utf8               oldCap",
                "  #486 = Utf8               oldThr",
                "  #487 = Utf8               newThr",
                "  #488 = Utf8               newTab",
                "  #489 = Utf8               ()[Ljava/util/HashMap$Node<TK;TV;>;",
                "  #490 = Utf8               hd",
                "  #491 = Utf8               tl",
                "  #492 = Utf8               index",
                "  #493 = Utf8               Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #494 = Utf8               ([Ljava/util/HashMap$Node<TK;TV;>;I)V",
                "  #495 = Utf8               putAll",
                "  #496 = Utf8               remove",
                "  #497 = Utf8               v",
                "  #498 = Utf8               node",
                "  #499 = Utf8               matchValue",
                "  #500 = Utf8               movable",
                "  #501 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #502 = Utf8               clear",
                "  #503 = Utf8               containsValue",
                "  #504 = Utf8               ks",
                "  #505 = Utf8               Ljava/util/Set<TK;>;",
                "  #506 = Utf8               ()Ljava/util/Set<TK;>;",
                "  #507 = Utf8               prepareArray",
                "  #508 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;",
                "  #509 = Utf8               a",
                "  #510 = Utf8               [TT;",
                "  #511 = Utf8               <T:Ljava/lang/Object;>([TT;)[TT;",
                "  #512 = Utf8               keysToArray",
                "  #513 = Utf8               r",
                "  #514 = Utf8               idx",
                "  #515 = Utf8               valuesToArray",
                "  #516 = Utf8               ()Ljava/util/Collection;",
                "  #517 = Utf8               vs",
                "  #518 = Utf8               Ljava/util/Collection<TV;>;",
                "  #520 = Utf8               java/util/Collection",
                "  #521 = Utf8               ()Ljava/util/Collection<TV;>;",
                "  #522 = Utf8               es",
                "  #523 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;",
                "  #524 = Utf8               getOrDefault",
                "  #525 = Utf8               defaultValue",
                "  #526 = Utf8               (Ljava/lang/Object;TV;)TV;",
                "  #527 = Utf8               putIfAbsent",
                "  #528 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z",
                "  #529 = Utf8               replace",
                "  #530 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z",
                "  #531 = Utf8               newValue",
                "  #532 = Utf8               (TK;TV;TV;)Z",
                "  #533 = Utf8               computeIfAbsent",
                "  #534 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;",
                "  #535 = Utf8               mappingFunction",
                "  #536 = Utf8               Ljava/util/function/Function;",
                "  #537 = Utf8               old",
                "  #538 = Utf8               mc",
                "  #539 = Utf8               Ljava/util/function/Function<-TK;+TV;>;",
                "  #540 = Utf8               (TK;Ljava/util/function/Function<-TK;+TV;>;)TV;",
                "  #541 = Utf8               computeIfPresent",
                "  #542 = Utf8               (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;",
                "  #543 = Utf8               remappingFunction",
                "  #544 = Utf8               Ljava/util/function/BiFunction;",
                "  #545 = Utf8               Ljava/util/function/BiFunction<-TK;-TV;+TV;>;",
                "  #546 = Utf8               (TK;Ljava/util/function/BiFunction<-TK;-TV;+TV;>;)TV;",
                "  #547 = Utf8               compute",
                "  #548 = Utf8               merge",
                "  #549 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;",
                "  #550 = Utf8               Ljava/util/function/BiFunction<-TV;-TV;+TV;>;",
                "  #551 = Utf8               (TK;TV;Ljava/util/function/BiFunction<-TV;-TV;+TV;>;)TV;",
                "  #552 = Utf8               forEach",
                "  #553 = Utf8               (Ljava/util/function/BiConsumer;)V",
                "  #554 = Utf8               action",
                "  #555 = Utf8               Ljava/util/function/BiConsumer;",
                "  #556 = Utf8               Ljava/util/function/BiConsumer<-TK;-TV;>;",
                "  #557 = Utf8               (Ljava/util/function/BiConsumer<-TK;-TV;>;)V",
                "  #558 = Utf8               replaceAll",
                "  #559 = Utf8               (Ljava/util/function/BiFunction;)V",
                "  #560 = Utf8               function",
                "  #561 = Utf8               (Ljava/util/function/BiFunction<-TK;-TV;+TV;>;)V",
                "  #562 = Utf8               result",
                "  #563 = Utf8               Ljava/lang/CloneNotSupportedException;",
                "  #564 = Utf8               ()F",
                "  #565 = Utf8               Ljava/io/ObjectOutputStream;",
                "  #566 = Utf8               buckets",
                "  #567 = Utf8               Exceptions",
                "  #569 = Utf8               java/io/IOException",
                "  #570 = Utf8               (Ljava/io/ObjectInputStream;)V",
                "  #571 = Utf8               dc",
                "  #572 = Utf8               Ljava/io/ObjectInputStream;",
                "  #573 = Utf8               fields",
                "  #574 = Utf8               Ljava/io/ObjectInputStream$GetField;",
                "  #575 = Utf8               lf",
                "  #576 = Utf8               mappings",
                "  #578 = Utf8               java/lang/ClassNotFoundException",
                "  #579 = Utf8               (ITK;TV;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #580 = Utf8               replacementNode",
                "  #581 = Utf8               (Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #582 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #583 = Utf8               newTreeNode",
                "  #584 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #585 = Utf8               (ITK;TV;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #586 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #587 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;)V",
                "  #588 = Utf8               numMappings",
                "  #589 = Utf8               newHashMap",
                "  #590 = Utf8               (I)Ljava/util/HashMap;",
                "  #591 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>(I)Ljava/util/HashMap<TK;TV;>;",
                "  #592 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;Ljava/util/Map<TK;TV;>;Ljava/lang/Cloneable;Ljava/io/Serializable;",
                "  #593 = Utf8               SourceFile",
                "  #594 = Utf8               HashMap.java",
                "  #595 = Utf8               NestMembers",
                "  #597 = Utf8               java/util/HashMap$EntrySpliterator",
                "  #599 = Utf8               java/util/HashMap$ValueSpliterator",
                "  #601 = Utf8               java/util/HashMap$KeySpliterator",
                "  #603 = Utf8               java/util/HashMap$HashMapSpliterator",
                "  #605 = Utf8               java/util/HashMap$EntryIterator",
                "  #607 = Utf8               java/util/HashMap$ValueIterator",
                "  #609 = Utf8               java/util/HashMap$KeyIterator",
                "  #611 = Utf8               java/util/HashMap$HashIterator",
                "  #612 = Utf8               InnerClasses",
                "  #613 = Utf8               Node",
                "  #614 = Utf8               Entry",
                "  #615 = Utf8               TreeNode",
                "  #616 = Utf8               KeySet",
                "  #617 = Utf8               Values",
                "  #618 = Utf8               EntrySet",
                "  #619 = Utf8               GetField",
                "  #620 = Utf8               UnsafeHolder",
                "  #621 = Utf8               EntrySpliterator",
                "  #622 = Utf8               ValueSpliterator",
                "  #623 = Utf8               KeySpliterator",
                "  #624 = Utf8               HashMapSpliterator",
                "  #625 = Utf8               EntryIterator",
                "  #626 = Utf8               ValueIterator",
                "  #627 = Utf8               KeyIterator",
                "  #628 = Utf8               HashIterator"
        );
    }
}
