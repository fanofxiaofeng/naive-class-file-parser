package com.test.presenter.cp.caseAll;

import com.study.constants.ConstantKind;
import com.test.annotations.ExpectedConstantKind;
import com.test.annotations.GeneratedBy;
import com.test.presenter.cp.ConstantPoolPresenterTestBase;
import com.test.presenter.cp.ConstantPoolTestGenerator;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

@GeneratedBy(ConstantPoolTestGenerator.class)
public class HashMapCpTest extends ConstantPoolPresenterTestBase {

    @BeforeClass
    public static void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.util.HashMap"));
    }

    @ExpectedConstantKind(ConstantKind.CONSTANT_Class)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Fieldref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Methodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_InterfaceMethodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_String)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Integer)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Float)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Long)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Double)
    @ExpectedConstantKind(ConstantKind.CONSTANT_NameAndType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Utf8)
    @Test
    public void test() {
        expectedLines = List.of(
                "    #1 = Methodref          #2.#3         // java/lang/Object.hashCode:()I",
                "    #2 = Class              #4            // java/lang/Object",
                "    #3 = NameAndType        #5:#6         // hashCode:()I",
                "    #4 = Utf8               java/lang/Object",
                "    #5 = Utf8               hashCode",
                "    #6 = Utf8               ()I",
                "    #7 = Class              #8            // java/lang/Comparable",
                "    #8 = Utf8               java/lang/Comparable",
                "    #9 = Methodref          #2.#10        // java/lang/Object.getClass:()Ljava/lang/Class;",
                "   #10 = NameAndType        #11:#12       // getClass:()Ljava/lang/Class;",
                "   #11 = Utf8               getClass",
                "   #12 = Utf8               ()Ljava/lang/Class;",
                "   #13 = Class              #14           // java/lang/String",
                "   #14 = Utf8               java/lang/String",
                "   #15 = Methodref          #16.#17       // java/lang/Class.getGenericInterfaces:()[Ljava/lang/reflect/Type;",
                "   #16 = Class              #18           // java/lang/Class",
                "   #17 = NameAndType        #19:#20       // getGenericInterfaces:()[Ljava/lang/reflect/Type;",
                "   #18 = Utf8               java/lang/Class",
                "   #19 = Utf8               getGenericInterfaces",
                "   #20 = Utf8               ()[Ljava/lang/reflect/Type;",
                "   #21 = Class              #22           // java/lang/reflect/ParameterizedType",
                "   #22 = Utf8               java/lang/reflect/ParameterizedType",
                "   #23 = InterfaceMethodref #21.#24       // java/lang/reflect/ParameterizedType.getRawType:()Ljava/lang/reflect/Type;",
                "   #24 = NameAndType        #25:#26       // getRawType:()Ljava/lang/reflect/Type;",
                "   #25 = Utf8               getRawType",
                "   #26 = Utf8               ()Ljava/lang/reflect/Type;",
                "   #27 = InterfaceMethodref #21.#28       // java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;",
                "   #28 = NameAndType        #29:#20       // getActualTypeArguments:()[Ljava/lang/reflect/Type;",
                "   #29 = Utf8               getActualTypeArguments",
                "   #30 = InterfaceMethodref #7.#31        // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I",
                "   #31 = NameAndType        #32:#33       // compareTo:(Ljava/lang/Object;)I",
                "   #32 = Utf8               compareTo",
                "   #33 = Utf8               (Ljava/lang/Object;)I",
                "   #34 = Methodref          #35.#36       // java/lang/Integer.numberOfLeadingZeros:(I)I",
                "   #35 = Class              #37           // java/lang/Integer",
                "   #36 = NameAndType        #38:#39       // numberOfLeadingZeros:(I)I",
                "   #37 = Utf8               java/lang/Integer",
                "   #38 = Utf8               numberOfLeadingZeros",
                "   #39 = Utf8               (I)I",
                "   #40 = Class              #41           // java/util/HashMap",
                "   #41 = Utf8               java/util/HashMap",
                "   #42 = Integer            1073741824",
                "   #43 = Methodref          #44.#45       // java/util/AbstractMap.\"<init>\":()V",
                "   #44 = Class              #46           // java/util/AbstractMap",
                "   #45 = NameAndType        #47:#48       // \"<init>\":()V",
                "   #46 = Utf8               java/util/AbstractMap",
                "   #47 = Utf8               <init>",
                "   #48 = Utf8               ()V",
                "   #49 = Class              #50           // java/lang/IllegalArgumentException",
                "   #50 = Utf8               java/lang/IllegalArgumentException",
                "   #51 = Class              #52           // java/lang/StringBuilder",
                "   #52 = Utf8               java/lang/StringBuilder",
                "   #53 = Methodref          #51.#45       // java/lang/StringBuilder.\"<init>\":()V",
                "   #54 = String             #55           // Illegal initial capacity:",
                "   #55 = Utf8               Illegal initial capacity:",
                "   #56 = Methodref          #51.#57       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #57 = NameAndType        #58:#59       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #58 = Utf8               append",
                "   #59 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #60 = Methodref          #51.#61       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;",
                "   #61 = NameAndType        #58:#62       // append:(I)Ljava/lang/StringBuilder;",
                "   #62 = Utf8               (I)Ljava/lang/StringBuilder;",
                "   #63 = Methodref          #51.#64       // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "   #64 = NameAndType        #65:#66       // toString:()Ljava/lang/String;",
                "   #65 = Utf8               toString",
                "   #66 = Utf8               ()Ljava/lang/String;",
                "   #67 = Methodref          #49.#68       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "   #68 = NameAndType        #47:#69       // \"<init>\":(Ljava/lang/String;)V",
                "   #69 = Utf8               (Ljava/lang/String;)V",
                "   #70 = Methodref          #71.#72       // java/lang/Float.isNaN:(F)Z",
                "   #71 = Class              #73           // java/lang/Float",
                "   #72 = NameAndType        #74:#75       // isNaN:(F)Z",
                "   #73 = Utf8               java/lang/Float",
                "   #74 = Utf8               isNaN",
                "   #75 = Utf8               (F)Z",
                "   #76 = String             #77           // Illegal load factor:",
                "   #77 = Utf8               Illegal load factor:",
                "   #78 = Methodref          #51.#79       // java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;",
                "   #79 = NameAndType        #58:#80       // append:(F)Ljava/lang/StringBuilder;",
                "   #80 = Utf8               (F)Ljava/lang/StringBuilder;",
                "   #81 = Fieldref           #40.#82       // java/util/HashMap.loadFactor:F",
                "   #82 = NameAndType        #83:#84       // loadFactor:F",
                "   #83 = Utf8               loadFactor",
                "   #84 = Utf8               F",
                "   #85 = Methodref          #40.#86       // java/util/HashMap.tableSizeFor:(I)I",
                "   #86 = NameAndType        #87:#39       // tableSizeFor:(I)I",
                "   #87 = Utf8               tableSizeFor",
                "   #88 = Fieldref           #40.#89       // java/util/HashMap.threshold:I",
                "   #89 = NameAndType        #90:#91       // threshold:I",
                "   #90 = Utf8               threshold",
                "   #91 = Utf8               I",
                "   #92 = Float              0.75f",
                "   #93 = Methodref          #40.#94       // java/util/HashMap.\"<init>\":(IF)V",
                "   #94 = NameAndType        #47:#95       // \"<init>\":(IF)V",
                "   #95 = Utf8               (IF)V",
                "   #96 = Methodref          #40.#97       // java/util/HashMap.putMapEntries:(Ljava/util/Map;Z)V",
                "   #97 = NameAndType        #98:#99       // putMapEntries:(Ljava/util/Map;Z)V",
                "   #98 = Utf8               putMapEntries",
                "   #99 = Utf8               (Ljava/util/Map;Z)V",
                "  #100 = InterfaceMethodref #101.#102     // java/util/Map.size:()I",
                "  #101 = Class              #103          // java/util/Map",
                "  #102 = NameAndType        #104:#6       // size:()I",
                "  #103 = Utf8               java/util/Map",
                "  #104 = Utf8               size",
                "  #105 = Fieldref           #40.#106      // java/util/HashMap.table:[Ljava/util/HashMap$Node;",
                "  #106 = NameAndType        #107:#108     // table:[Ljava/util/HashMap$Node;",
                "  #107 = Utf8               table",
                "  #108 = Utf8               [Ljava/util/HashMap$Node;",
                "  #109 = Methodref          #110.#111     // java/lang/Math.ceil:(D)D",
                "  #110 = Class              #112          // java/lang/Math",
                "  #111 = NameAndType        #113:#114     // ceil:(D)D",
                "  #112 = Utf8               java/lang/Math",
                "  #113 = Utf8               ceil",
                "  #114 = Utf8               (D)D",
                "  #115 = Double             1.073741824E9d",
                "  #117 = Methodref          #40.#118      // java/util/HashMap.resize:()[Ljava/util/HashMap$Node;",
                "  #118 = NameAndType        #119:#120     // resize:()[Ljava/util/HashMap$Node;",
                "  #119 = Utf8               resize",
                "  #120 = Utf8               ()[Ljava/util/HashMap$Node;",
                "  #121 = InterfaceMethodref #101.#122     // java/util/Map.entrySet:()Ljava/util/Set;",
                "  #122 = NameAndType        #123:#124     // entrySet:()Ljava/util/Set;",
                "  #123 = Utf8               entrySet",
                "  #124 = Utf8               ()Ljava/util/Set;",
                "  #125 = InterfaceMethodref #126.#127     // java/util/Set.iterator:()Ljava/util/Iterator;",
                "  #126 = Class              #128          // java/util/Set",
                "  #127 = NameAndType        #129:#130     // iterator:()Ljava/util/Iterator;",
                "  #128 = Utf8               java/util/Set",
                "  #129 = Utf8               iterator",
                "  #130 = Utf8               ()Ljava/util/Iterator;",
                "  #131 = InterfaceMethodref #132.#133     // java/util/Iterator.hasNext:()Z",
                "  #132 = Class              #134          // java/util/Iterator",
                "  #133 = NameAndType        #135:#136     // hasNext:()Z",
                "  #134 = Utf8               java/util/Iterator",
                "  #135 = Utf8               hasNext",
                "  #136 = Utf8               ()Z",
                "  #137 = InterfaceMethodref #132.#138     // java/util/Iterator.next:()Ljava/lang/Object;",
                "  #138 = NameAndType        #139:#140     // next:()Ljava/lang/Object;",
                "  #139 = Utf8               next",
                "  #140 = Utf8               ()Ljava/lang/Object;",
                "  #141 = Class              #142          // java/util/Map$Entry",
                "  #142 = Utf8               java/util/Map$Entry",
                "  #143 = InterfaceMethodref #141.#144     // java/util/Map$Entry.getKey:()Ljava/lang/Object;",
                "  #144 = NameAndType        #145:#140     // getKey:()Ljava/lang/Object;",
                "  #145 = Utf8               getKey",
                "  #146 = InterfaceMethodref #141.#147     // java/util/Map$Entry.getValue:()Ljava/lang/Object;",
                "  #147 = NameAndType        #148:#140     // getValue:()Ljava/lang/Object;",
                "  #148 = Utf8               getValue",
                "  #149 = Methodref          #40.#150      // java/util/HashMap.hash:(Ljava/lang/Object;)I",
                "  #150 = NameAndType        #151:#33      // hash:(Ljava/lang/Object;)I",
                "  #151 = Utf8               hash",
                "  #152 = Methodref          #40.#153      // java/util/HashMap.putVal:(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;",
                "  #153 = NameAndType        #154:#155     // putVal:(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;",
                "  #154 = Utf8               putVal",
                "  #155 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;",
                "  #156 = Fieldref           #40.#157      // java/util/HashMap.size:I",
                "  #157 = NameAndType        #104:#91      // size:I",
                "  #158 = Methodref          #40.#159      // java/util/HashMap.getNode:(Ljava/lang/Object;)Ljava/util/HashMap$Node;",
                "  #159 = NameAndType        #160:#161     // getNode:(Ljava/lang/Object;)Ljava/util/HashMap$Node;",
                "  #160 = Utf8               getNode",
                "  #161 = Utf8               (Ljava/lang/Object;)Ljava/util/HashMap$Node;",
                "  #162 = Fieldref           #163.#164     // java/util/HashMap$Node.value:Ljava/lang/Object;",
                "  #163 = Class              #165          // java/util/HashMap$Node",
                "  #164 = NameAndType        #166:#167     // value:Ljava/lang/Object;",
                "  #165 = Utf8               java/util/HashMap$Node",
                "  #166 = Utf8               value",
                "  #167 = Utf8               Ljava/lang/Object;",
                "  #168 = Fieldref           #163.#169     // java/util/HashMap$Node.hash:I",
                "  #169 = NameAndType        #151:#91      // hash:I",
                "  #170 = Fieldref           #163.#171     // java/util/HashMap$Node.key:Ljava/lang/Object;",
                "  #171 = NameAndType        #172:#167     // key:Ljava/lang/Object;",
                "  #172 = Utf8               key",
                "  #173 = Methodref          #2.#174       // java/lang/Object.equals:(Ljava/lang/Object;)Z",
                "  #174 = NameAndType        #175:#176     // equals:(Ljava/lang/Object;)Z",
                "  #175 = Utf8               equals",
                "  #176 = Utf8               (Ljava/lang/Object;)Z",
                "  #177 = Fieldref           #163.#178     // java/util/HashMap$Node.next:Ljava/util/HashMap$Node;",
                "  #178 = NameAndType        #139:#179     // next:Ljava/util/HashMap$Node;",
                "  #179 = Utf8               Ljava/util/HashMap$Node;",
                "  #180 = Class              #181          // java/util/HashMap$TreeNode",
                "  #181 = Utf8               java/util/HashMap$TreeNode",
                "  #182 = Methodref          #180.#183     // java/util/HashMap$TreeNode.getTreeNode:(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #183 = NameAndType        #184:#185     // getTreeNode:(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #184 = Utf8               getTreeNode",
                "  #185 = Utf8               (ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #186 = Methodref          #40.#187      // java/util/HashMap.newNode:(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #187 = NameAndType        #188:#189     // newNode:(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #188 = Utf8               newNode",
                "  #189 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #190 = Methodref          #180.#191     // java/util/HashMap$TreeNode.putTreeVal:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #191 = NameAndType        #192:#193     // putTreeVal:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #192 = Utf8               putTreeVal",
                "  #193 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;",
                "  #194 = Methodref          #40.#195      // java/util/HashMap.treeifyBin:([Ljava/util/HashMap$Node;I)V",
                "  #195 = NameAndType        #196:#197     // treeifyBin:([Ljava/util/HashMap$Node;I)V",
                "  #196 = Utf8               treeifyBin",
                "  #197 = Utf8               ([Ljava/util/HashMap$Node;I)V",
                "  #198 = Methodref          #40.#199      // java/util/HashMap.afterNodeAccess:(Ljava/util/HashMap$Node;)V",
                "  #199 = NameAndType        #200:#201     // afterNodeAccess:(Ljava/util/HashMap$Node;)V",
                "  #200 = Utf8               afterNodeAccess",
                "  #201 = Utf8               (Ljava/util/HashMap$Node;)V",
                "  #202 = Fieldref           #40.#203      // java/util/HashMap.modCount:I",
                "  #203 = NameAndType        #204:#91      // modCount:I",
                "  #204 = Utf8               modCount",
                "  #205 = Methodref          #40.#206      // java/util/HashMap.afterNodeInsertion:(Z)V",
                "  #206 = NameAndType        #207:#208     // afterNodeInsertion:(Z)V",
                "  #207 = Utf8               afterNodeInsertion",
                "  #208 = Utf8               (Z)V",
                "  #209 = Integer            2147483647",
                "  #210 = Float              1.0737418E9f",
                "  #211 = Methodref          #180.#212     // java/util/HashMap$TreeNode.split:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;II)V",
                "  #212 = NameAndType        #213:#214     // split:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;II)V",
                "  #213 = Utf8               split",
                "  #214 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;II)V",
                "  #215 = Methodref          #40.#216      // java/util/HashMap.replacementTreeNode:(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #216 = NameAndType        #217:#218     // replacementTreeNode:(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #217 = Utf8               replacementTreeNode",
                "  #218 = Utf8               (Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #219 = Fieldref           #180.#220     // java/util/HashMap$TreeNode.prev:Ljava/util/HashMap$TreeNode;",
                "  #220 = NameAndType        #221:#222     // prev:Ljava/util/HashMap$TreeNode;",
                "  #221 = Utf8               prev",
                "  #222 = Utf8               Ljava/util/HashMap$TreeNode;",
                "  #223 = Fieldref           #180.#178     // java/util/HashMap$TreeNode.next:Ljava/util/HashMap$Node;",
                "  #224 = Methodref          #180.#225     // java/util/HashMap$TreeNode.treeify:([Ljava/util/HashMap$Node;)V",
                "  #225 = NameAndType        #226:#227     // treeify:([Ljava/util/HashMap$Node;)V",
                "  #226 = Utf8               treeify",
                "  #227 = Utf8               ([Ljava/util/HashMap$Node;)V",
                "  #228 = Methodref          #40.#229      // java/util/HashMap.removeNode:(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;",
                "  #229 = NameAndType        #230:#231     // removeNode:(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;",
                "  #230 = Utf8               removeNode",
                "  #231 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;",
                "  #232 = Methodref          #180.#233     // java/util/HashMap$TreeNode.removeTreeNode:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;Z)V",
                "  #233 = NameAndType        #234:#235     // removeTreeNode:(Ljava/util/HashMap;[Ljava/util/HashMap$Node;Z)V",
                "  #234 = Utf8               removeTreeNode",
                "  #235 = Utf8               (Ljava/util/HashMap;[Ljava/util/HashMap$Node;Z)V",
                "  #236 = Methodref          #40.#237      // java/util/HashMap.afterNodeRemoval:(Ljava/util/HashMap$Node;)V",
                "  #237 = NameAndType        #238:#201     // afterNodeRemoval:(Ljava/util/HashMap$Node;)V",
                "  #238 = Utf8               afterNodeRemoval",
                "  #239 = Fieldref           #40.#240      // java/util/HashMap.keySet:Ljava/util/Set;",
                "  #240 = NameAndType        #241:#242     // keySet:Ljava/util/Set;",
                "  #241 = Utf8               keySet",
                "  #242 = Utf8               Ljava/util/Set;",
                "  #243 = Class              #244          // java/util/HashMap$KeySet",
                "  #244 = Utf8               java/util/HashMap$KeySet",
                "  #245 = Methodref          #243.#246     // java/util/HashMap$KeySet.\"<init>\":(Ljava/util/HashMap;)V",
                "  #246 = NameAndType        #47:#247      // \"<init>\":(Ljava/util/HashMap;)V",
                "  #247 = Utf8               (Ljava/util/HashMap;)V",
                "  #248 = Methodref          #16.#249      // java/lang/Class.getComponentType:()Ljava/lang/Class;",
                "  #249 = NameAndType        #250:#12      // getComponentType:()Ljava/lang/Class;",
                "  #250 = Utf8               getComponentType",
                "  #251 = Methodref          #252.#253     // java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #252 = Class              #254          // java/lang/reflect/Array",
                "  #253 = NameAndType        #255:#256     // newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #254 = Utf8               java/lang/reflect/Array",
                "  #255 = Utf8               newInstance",
                "  #256 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #257 = Class              #258          // \"[Ljava/lang/Object;\"",
                "  #258 = Utf8               [Ljava/lang/Object;",
                "  #259 = Fieldref           #40.#260      // java/util/HashMap.values:Ljava/util/Collection;",
                "  #260 = NameAndType        #261:#262     // values:Ljava/util/Collection;",
                "  #261 = Utf8               values",
                "  #262 = Utf8               Ljava/util/Collection;",
                "  #263 = Class              #264          // java/util/HashMap$Values",
                "  #264 = Utf8               java/util/HashMap$Values",
                "  #265 = Methodref          #263.#246     // java/util/HashMap$Values.\"<init>\":(Ljava/util/HashMap;)V",
                "  #266 = Fieldref           #40.#267      // java/util/HashMap.entrySet:Ljava/util/Set;",
                "  #267 = NameAndType        #123:#242     // entrySet:Ljava/util/Set;",
                "  #268 = Class              #269          // java/util/HashMap$EntrySet",
                "  #269 = Utf8               java/util/HashMap$EntrySet",
                "  #270 = Methodref          #268.#246     // java/util/HashMap$EntrySet.\"<init>\":(Ljava/util/HashMap;)V",
                "  #271 = Class              #272          // java/lang/NullPointerException",
                "  #272 = Utf8               java/lang/NullPointerException",
                "  #273 = Methodref          #271.#45      // java/lang/NullPointerException.\"<init>\":()V",
                "  #274 = InterfaceMethodref #275.#276     // java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;",
                "  #275 = Class              #277          // java/util/function/Function",
                "  #276 = NameAndType        #278:#279     // apply:(Ljava/lang/Object;)Ljava/lang/Object;",
                "  #277 = Utf8               java/util/function/Function",
                "  #278 = Utf8               apply",
                "  #279 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "  #280 = Class              #281          // java/util/ConcurrentModificationException",
                "  #281 = Utf8               java/util/ConcurrentModificationException",
                "  #282 = Methodref          #280.#45      // java/util/ConcurrentModificationException.\"<init>\":()V",
                "  #283 = InterfaceMethodref #284.#285     // java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                "  #284 = Class              #286          // java/util/function/BiFunction",
                "  #285 = NameAndType        #278:#287     // apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                "  #286 = Utf8               java/util/function/BiFunction",
                "  #287 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
                "  #288 = InterfaceMethodref #289.#290     // java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V",
                "  #289 = Class              #291          // java/util/function/BiConsumer",
                "  #290 = NameAndType        #292:#293     // accept:(Ljava/lang/Object;Ljava/lang/Object;)V",
                "  #291 = Utf8               java/util/function/BiConsumer",
                "  #292 = Utf8               accept",
                "  #293 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V",
                "  #294 = Methodref          #44.#295      // java/util/AbstractMap.clone:()Ljava/lang/Object;",
                "  #295 = NameAndType        #296:#140     // clone:()Ljava/lang/Object;",
                "  #296 = Utf8               clone",
                "  #297 = Class              #298          // java/lang/CloneNotSupportedException",
                "  #298 = Utf8               java/lang/CloneNotSupportedException",
                "  #299 = Class              #300          // java/lang/InternalError",
                "  #300 = Utf8               java/lang/InternalError",
                "  #301 = Methodref          #299.#302     // java/lang/InternalError.\"<init>\":(Ljava/lang/Throwable;)V",
                "  #302 = NameAndType        #47:#303      // \"<init>\":(Ljava/lang/Throwable;)V",
                "  #303 = Utf8               (Ljava/lang/Throwable;)V",
                "  #304 = Methodref          #40.#305      // java/util/HashMap.reinitialize:()V",
                "  #305 = NameAndType        #306:#48      // reinitialize:()V",
                "  #306 = Utf8               reinitialize",
                "  #307 = Methodref          #40.#308      // java/util/HashMap.capacity:()I",
                "  #308 = NameAndType        #309:#6       // capacity:()I",
                "  #309 = Utf8               capacity",
                "  #310 = Methodref          #311.#312     // java/io/ObjectOutputStream.defaultWriteObject:()V",
                "  #311 = Class              #313          // java/io/ObjectOutputStream",
                "  #312 = NameAndType        #314:#48      // defaultWriteObject:()V",
                "  #313 = Utf8               java/io/ObjectOutputStream",
                "  #314 = Utf8               defaultWriteObject",
                "  #315 = Methodref          #311.#316     // java/io/ObjectOutputStream.writeInt:(I)V",
                "  #316 = NameAndType        #317:#318     // writeInt:(I)V",
                "  #317 = Utf8               writeInt",
                "  #318 = Utf8               (I)V",
                "  #319 = Methodref          #40.#320      // java/util/HashMap.internalWriteEntries:(Ljava/io/ObjectOutputStream;)V",
                "  #320 = NameAndType        #321:#322     // internalWriteEntries:(Ljava/io/ObjectOutputStream;)V",
                "  #321 = Utf8               internalWriteEntries",
                "  #322 = Utf8               (Ljava/io/ObjectOutputStream;)V",
                "  #323 = Methodref          #324.#325     // java/io/ObjectInputStream.readFields:()Ljava/io/ObjectInputStream$GetField;",
                "  #324 = Class              #326          // java/io/ObjectInputStream",
                "  #325 = NameAndType        #327:#328     // readFields:()Ljava/io/ObjectInputStream$GetField;",
                "  #326 = Utf8               java/io/ObjectInputStream",
                "  #327 = Utf8               readFields",
                "  #328 = Utf8               ()Ljava/io/ObjectInputStream$GetField;",
                "  #329 = String             #83           // loadFactor",
                "  #330 = Methodref          #331.#332     // java/io/ObjectInputStream$GetField.get:(Ljava/lang/String;F)F",
                "  #331 = Class              #333          // java/io/ObjectInputStream$GetField",
                "  #332 = NameAndType        #334:#335     // get:(Ljava/lang/String;F)F",
                "  #333 = Utf8               java/io/ObjectInputStream$GetField",
                "  #334 = Utf8               get",
                "  #335 = Utf8               (Ljava/lang/String;F)F",
                "  #336 = Class              #337          // java/io/InvalidObjectException",
                "  #337 = Utf8               java/io/InvalidObjectException",
                "  #338 = Methodref          #336.#68      // java/io/InvalidObjectException.\"<init>\":(Ljava/lang/String;)V",
                "  #339 = Float              0.25f",
                "  #340 = Float              4.0f",
                "  #341 = Methodref          #110.#342     // java/lang/Math.clamp:(FFF)F",
                "  #342 = NameAndType        #343:#344     // clamp:(FFF)F",
                "  #343 = Utf8               clamp",
                "  #344 = Utf8               (FFF)F",
                "  #345 = Methodref          #346.#347     // java/util/HashMap$UnsafeHolder.putLoadFactor:(Ljava/util/HashMap;F)V",
                "  #346 = Class              #348          // java/util/HashMap$UnsafeHolder",
                "  #347 = NameAndType        #349:#350     // putLoadFactor:(Ljava/util/HashMap;F)V",
                "  #348 = Utf8               java/util/HashMap$UnsafeHolder",
                "  #349 = Utf8               putLoadFactor",
                "  #350 = Utf8               (Ljava/util/HashMap;F)V",
                "  #351 = Methodref          #324.#352     // java/io/ObjectInputStream.readInt:()I",
                "  #352 = NameAndType        #353:#6       // readInt:()I",
                "  #353 = Utf8               readInt",
                "  #354 = String             #355          // Illegal mappings count:",
                "  #355 = Utf8               Illegal mappings count:",
                "  #356 = Double             16.0d",
                "  #358 = Methodref          #359.#360     // jdk/internal/access/SharedSecrets.getJavaObjectInputStreamAccess:()Ljdk/internal/access/JavaObjectInputStreamAccess;",
                "  #359 = Class              #361          // jdk/internal/access/SharedSecrets",
                "  #360 = NameAndType        #362:#363     // getJavaObjectInputStreamAccess:()Ljdk/internal/access/JavaObjectInputStreamAccess;",
                "  #361 = Utf8               jdk/internal/access/SharedSecrets",
                "  #362 = Utf8               getJavaObjectInputStreamAccess",
                "  #363 = Utf8               ()Ljdk/internal/access/JavaObjectInputStreamAccess;",
                "  #364 = Class              #365          // \"[Ljava/util/Map$Entry;\"",
                "  #365 = Utf8               [Ljava/util/Map$Entry;",
                "  #366 = InterfaceMethodref #367.#368     // jdk/internal/access/JavaObjectInputStreamAccess.checkArray:(Ljava/io/ObjectInputStream;Ljava/lang/Class;I)V",
                "  #367 = Class              #369          // jdk/internal/access/JavaObjectInputStreamAccess",
                "  #368 = NameAndType        #370:#371     // checkArray:(Ljava/io/ObjectInputStream;Ljava/lang/Class;I)V",
                "  #369 = Utf8               jdk/internal/access/JavaObjectInputStreamAccess",
                "  #370 = Utf8               checkArray",
                "  #371 = Utf8               (Ljava/io/ObjectInputStream;Ljava/lang/Class;I)V",
                "  #372 = Methodref          #324.#373     // java/io/ObjectInputStream.readObject:()Ljava/lang/Object;",
                "  #373 = NameAndType        #374:#140     // readObject:()Ljava/lang/Object;",
                "  #374 = Utf8               readObject",
                "  #375 = Methodref          #163.#376     // java/util/HashMap$Node.\"<init>\":(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V",
                "  #376 = NameAndType        #47:#377      // \"<init>\":(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V",
                "  #377 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V",
                "  #378 = Methodref          #180.#376     // java/util/HashMap$TreeNode.\"<init>\":(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V",
                "  #379 = Methodref          #311.#380     // java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V",
                "  #380 = NameAndType        #381:#382     // writeObject:(Ljava/lang/Object;)V",
                "  #381 = Utf8               writeObject",
                "  #382 = Utf8               (Ljava/lang/Object;)V",
                "  #383 = Double             0.75d",
                "  #385 = String             #386          // Negative number of mappings:",
                "  #386 = Utf8               Negative number of mappings:",
                "  #387 = Methodref          #40.#388      // java/util/HashMap.calculateHashMapCapacity:(I)I",
                "  #388 = NameAndType        #389:#39      // calculateHashMapCapacity:(I)I",
                "  #389 = Utf8               calculateHashMapCapacity",
                "  #390 = Methodref          #40.#391      // java/util/HashMap.\"<init>\":(I)V",
                "  #391 = NameAndType        #47:#318      // \"<init>\":(I)V",
                "  #392 = Class              #393          // java/lang/Cloneable",
                "  #393 = Utf8               java/lang/Cloneable",
                "  #394 = Class              #395          // java/io/Serializable",
                "  #395 = Utf8               java/io/Serializable",
                "  #396 = Utf8               serialVersionUID",
                "  #397 = Utf8               J",
                "  #398 = Utf8               ConstantValue",
                "  #399 = Long               362498820763181265l",
                "  #401 = Utf8               DEFAULT_INITIAL_CAPACITY",
                "  #402 = Integer            16",
                "  #403 = Utf8               MAXIMUM_CAPACITY",
                "  #404 = Utf8               DEFAULT_LOAD_FACTOR",
                "  #405 = Utf8               TREEIFY_THRESHOLD",
                "  #406 = Integer            8",
                "  #407 = Utf8               UNTREEIFY_THRESHOLD",
                "  #408 = Integer            6",
                "  #409 = Utf8               MIN_TREEIFY_CAPACITY",
                "  #410 = Integer            64",
                "  #411 = Utf8               Signature",
                "  #412 = Utf8               [Ljava/util/HashMap$Node<TK;TV;>;",
                "  #413 = Utf8               Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;",
                "  #414 = Utf8               Code",
                "  #415 = Utf8               LineNumberTable",
                "  #416 = Utf8               LocalVariableTable",
                "  #417 = Utf8               h",
                "  #418 = Utf8               StackMapTable",
                "  #419 = Utf8               comparableClassFor",
                "  #420 = Utf8               (Ljava/lang/Object;)Ljava/lang/Class;",
                "  #421 = Utf8               as",
                "  #422 = Utf8               [Ljava/lang/reflect/Type;",
                "  #423 = Utf8               p",
                "  #424 = Utf8               Ljava/lang/reflect/ParameterizedType;",
                "  #425 = Utf8               t",
                "  #426 = Utf8               Ljava/lang/reflect/Type;",
                "  #427 = Utf8               c",
                "  #428 = Utf8               Ljava/lang/Class;",
                "  #429 = Utf8               ts",
                "  #430 = Utf8               x",
                "  #431 = Utf8               LocalVariableTypeTable",
                "  #432 = Utf8               Ljava/lang/Class<*>;",
                "  #433 = Class              #422          // \"[Ljava/lang/reflect/Type;\"",
                "  #434 = Utf8               (Ljava/lang/Object;)Ljava/lang/Class<*>;",
                "  #435 = Utf8               compareComparables",
                "  #436 = Utf8               (Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)I",
                "  #437 = Utf8               kc",
                "  #438 = Utf8               k",
                "  #439 = Utf8               (Ljava/lang/Class<*>;Ljava/lang/Object;Ljava/lang/Object;)I",
                "  #440 = Utf8               cap",
                "  #441 = Utf8               n",
                "  #442 = Utf8               this",
                "  #443 = Utf8               Ljava/util/HashMap;",
                "  #444 = Utf8               initialCapacity",
                "  #445 = Utf8               Ljava/util/HashMap<TK;TV;>;",
                "  #446 = Utf8               (Ljava/util/Map;)V",
                "  #447 = Utf8               m",
                "  #448 = Utf8               Ljava/util/Map;",
                "  #449 = Utf8               Ljava/util/Map<+TK;+TV;>;",
                "  #450 = Utf8               (Ljava/util/Map<+TK;+TV;>;)V",
                "  #451 = Utf8               dt",
                "  #452 = Utf8               D",
                "  #453 = Utf8               e",
                "  #454 = Utf8               Ljava/util/Map$Entry;",
                "  #455 = Utf8               evict",
                "  #456 = Utf8               Z",
                "  #457 = Utf8               s",
                "  #458 = Utf8               TK;",
                "  #459 = Utf8               TV;",
                "  #460 = Utf8               Ljava/util/Map$Entry<+TK;+TV;>;",
                "  #461 = Utf8               (Ljava/util/Map<+TK;+TV;>;Z)V",
                "  #462 = Utf8               isEmpty",
                "  #463 = Utf8               Ljava/util/HashMap$Node<TK;TV;>;",
                "  #464 = Utf8               (Ljava/lang/Object;)TV;",
                "  #465 = Utf8               first",
                "  #466 = Utf8               tab",
                "  #467 = Class              #108          // \"[Ljava/util/HashMap$Node;\"",
                "  #468 = Utf8               (Ljava/lang/Object;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #469 = Utf8               containsKey",
                "  #470 = Utf8               put",
                "  #471 = Utf8               (TK;TV;)TV;",
                "  #472 = Utf8               binCount",
                "  #473 = Utf8               oldValue",
                "  #474 = Utf8               onlyIfAbsent",
                "  #475 = Utf8               i",
                "  #476 = Utf8               (ITK;TV;ZZ)TV;",
                "  #477 = Utf8               newCap",
                "  #478 = Utf8               ft",
                "  #479 = Utf8               loHead",
                "  #480 = Utf8               loTail",
                "  #481 = Utf8               hiHead",
                "  #482 = Utf8               hiTail",
                "  #483 = Utf8               j",
                "  #484 = Utf8               oldTab",
                "  #485 = Utf8               oldCap",
                "  #486 = Utf8               oldThr",
                "  #487 = Utf8               newThr",
                "  #488 = Utf8               newTab",
                "  #489 = Utf8               ()[Ljava/util/HashMap$Node<TK;TV;>;",
                "  #490 = Utf8               hd",
                "  #491 = Utf8               tl",
                "  #492 = Utf8               index",
                "  #493 = Utf8               Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #494 = Utf8               ([Ljava/util/HashMap$Node<TK;TV;>;I)V",
                "  #495 = Utf8               putAll",
                "  #496 = Utf8               remove",
                "  #497 = Utf8               v",
                "  #498 = Utf8               node",
                "  #499 = Utf8               matchValue",
                "  #500 = Utf8               movable",
                "  #501 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #502 = Utf8               clear",
                "  #503 = Utf8               containsValue",
                "  #504 = Utf8               ks",
                "  #505 = Utf8               Ljava/util/Set<TK;>;",
                "  #506 = Utf8               ()Ljava/util/Set<TK;>;",
                "  #507 = Utf8               prepareArray",
                "  #508 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;",
                "  #509 = Utf8               a",
                "  #510 = Utf8               [TT;",
                "  #511 = Utf8               <T:Ljava/lang/Object;>([TT;)[TT;",
                "  #512 = Utf8               keysToArray",
                "  #513 = Utf8               r",
                "  #514 = Utf8               idx",
                "  #515 = Utf8               valuesToArray",
                "  #516 = Utf8               ()Ljava/util/Collection;",
                "  #517 = Utf8               vs",
                "  #518 = Utf8               Ljava/util/Collection<TV;>;",
                "  #519 = Class              #520          // java/util/Collection",
                "  #520 = Utf8               java/util/Collection",
                "  #521 = Utf8               ()Ljava/util/Collection<TV;>;",
                "  #522 = Utf8               es",
                "  #523 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;",
                "  #524 = Utf8               getOrDefault",
                "  #525 = Utf8               defaultValue",
                "  #526 = Utf8               (Ljava/lang/Object;TV;)TV;",
                "  #527 = Utf8               putIfAbsent",
                "  #528 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z",
                "  #529 = Utf8               replace",
                "  #530 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z",
                "  #531 = Utf8               newValue",
                "  #532 = Utf8               (TK;TV;TV;)Z",
                "  #533 = Utf8               computeIfAbsent",
                "  #534 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;",
                "  #535 = Utf8               mappingFunction",
                "  #536 = Utf8               Ljava/util/function/Function;",
                "  #537 = Utf8               old",
                "  #538 = Utf8               mc",
                "  #539 = Utf8               Ljava/util/function/Function<-TK;+TV;>;",
                "  #540 = Utf8               (TK;Ljava/util/function/Function<-TK;+TV;>;)TV;",
                "  #541 = Utf8               computeIfPresent",
                "  #542 = Utf8               (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;",
                "  #543 = Utf8               remappingFunction",
                "  #544 = Utf8               Ljava/util/function/BiFunction;",
                "  #545 = Utf8               Ljava/util/function/BiFunction<-TK;-TV;+TV;>;",
                "  #546 = Utf8               (TK;Ljava/util/function/BiFunction<-TK;-TV;+TV;>;)TV;",
                "  #547 = Utf8               compute",
                "  #548 = Utf8               merge",
                "  #549 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;",
                "  #550 = Utf8               Ljava/util/function/BiFunction<-TV;-TV;+TV;>;",
                "  #551 = Utf8               (TK;TV;Ljava/util/function/BiFunction<-TV;-TV;+TV;>;)TV;",
                "  #552 = Utf8               forEach",
                "  #553 = Utf8               (Ljava/util/function/BiConsumer;)V",
                "  #554 = Utf8               action",
                "  #555 = Utf8               Ljava/util/function/BiConsumer;",
                "  #556 = Utf8               Ljava/util/function/BiConsumer<-TK;-TV;>;",
                "  #557 = Utf8               (Ljava/util/function/BiConsumer<-TK;-TV;>;)V",
                "  #558 = Utf8               replaceAll",
                "  #559 = Utf8               (Ljava/util/function/BiFunction;)V",
                "  #560 = Utf8               function",
                "  #561 = Utf8               (Ljava/util/function/BiFunction<-TK;-TV;+TV;>;)V",
                "  #562 = Utf8               result",
                "  #563 = Utf8               Ljava/lang/CloneNotSupportedException;",
                "  #564 = Utf8               ()F",
                "  #565 = Utf8               Ljava/io/ObjectOutputStream;",
                "  #566 = Utf8               buckets",
                "  #567 = Utf8               Exceptions",
                "  #568 = Class              #569          // java/io/IOException",
                "  #569 = Utf8               java/io/IOException",
                "  #570 = Utf8               (Ljava/io/ObjectInputStream;)V",
                "  #571 = Utf8               dc",
                "  #572 = Utf8               Ljava/io/ObjectInputStream;",
                "  #573 = Utf8               fields",
                "  #574 = Utf8               Ljava/io/ObjectInputStream$GetField;",
                "  #575 = Utf8               lf",
                "  #576 = Utf8               mappings",
                "  #577 = Class              #578          // java/lang/ClassNotFoundException",
                "  #578 = Utf8               java/lang/ClassNotFoundException",
                "  #579 = Utf8               (ITK;TV;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #580 = Utf8               replacementNode",
                "  #581 = Utf8               (Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
                "  #582 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$Node<TK;TV;>;",
                "  #583 = Utf8               newTreeNode",
                "  #584 = Utf8               (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
                "  #585 = Utf8               (ITK;TV;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #586 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;Ljava/util/HashMap$Node<TK;TV;>;)Ljava/util/HashMap$TreeNode<TK;TV;>;",
                "  #587 = Utf8               (Ljava/util/HashMap$Node<TK;TV;>;)V",
                "  #588 = Utf8               numMappings",
                "  #589 = Utf8               newHashMap",
                "  #590 = Utf8               (I)Ljava/util/HashMap;",
                "  #591 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>(I)Ljava/util/HashMap<TK;TV;>;",
                "  #592 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;Ljava/util/Map<TK;TV;>;Ljava/lang/Cloneable;Ljava/io/Serializable;",
                "  #593 = Utf8               SourceFile",
                "  #594 = Utf8               HashMap.java",
                "  #595 = Utf8               NestMembers",
                "  #596 = Class              #597          // java/util/HashMap$EntrySpliterator",
                "  #597 = Utf8               java/util/HashMap$EntrySpliterator",
                "  #598 = Class              #599          // java/util/HashMap$ValueSpliterator",
                "  #599 = Utf8               java/util/HashMap$ValueSpliterator",
                "  #600 = Class              #601          // java/util/HashMap$KeySpliterator",
                "  #601 = Utf8               java/util/HashMap$KeySpliterator",
                "  #602 = Class              #603          // java/util/HashMap$HashMapSpliterator",
                "  #603 = Utf8               java/util/HashMap$HashMapSpliterator",
                "  #604 = Class              #605          // java/util/HashMap$EntryIterator",
                "  #605 = Utf8               java/util/HashMap$EntryIterator",
                "  #606 = Class              #607          // java/util/HashMap$ValueIterator",
                "  #607 = Utf8               java/util/HashMap$ValueIterator",
                "  #608 = Class              #609          // java/util/HashMap$KeyIterator",
                "  #609 = Utf8               java/util/HashMap$KeyIterator",
                "  #610 = Class              #611          // java/util/HashMap$HashIterator",
                "  #611 = Utf8               java/util/HashMap$HashIterator",
                "  #612 = Utf8               InnerClasses",
                "  #613 = Utf8               Node",
                "  #614 = Utf8               Entry",
                "  #615 = Utf8               TreeNode",
                "  #616 = Utf8               KeySet",
                "  #617 = Utf8               Values",
                "  #618 = Utf8               EntrySet",
                "  #619 = Utf8               GetField",
                "  #620 = Utf8               UnsafeHolder",
                "  #621 = Utf8               EntrySpliterator",
                "  #622 = Utf8               ValueSpliterator",
                "  #623 = Utf8               KeySpliterator",
                "  #624 = Utf8               HashMapSpliterator",
                "  #625 = Utf8               EntryIterator",
                "  #626 = Utf8               ValueIterator",
                "  #627 = Utf8               KeyIterator",
                "  #628 = Utf8               HashIterator"
        );
    }
}
