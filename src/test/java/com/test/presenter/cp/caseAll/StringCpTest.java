package com.test.presenter.cp.caseAll;

import com.study.constants.ConstantKind;
import com.test.annotations.ExpectedConstantKind;
import com.test.annotations.GeneratedBy;
import com.test.presenter.cp.ConstantPoolPresenterTestBase;
import com.test.presenter.cp.ConstantPoolTestGenerator;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

@GeneratedBy(ConstantPoolTestGenerator.class)
public class StringCpTest extends ConstantPoolPresenterTestBase {

    @BeforeClass
    public static void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.String"));
    }

    @ExpectedConstantKind(ConstantKind.CONSTANT_Class)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Fieldref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Methodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_InterfaceMethodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_String)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Integer)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Long)
    @ExpectedConstantKind(ConstantKind.CONSTANT_NameAndType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Utf8)
    @ExpectedConstantKind(ConstantKind.CONSTANT_MethodHandle)
    @ExpectedConstantKind(ConstantKind.CONSTANT_MethodType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_InvokeDynamic)
    @Test
    public void test() {
        expectedLines = List.of(
                "     #1 = Methodref          #2.#3        // java/lang/Object.\"<init>\":()V",
                "     #2 = Class              #4           // java/lang/Object",
                "     #3 = NameAndType        #5:#6        // \"<init>\":()V",
                "     #4 = Utf8               java/lang/Object",
                "     #5 = Utf8               <init>",
                "     #6 = Utf8               ()V",
                "     #7 = String             #8           //",
                "     #8 = Utf8",
                "     #9 = Fieldref           #10.#11      // java/lang/String.value:[B",
                "    #10 = Class              #12          // java/lang/String",
                "    #11 = NameAndType        #13:#14      // value:[B",
                "    #12 = Utf8               java/lang/String",
                "    #13 = Utf8               value",
                "    #14 = Utf8               [B",
                "    #15 = Fieldref           #10.#16      // java/lang/String.coder:B",
                "    #16 = NameAndType        #17:#18      // coder:B",
                "    #17 = Utf8               coder",
                "    #18 = Utf8               B",
                "    #19 = Fieldref           #10.#20      // java/lang/String.hash:I",
                "    #20 = NameAndType        #21:#22      // hash:I",
                "    #21 = Utf8               hash",
                "    #22 = Utf8               I",
                "    #23 = Fieldref           #10.#24      // java/lang/String.hashIsZero:Z",
                "    #24 = NameAndType        #25:#26      // hashIsZero:Z",
                "    #25 = Utf8               hashIsZero",
                "    #26 = Utf8               Z",
                "    #27 = Methodref          #10.#28      // java/lang/String.\"<init>\":([CIILjava/lang/Void;)V",
                "    #28 = NameAndType        #5:#29       // \"<init>\":([CIILjava/lang/Void;)V",
                "    #29 = Utf8               ([CIILjava/lang/Void;)V",
                "    #30 = Methodref          #10.#31      // java/lang/String.rangeCheck:([CII)Ljava/lang/Void;",
                "    #31 = NameAndType        #32:#33      // rangeCheck:([CII)Ljava/lang/Void;",
                "    #32 = Utf8               rangeCheck",
                "    #33 = Utf8               ([CII)Ljava/lang/Void;",
                "    #34 = Methodref          #10.#35      // java/lang/String.checkBoundsOffCount:(III)I",
                "    #35 = NameAndType        #36:#37      // checkBoundsOffCount:(III)I",
                "    #36 = Utf8               checkBoundsOffCount",
                "    #37 = Utf8               (III)I",
                "    #38 = Fieldref           #10.#39      // java/lang/String.COMPACT_STRINGS:Z",
                "    #39 = NameAndType        #40:#26      // COMPACT_STRINGS:Z",
                "    #40 = Utf8               COMPACT_STRINGS",
                "    #41 = Methodref          #42.#43      // java/lang/StringLatin1.toBytes:([III)[B",
                "    #42 = Class              #44          // java/lang/StringLatin1",
                "    #43 = NameAndType        #45:#46      // toBytes:([III)[B",
                "    #44 = Utf8               java/lang/StringLatin1",
                "    #45 = Utf8               toBytes",
                "    #46 = Utf8               ([III)[B",
                "    #47 = Methodref          #48.#43      // java/lang/StringUTF16.toBytes:([III)[B",
                "    #48 = Class              #49          // java/lang/StringUTF16",
                "    #49 = Utf8               java/lang/StringUTF16",
                "    #50 = Methodref          #51.#52      // java/util/Arrays.copyOfRange:([BII)[B",
                "    #51 = Class              #53          // java/util/Arrays",
                "    #52 = NameAndType        #54:#55      // copyOfRange:([BII)[B",
                "    #53 = Utf8               java/util/Arrays",
                "    #54 = Utf8               copyOfRange",
                "    #55 = Utf8               ([BII)[B",
                "    #56 = Methodref          #48.#57      // java/lang/StringUTF16.newBytesFor:(I)[B",
                "    #57 = NameAndType        #58:#59      // newBytesFor:(I)[B",
                "    #58 = Utf8               newBytesFor",
                "    #59 = Utf8               (I)[B",
                "    #60 = Methodref          #48.#61      // java/lang/StringUTF16.putChar:([BII)V",
                "    #61 = NameAndType        #62:#63      // putChar:([BII)V",
                "    #62 = Utf8               putChar",
                "    #63 = Utf8               ([BII)V",
                "    #64 = Methodref          #10.#65      // java/lang/String.\"<init>\":([BIII)V",
                "    #65 = NameAndType        #5:#66       // \"<init>\":([BIII)V",
                "    #66 = Utf8               ([BIII)V",
                "    #67 = Methodref          #10.#68      // java/lang/String.lookupCharset:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "    #68 = NameAndType        #69:#70      // lookupCharset:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "    #69 = Utf8               lookupCharset",
                "    #70 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "    #71 = Methodref          #10.#72      // java/lang/String.\"<init>\":(Ljava/nio/charset/Charset;[BII)V",
                "    #72 = NameAndType        #5:#73       // \"<init>\":(Ljava/nio/charset/Charset;[BII)V",
                "    #73 = Utf8               (Ljava/nio/charset/Charset;[BII)V",
                "    #74 = Methodref          #75.#76      // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;",
                "    #75 = Class              #77          // java/util/Objects",
                "    #76 = NameAndType        #78:#79      // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;",
                "    #77 = Utf8               java/util/Objects",
                "    #78 = Utf8               requireNonNull",
                "    #79 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "    #80 = Class              #81          // java/nio/charset/Charset",
                "    #81 = Utf8               java/nio/charset/Charset",
                "    #82 = Fieldref           #83.#84      // sun/nio/cs/UTF_8.INSTANCE:Lsun/nio/cs/UTF_8;",
                "    #83 = Class              #85          // sun/nio/cs/UTF_8",
                "    #84 = NameAndType        #86:#87      // INSTANCE:Lsun/nio/cs/UTF_8;",
                "    #85 = Utf8               sun/nio/cs/UTF_8",
                "    #86 = Utf8               INSTANCE",
                "    #87 = Utf8               Lsun/nio/cs/UTF_8;",
                "    #88 = Methodref          #89.#90      // java/lang/StringCoding.countPositives:([BII)I",
                "    #89 = Class              #91          // java/lang/StringCoding",
                "    #90 = NameAndType        #92:#93      // countPositives:([BII)I",
                "    #91 = Utf8               java/lang/StringCoding",
                "    #92 = Utf8               countPositives",
                "    #93 = Utf8               ([BII)I",
                "    #94 = Methodref          #95.#96      // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V",
                "    #95 = Class              #97          // java/lang/System",
                "    #96 = NameAndType        #98:#99      // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V",
                "    #97 = Utf8               java/lang/System",
                "    #98 = Utf8               arraycopy",
                "    #99 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V",
                "   #100 = Methodref          #10.#101     // java/lang/String.decode2:(II)C",
                "   #101 = NameAndType        #102:#103    // decode2:(II)C",
                "   #102 = Utf8               decode2",
                "   #103 = Utf8               (II)C",
                "   #104 = Methodref          #51.#105     // java/util/Arrays.copyOf:([BI)[B",
                "   #105 = NameAndType        #106:#107    // copyOf:([BI)[B",
                "   #106 = Utf8               copyOf",
                "   #107 = Utf8               ([BI)[B",
                "   #108 = Methodref          #42.#109     // java/lang/StringLatin1.inflate:([BI[BII)V",
                "   #109 = NameAndType        #110:#111    // inflate:([BI[BII)V",
                "   #110 = Utf8               inflate",
                "   #111 = Utf8               ([BI[BII)V",
                "   #112 = Methodref          #10.#113     // java/lang/String.decodeUTF8_UTF16:([BII[BIZ)I",
                "   #113 = NameAndType        #114:#115    // decodeUTF8_UTF16:([BII[BIZ)I",
                "   #114 = Utf8               decodeUTF8_UTF16",
                "   #115 = Utf8               ([BII[BIZ)I",
                "   #116 = Fieldref           #117.#118    // sun/nio/cs/ISO_8859_1.INSTANCE:Lsun/nio/cs/ISO_8859_1;",
                "   #117 = Class              #119         // sun/nio/cs/ISO_8859_1",
                "   #118 = NameAndType        #86:#120     // INSTANCE:Lsun/nio/cs/ISO_8859_1;",
                "   #119 = Utf8               sun/nio/cs/ISO_8859_1",
                "   #120 = Utf8               Lsun/nio/cs/ISO_8859_1;",
                "   #121 = Methodref          #42.#122     // java/lang/StringLatin1.inflate:([BII)[B",
                "   #122 = NameAndType        #110:#55     // inflate:([BII)[B",
                "   #123 = Fieldref           #124.#125    // sun/nio/cs/US_ASCII.INSTANCE:Lsun/nio/cs/US_ASCII;",
                "   #124 = Class              #126         // sun/nio/cs/US_ASCII",
                "   #125 = NameAndType        #86:#127     // INSTANCE:Lsun/nio/cs/US_ASCII;",
                "   #126 = Utf8               sun/nio/cs/US_ASCII",
                "   #127 = Utf8               Lsun/nio/cs/US_ASCII;",
                "   #128 = Methodref          #89.#129     // java/lang/StringCoding.hasNegatives:([BII)Z",
                "   #129 = NameAndType        #130:#131    // hasNegatives:([BII)Z",
                "   #130 = Utf8               hasNegatives",
                "   #131 = Utf8               ([BII)Z",
                "   #132 = Integer            65533",
                "   #133 = Methodref          #80.#134     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;",
                "   #134 = NameAndType        #135:#136    // newDecoder:()Ljava/nio/charset/CharsetDecoder;",
                "   #135 = Utf8               newDecoder",
                "   #136 = Utf8               ()Ljava/nio/charset/CharsetDecoder;",
                "   #137 = Class              #138         // sun/nio/cs/ArrayDecoder",
                "   #138 = Utf8               sun/nio/cs/ArrayDecoder",
                "   #139 = InterfaceMethodref #137.#140    // sun/nio/cs/ArrayDecoder.isASCIICompatible:()Z",
                "   #140 = NameAndType        #141:#142    // isASCIICompatible:()Z",
                "   #141 = Utf8               isASCIICompatible",
                "   #142 = Utf8               ()Z",
                "   #143 = InterfaceMethodref #137.#144    // sun/nio/cs/ArrayDecoder.isLatin1Decodable:()Z",
                "   #144 = NameAndType        #145:#142    // isLatin1Decodable:()Z",
                "   #145 = Utf8               isLatin1Decodable",
                "   #146 = InterfaceMethodref #137.#147    // sun/nio/cs/ArrayDecoder.decodeToLatin1:([BII[B)I",
                "   #147 = NameAndType        #148:#149    // decodeToLatin1:([BII[B)I",
                "   #148 = Utf8               decodeToLatin1",
                "   #149 = Utf8               ([BII[B)I",
                "   #150 = Methodref          #151.#152    // java/nio/charset/CharsetDecoder.maxCharsPerByte:()F",
                "   #151 = Class              #153         // java/nio/charset/CharsetDecoder",
                "   #152 = NameAndType        #154:#155    // maxCharsPerByte:()F",
                "   #153 = Utf8               java/nio/charset/CharsetDecoder",
                "   #154 = Utf8               maxCharsPerByte",
                "   #155 = Utf8               ()F",
                "   #156 = Methodref          #10.#157     // java/lang/String.scale:(IF)I",
                "   #157 = NameAndType        #158:#159    // scale:(IF)I",
                "   #158 = Utf8               scale",
                "   #159 = Utf8               (IF)I",
                "   #160 = Fieldref           #161.#162    // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;",
                "   #161 = Class              #163         // java/nio/charset/CodingErrorAction",
                "   #162 = NameAndType        #164:#165    // REPLACE:Ljava/nio/charset/CodingErrorAction;",
                "   #163 = Utf8               java/nio/charset/CodingErrorAction",
                "   #164 = Utf8               REPLACE",
                "   #165 = Utf8               Ljava/nio/charset/CodingErrorAction;",
                "   #166 = Methodref          #151.#167    // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #167 = NameAndType        #168:#169    // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #168 = Utf8               onMalformedInput",
                "   #169 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #170 = Methodref          #151.#171    // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #171 = NameAndType        #172:#169    // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;",
                "   #172 = Utf8               onUnmappableCharacter",
                "   #173 = InterfaceMethodref #137.#174    // sun/nio/cs/ArrayDecoder.decode:([BII[C)I",
                "   #174 = NameAndType        #175:#176    // decode:([BII[C)I",
                "   #175 = Utf8               decode",
                "   #176 = Utf8               ([BII[C)I",
                "   #177 = Methodref          #48.#178     // java/lang/StringUTF16.compress:([CII)[B",
                "   #178 = NameAndType        #179:#180    // compress:([CII)[B",
                "   #179 = Utf8               compress",
                "   #180 = Utf8               ([CII)[B",
                "   #181 = Methodref          #48.#182     // java/lang/StringUTF16.toBytes:([CII)[B",
                "   #182 = NameAndType        #45:#180     // toBytes:([CII)[B",
                "   #183 = Methodref          #2.#184      // java/lang/Object.getClass:()Ljava/lang/Class;",
                "   #184 = NameAndType        #185:#186    // getClass:()Ljava/lang/Class;",
                "   #185 = Utf8               getClass",
                "   #186 = Utf8               ()Ljava/lang/Class;",
                "   #187 = Methodref          #188.#189    // java/lang/Class.getClassLoader0:()Ljava/lang/ClassLoader;",
                "   #188 = Class              #190         // java/lang/Class",
                "   #189 = NameAndType        #191:#192    // getClassLoader0:()Ljava/lang/ClassLoader;",
                "   #190 = Utf8               java/lang/Class",
                "   #191 = Utf8               getClassLoader0",
                "   #192 = Utf8               ()Ljava/lang/ClassLoader;",
                "   #193 = Methodref          #95.#194     // java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;",
                "   #194 = NameAndType        #195:#196    // getSecurityManager:()Ljava/lang/SecurityManager;",
                "   #195 = Utf8               getSecurityManager",
                "   #196 = Utf8               ()Ljava/lang/SecurityManager;",
                "   #197 = Methodref          #10.#198     // java/lang/String.decodeWithDecoder:(Ljava/nio/charset/CharsetDecoder;[C[BII)I",
                "   #198 = NameAndType        #199:#200    // decodeWithDecoder:(Ljava/nio/charset/CharsetDecoder;[C[BII)I",
                "   #199 = Utf8               decodeWithDecoder",
                "   #200 = Utf8               (Ljava/nio/charset/CharsetDecoder;[C[BII)I",
                "   #201 = Class              #202         // java/nio/charset/CharacterCodingException",
                "   #202 = Utf8               java/nio/charset/CharacterCodingException",
                "   #203 = Class              #204         // java/lang/Error",
                "   #204 = Utf8               java/lang/Error",
                "   #205 = Methodref          #203.#206    // java/lang/Error.\"<init>\":(Ljava/lang/Throwable;)V",
                "   #206 = NameAndType        #5:#207      // \"<init>\":(Ljava/lang/Throwable;)V",
                "   #207 = Utf8               (Ljava/lang/Throwable;)V",
                "   #208 = Methodref          #10.#209     // java/lang/String.\"<init>\":([BB)V",
                "   #209 = NameAndType        #5:#210      // \"<init>\":([BB)V",
                "   #210 = Utf8               ([BB)V",
                "   #211 = Methodref          #10.#212     // java/lang/String.newStringNoRepl1:([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "   #212 = NameAndType        #213:#214    // newStringNoRepl1:([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "   #213 = Utf8               newStringNoRepl1",
                "   #214 = Utf8               ([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "   #215 = Class              #216         // java/lang/IllegalArgumentException",
                "   #216 = Utf8               java/lang/IllegalArgumentException",
                "   #217 = Methodref          #215.#218    // java/lang/IllegalArgumentException.getCause:()Ljava/lang/Throwable;",
                "   #218 = NameAndType        #219:#220    // getCause:()Ljava/lang/Throwable;",
                "   #219 = Utf8               getCause",
                "   #220 = Utf8               ()Ljava/lang/Throwable;",
                "   #221 = Class              #222         // java/nio/charset/MalformedInputException",
                "   #222 = Utf8               java/nio/charset/MalformedInputException",
                "   #223 = Methodref          #10.#224     // java/lang/String.newStringUTF8NoRepl:([BIIZ)Ljava/lang/String;",
                "   #224 = NameAndType        #225:#226    // newStringUTF8NoRepl:([BIIZ)Ljava/lang/String;",
                "   #225 = Utf8               newStringUTF8NoRepl",
                "   #226 = Utf8               ([BIIZ)Ljava/lang/String;",
                "   #227 = Methodref          #10.#228     // java/lang/String.throwMalformed:([B)V",
                "   #228 = NameAndType        #229:#230    // throwMalformed:([B)V",
                "   #229 = Utf8               throwMalformed",
                "   #230 = Utf8               ([B)V",
                "   #231 = Methodref          #10.#232     // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V",
                "   #232 = NameAndType        #5:#233      // \"<init>\":([BIILjava/nio/charset/Charset;)V",
                "   #233 = Utf8               ([BIILjava/nio/charset/Charset;)V",
                "   #234 = Methodref          #215.#206    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/Throwable;)V",
                "   #235 = Methodref          #80.#236     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "   #236 = NameAndType        #237:#70     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "   #237 = Utf8               forName",
                "   #238 = Class              #239         // java/nio/charset/UnsupportedCharsetException",
                "   #239 = Utf8               java/nio/charset/UnsupportedCharsetException",
                "   #240 = Class              #241         // java/nio/charset/IllegalCharsetNameException",
                "   #241 = Utf8               java/nio/charset/IllegalCharsetNameException",
                "   #242 = Class              #243         // java/io/UnsupportedEncodingException",
                "   #243 = Utf8               java/io/UnsupportedEncodingException",
                "   #244 = Methodref          #242.#245    // java/io/UnsupportedEncodingException.\"<init>\":(Ljava/lang/String;)V",
                "   #245 = NameAndType        #5:#246      // \"<init>\":(Ljava/lang/String;)V",
                "   #246 = Utf8               (Ljava/lang/String;)V",
                "   #247 = Methodref          #10.#248     // java/lang/String.encodeUTF8:(B[BZ)[B",
                "   #248 = NameAndType        #249:#250    // encodeUTF8:(B[BZ)[B",
                "   #249 = Utf8               encodeUTF8",
                "   #250 = Utf8               (B[BZ)[B",
                "   #251 = Methodref          #10.#252     // java/lang/String.encode8859_1:(B[B)[B",
                "   #252 = NameAndType        #253:#254    // encode8859_1:(B[B)[B",
                "   #253 = Utf8               encode8859_1",
                "   #254 = Utf8               (B[B)[B",
                "   #255 = Methodref          #10.#256     // java/lang/String.encodeASCII:(B[B)[B",
                "   #256 = NameAndType        #257:#254    // encodeASCII:(B[B)[B",
                "   #257 = Utf8               encodeASCII",
                "   #258 = Methodref          #10.#259     // java/lang/String.encodeWithEncoder:(Ljava/nio/charset/Charset;B[BZ)[B",
                "   #259 = NameAndType        #260:#261    // encodeWithEncoder:(Ljava/nio/charset/Charset;B[BZ)[B",
                "   #260 = Utf8               encodeWithEncoder",
                "   #261 = Utf8               (Ljava/nio/charset/Charset;B[BZ)[B",
                "   #262 = Methodref          #80.#263     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;",
                "   #263 = NameAndType        #264:#265    // newEncoder:()Ljava/nio/charset/CharsetEncoder;",
                "   #264 = Utf8               newEncoder",
                "   #265 = Utf8               ()Ljava/nio/charset/CharsetEncoder;",
                "   #266 = Methodref          #267.#268    // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F",
                "   #267 = Class              #269         // java/nio/charset/CharsetEncoder",
                "   #268 = NameAndType        #270:#155    // maxBytesPerChar:()F",
                "   #269 = Utf8               java/nio/charset/CharsetEncoder",
                "   #270 = Utf8               maxBytesPerChar",
                "   #271 = Class              #272         // sun/nio/cs/ArrayEncoder",
                "   #272 = Utf8               sun/nio/cs/ArrayEncoder",
                "   #273 = InterfaceMethodref #271.#140    // sun/nio/cs/ArrayEncoder.isASCIICompatible:()Z",
                "   #274 = Methodref          #275.#276    // \"[B\".clone:()Ljava/lang/Object;",
                "   #275 = Class              #14          // \"[B\"",
                "   #276 = NameAndType        #277:#278    // clone:()Ljava/lang/Object;",
                "   #277 = Utf8               clone",
                "   #278 = Utf8               ()Ljava/lang/Object;",
                "   #279 = InterfaceMethodref #271.#280    // sun/nio/cs/ArrayEncoder.encodeFromLatin1:([BII[B)I",
                "   #280 = NameAndType        #281:#149    // encodeFromLatin1:([BII[B)I",
                "   #281 = Utf8               encodeFromLatin1",
                "   #282 = InterfaceMethodref #271.#283    // sun/nio/cs/ArrayEncoder.encodeFromUTF16:([BII[B)I",
                "   #283 = NameAndType        #284:#149    // encodeFromUTF16:([BII[B)I",
                "   #284 = Utf8               encodeFromUTF16",
                "   #285 = Methodref          #10.#286     // java/lang/String.safeTrim:([BIZ)[B",
                "   #286 = NameAndType        #287:#288    // safeTrim:([BIZ)[B",
                "   #287 = Utf8               safeTrim",
                "   #288 = Utf8               ([BIZ)[B",
                "   #289 = Methodref          #267.#290    // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #290 = NameAndType        #168:#291    // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #291 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #292 = Methodref          #267.#293    // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #293 = NameAndType        #172:#291    // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;",
                "   #294 = Methodref          #42.#295     // java/lang/StringLatin1.toChars:([B)[C",
                "   #295 = NameAndType        #296:#297    // toChars:([B)[C",
                "   #296 = Utf8               toChars",
                "   #297 = Utf8               ([B)[C",
                "   #298 = Methodref          #48.#295     // java/lang/StringUTF16.toChars:([B)[C",
                "   #299 = Methodref          #300.#301    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;",
                "   #300 = Class              #302         // java/nio/ByteBuffer",
                "   #301 = NameAndType        #303:#304    // wrap:([B)Ljava/nio/ByteBuffer;",
                "   #302 = Utf8               java/nio/ByteBuffer",
                "   #303 = Utf8               wrap",
                "   #304 = Utf8               ([B)Ljava/nio/ByteBuffer;",
                "   #305 = Methodref          #306.#307    // java/nio/CharBuffer.wrap:([CII)Ljava/nio/CharBuffer;",
                "   #306 = Class              #308         // java/nio/CharBuffer",
                "   #307 = NameAndType        #303:#309    // wrap:([CII)Ljava/nio/CharBuffer;",
                "   #308 = Utf8               java/nio/CharBuffer",
                "   #309 = Utf8               ([CII)Ljava/nio/CharBuffer;",
                "   #310 = Methodref          #267.#311    // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #311 = NameAndType        #312:#313    // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #312 = Utf8               encode",
                "   #313 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #314 = Methodref          #315.#316    // java/nio/charset/CoderResult.isUnderflow:()Z",
                "   #315 = Class              #317         // java/nio/charset/CoderResult",
                "   #316 = NameAndType        #318:#142    // isUnderflow:()Z",
                "   #317 = Utf8               java/nio/charset/CoderResult",
                "   #318 = Utf8               isUnderflow",
                "   #319 = Methodref          #315.#320    // java/nio/charset/CoderResult.throwException:()V",
                "   #320 = NameAndType        #321:#6      // throwException:()V",
                "   #321 = Utf8               throwException",
                "   #322 = Methodref          #267.#323    // java/nio/charset/CharsetEncoder.flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;",
                "   #323 = NameAndType        #324:#325    // flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;",
                "   #324 = Utf8               flush",
                "   #325 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;",
                "   #326 = Methodref          #300.#327    // java/nio/ByteBuffer.position:()I",
                "   #327 = NameAndType        #328:#329    // position:()I",
                "   #328 = Utf8               position",
                "   #329 = Utf8               ()I",
                "   #330 = Methodref          #10.#331     // java/lang/String.coder:()B",
                "   #331 = NameAndType        #17:#332     // coder:()B",
                "   #332 = Utf8               ()B",
                "   #333 = Methodref          #10.#334     // java/lang/String.value:()[B",
                "   #334 = NameAndType        #13:#335     // value:()[B",
                "   #335 = Utf8               ()[B",
                "   #336 = Methodref          #10.#337     // java/lang/String.getBytesNoRepl1:(Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "   #337 = NameAndType        #338:#339    // getBytesNoRepl1:(Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "   #338 = Utf8               getBytesNoRepl1",
                "   #339 = Utf8               (Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "   #340 = Class              #341         // java/nio/charset/UnmappableCharacterException",
                "   #341 = Utf8               java/nio/charset/UnmappableCharacterException",
                "   #342 = Methodref          #10.#343     // java/lang/String.isASCII:([B)Z",
                "   #343 = NameAndType        #344:#345    // isASCII:([B)Z",
                "   #344 = Utf8               isASCII",
                "   #345 = Utf8               ([B)Z",
                "   #346 = Methodref          #10.#347     // java/lang/String.encode8859_1:(B[BZ)[B",
                "   #347 = NameAndType        #253:#250    // encode8859_1:(B[BZ)[B",
                "   #348 = Methodref          #10.#349     // java/lang/String.throwUnmappable:([B)V",
                "   #349 = NameAndType        #350:#230    // throwUnmappable:([B)V",
                "   #350 = Utf8               throwUnmappable",
                "   #351 = Methodref          #10.#352     // java/lang/String.replaceNegatives:([BI)V",
                "   #352 = NameAndType        #353:#354    // replaceNegatives:([BI)V",
                "   #353 = Utf8               replaceNegatives",
                "   #354 = Utf8               ([BI)V",
                "   #355 = Methodref          #48.#356     // java/lang/StringUTF16.getChar:([BI)C",
                "   #356 = NameAndType        #357:#358    // getChar:([BI)C",
                "   #357 = Utf8               getChar",
                "   #358 = Utf8               ([BI)C",
                "   #359 = Methodref          #360.#361    // java/lang/Character.isHighSurrogate:(C)Z",
                "   #360 = Class              #362         // java/lang/Character",
                "   #361 = NameAndType        #363:#364    // isHighSurrogate:(C)Z",
                "   #362 = Utf8               java/lang/Character",
                "   #363 = Utf8               isHighSurrogate",
                "   #364 = Utf8               (C)Z",
                "   #365 = Methodref          #360.#366    // java/lang/Character.isLowSurrogate:(C)Z",
                "   #366 = NameAndType        #367:#364    // isLowSurrogate:(C)Z",
                "   #367 = Utf8               isLowSurrogate",
                "   #368 = Methodref          #89.#369     // java/lang/StringCoding.implEncodeISOArray:([BI[BII)I",
                "   #369 = NameAndType        #370:#371    // implEncodeISOArray:([BI[BII)I",
                "   #370 = Utf8               implEncodeISOArray",
                "   #371 = Utf8               ([BI[BII)I",
                "   #372 = Methodref          #10.#373     // java/lang/String.throwUnmappable:(I)V",
                "   #373 = NameAndType        #350:#374    // throwUnmappable:(I)V",
                "   #374 = Utf8               (I)V",
                "   #375 = Methodref          #42.#376     // java/lang/StringLatin1.inflate:([BI[CII)V",
                "   #376 = NameAndType        #110:#377    // inflate:([BI[CII)V",
                "   #377 = Utf8               ([BI[CII)V",
                "   #378 = Integer            -123008",
                "   #379 = Integer            3678080",
                "   #380 = Methodref          #10.#381     // java/lang/String.isNotContinuation:(I)Z",
                "   #381 = NameAndType        #382:#383    // isNotContinuation:(I)Z",
                "   #382 = Utf8               isNotContinuation",
                "   #383 = Utf8               (I)Z",
                "   #384 = Methodref          #10.#385     // java/lang/String.throwMalformed:(II)V",
                "   #385 = NameAndType        #229:#386    // throwMalformed:(II)V",
                "   #386 = Utf8               (II)V",
                "   #387 = Methodref          #10.#388     // java/lang/String.isMalformed3:(III)Z",
                "   #388 = NameAndType        #389:#390    // isMalformed3:(III)Z",
                "   #389 = Utf8               isMalformed3",
                "   #390 = Utf8               (III)Z",
                "   #391 = Methodref          #10.#392     // java/lang/String.malformed3:([BI)I",
                "   #392 = NameAndType        #393:#394    // malformed3:([BI)I",
                "   #393 = Utf8               malformed3",
                "   #394 = Utf8               ([BI)I",
                "   #395 = Methodref          #10.#396     // java/lang/String.decode3:(III)C",
                "   #396 = NameAndType        #397:#398    // decode3:(III)C",
                "   #397 = Utf8               decode3",
                "   #398 = Utf8               (III)C",
                "   #399 = Methodref          #360.#400    // java/lang/Character.isSurrogate:(C)Z",
                "   #400 = NameAndType        #401:#364    // isSurrogate:(C)Z",
                "   #401 = Utf8               isSurrogate",
                "   #402 = Methodref          #10.#403     // java/lang/String.isMalformed3_2:(II)Z",
                "   #403 = NameAndType        #404:#405    // isMalformed3_2:(II)Z",
                "   #404 = Utf8               isMalformed3_2",
                "   #405 = Utf8               (II)Z",
                "   #406 = Methodref          #10.#407     // java/lang/String.decode4:(IIII)I",
                "   #407 = NameAndType        #408:#409    // decode4:(IIII)I",
                "   #408 = Utf8               decode4",
                "   #409 = Utf8               (IIII)I",
                "   #410 = Methodref          #10.#411     // java/lang/String.isMalformed4:(III)Z",
                "   #411 = NameAndType        #412:#390    // isMalformed4:(III)Z",
                "   #412 = Utf8               isMalformed4",
                "   #413 = Methodref          #360.#414    // java/lang/Character.isSupplementaryCodePoint:(I)Z",
                "   #414 = NameAndType        #415:#383    // isSupplementaryCodePoint:(I)Z",
                "   #415 = Utf8               isSupplementaryCodePoint",
                "   #416 = Methodref          #10.#417     // java/lang/String.malformed4:([BI)I",
                "   #417 = NameAndType        #418:#394    // malformed4:([BI)I",
                "   #418 = Utf8               malformed4",
                "   #419 = Methodref          #360.#420    // java/lang/Character.highSurrogate:(I)C",
                "   #420 = NameAndType        #421:#422    // highSurrogate:(I)C",
                "   #421 = Utf8               highSurrogate",
                "   #422 = Utf8               (I)C",
                "   #423 = Methodref          #360.#424    // java/lang/Character.lowSurrogate:(I)C",
                "   #424 = NameAndType        #425:#422    // lowSurrogate:(I)C",
                "   #425 = Utf8               lowSurrogate",
                "   #426 = Methodref          #10.#427     // java/lang/String.isMalformed4_2:(II)Z",
                "   #427 = NameAndType        #428:#405    // isMalformed4_2:(II)Z",
                "   #428 = Utf8               isMalformed4_2",
                "   #429 = Methodref          #10.#430     // java/lang/String.isMalformed4_3:(I)Z",
                "   #430 = NameAndType        #431:#383    // isMalformed4_3:(I)Z",
                "   #431 = Utf8               isMalformed4_3",
                "   #432 = Methodref          #300.#433    // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;",
                "   #433 = NameAndType        #303:#434    // wrap:([BII)Ljava/nio/ByteBuffer;",
                "   #434 = Utf8               ([BII)Ljava/nio/ByteBuffer;",
                "   #435 = Methodref          #151.#436    // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #436 = NameAndType        #175:#437    // decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #437 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;",
                "   #438 = Methodref          #151.#439    // java/nio/charset/CharsetDecoder.flush:(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;",
                "   #439 = NameAndType        #324:#440    // flush:(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;",
                "   #440 = Utf8               (Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;",
                "   #441 = Methodref          #306.#327    // java/nio/CharBuffer.position:()I",
                "   #442 = Class              #443         // java/lang/StringBuilder",
                "   #443 = Utf8               java/lang/StringBuilder",
                "   #444 = Methodref          #442.#3      // java/lang/StringBuilder.\"<init>\":()V",
                "   #445 = String             #446         // malformed input off :",
                "   #446 = Utf8               malformed input off :",
                "   #447 = Methodref          #442.#448    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #448 = NameAndType        #449:#450    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #449 = Utf8               append",
                "   #450 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #451 = Methodref          #442.#452    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;",
                "   #452 = NameAndType        #449:#453    // append:(I)Ljava/lang/StringBuilder;",
                "   #453 = Utf8               (I)Ljava/lang/StringBuilder;",
                "   #454 = String             #455         // , length :",
                "   #455 = Utf8               , length :",
                "   #456 = Methodref          #442.#457    // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "   #457 = NameAndType        #458:#459    // toString:()Ljava/lang/String;",
                "   #458 = Utf8               toString",
                "   #459 = Utf8               ()Ljava/lang/String;",
                "   #460 = Methodref          #221.#461    // java/nio/charset/MalformedInputException.\"<init>\":(I)V",
                "   #461 = NameAndType        #5:#374      // \"<init>\":(I)V",
                "   #462 = Methodref          #215.#463    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V",
                "   #463 = NameAndType        #5:#464      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V",
                "   #464 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V",
                "   #465 = String             #466         // , length : 1",
                "   #466 = Utf8               , length : 1",
                "   #467 = Methodref          #340.#461    // java/nio/charset/UnmappableCharacterException.\"<init>\":(I)V",
                "   #468 = Methodref          #10.#469     // java/lang/String.encodeUTF8_UTF16:([BZ)[B",
                "   #469 = NameAndType        #470:#471    // encodeUTF8_UTF16:([BZ)[B",
                "   #470 = Utf8               encodeUTF8_UTF16",
                "   #471 = Utf8               ([BZ)[B",
                "   #472 = Methodref          #360.#473    // java/lang/Character.toCodePoint:(CC)I",
                "   #473 = NameAndType        #474:#475    // toCodePoint:(CC)I",
                "   #474 = Utf8               toCodePoint",
                "   #475 = Utf8               (CC)I",
                "   #476 = Methodref          #80.#477     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;",
                "   #477 = NameAndType        #478:#479    // defaultCharset:()Ljava/nio/charset/Charset;",
                "   #478 = Utf8               defaultCharset",
                "   #479 = Utf8               ()Ljava/nio/charset/Charset;",
                "   #480 = Methodref          #481.#457    // java/lang/StringBuffer.toString:()Ljava/lang/String;",
                "   #481 = Class              #482         // java/lang/StringBuffer",
                "   #482 = Utf8               java/lang/StringBuffer",
                "   #483 = Methodref          #10.#245     // java/lang/String.\"<init>\":(Ljava/lang/String;)V",
                "   #484 = Methodref          #10.#485     // java/lang/String.\"<init>\":(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V",
                "   #485 = NameAndType        #5:#486      // \"<init>\":(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V",
                "   #486 = Utf8               (Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V",
                "   #487 = Methodref          #10.#488     // java/lang/String.isLatin1:()Z",
                "   #488 = NameAndType        #489:#142    // isLatin1:()Z",
                "   #489 = Utf8               isLatin1",
                "   #490 = Methodref          #42.#491     // java/lang/StringLatin1.charAt:([BI)C",
                "   #491 = NameAndType        #492:#358    // charAt:([BI)C",
                "   #492 = Utf8               charAt",
                "   #493 = Methodref          #48.#491     // java/lang/StringUTF16.charAt:([BI)C",
                "   #494 = Methodref          #10.#495     // java/lang/String.checkIndex:(II)V",
                "   #495 = NameAndType        #496:#386    // checkIndex:(II)V",
                "   #496 = Utf8               checkIndex",
                "   #497 = Methodref          #48.#498     // java/lang/StringUTF16.codePointAt:([BII)I",
                "   #498 = NameAndType        #499:#93     // codePointAt:([BII)I",
                "   #499 = Utf8               codePointAt",
                "   #500 = Methodref          #10.#501     // java/lang/String.length:()I",
                "   #501 = NameAndType        #502:#329    // length:()I",
                "   #502 = Utf8               length",
                "   #503 = Methodref          #48.#504     // java/lang/StringUTF16.codePointBefore:([BI)I",
                "   #504 = NameAndType        #505:#394    // codePointBefore:([BI)I",
                "   #505 = Utf8               codePointBefore",
                "   #506 = Methodref          #75.#507     // java/util/Objects.checkFromToIndex:(III)I",
                "   #507 = NameAndType        #508:#37     // checkFromToIndex:(III)I",
                "   #508 = Utf8               checkFromToIndex",
                "   #509 = Methodref          #48.#510     // java/lang/StringUTF16.codePointCount:([BII)I",
                "   #510 = NameAndType        #511:#93     // codePointCount:([BII)I",
                "   #511 = Utf8               codePointCount",
                "   #512 = Methodref          #360.#513    // java/lang/Character.offsetByCodePoints:(Ljava/lang/CharSequence;II)I",
                "   #513 = NameAndType        #514:#515    // offsetByCodePoints:(Ljava/lang/CharSequence;II)I",
                "   #514 = Utf8               offsetByCodePoints",
                "   #515 = Utf8               (Ljava/lang/CharSequence;II)I",
                "   #516 = Methodref          #10.#517     // java/lang/String.checkBoundsBeginEnd:(III)V",
                "   #517 = NameAndType        #518:#519    // checkBoundsBeginEnd:(III)V",
                "   #518 = Utf8               checkBoundsBeginEnd",
                "   #519 = Utf8               (III)V",
                "   #520 = Methodref          #42.#521     // java/lang/StringLatin1.getChars:([BII[CI)V",
                "   #521 = NameAndType        #522:#523    // getChars:([BII[CI)V",
                "   #522 = Utf8               getChars",
                "   #523 = Utf8               ([BII[CI)V",
                "   #524 = Methodref          #48.#521     // java/lang/StringUTF16.getChars:([BII[CI)V",
                "   #525 = Methodref          #42.#526     // java/lang/StringLatin1.getBytes:([BII[BI)V",
                "   #526 = NameAndType        #527:#528    // getBytes:([BII[BI)V",
                "   #527 = Utf8               getBytes",
                "   #528 = Utf8               ([BII[BI)V",
                "   #529 = Methodref          #48.#526     // java/lang/StringUTF16.getBytes:([BII[BI)V",
                "   #530 = Methodref          #10.#531     // java/lang/String.encode:(Ljava/nio/charset/Charset;B[B)[B",
                "   #531 = NameAndType        #312:#532    // encode:(Ljava/nio/charset/Charset;B[B)[B",
                "   #532 = Utf8               (Ljava/nio/charset/Charset;B[B)[B",
                "   #533 = Class              #534         // java/lang/NullPointerException",
                "   #534 = Utf8               java/lang/NullPointerException",
                "   #535 = Methodref          #533.#3      // java/lang/NullPointerException.\"<init>\":()V",
                "   #536 = Methodref          #42.#537     // java/lang/StringLatin1.equals:([B[B)Z",
                "   #537 = NameAndType        #538:#539    // equals:([B[B)Z",
                "   #538 = Utf8               equals",
                "   #539 = Utf8               ([B[B)Z",
                "   #540 = Methodref          #10.#541     // java/lang/String.contentEquals:(Ljava/lang/CharSequence;)Z",
                "   #541 = NameAndType        #542:#543    // contentEquals:(Ljava/lang/CharSequence;)Z",
                "   #542 = Utf8               contentEquals",
                "   #543 = Utf8               (Ljava/lang/CharSequence;)Z",
                "   #544 = Methodref          #545.#501    // java/lang/AbstractStringBuilder.length:()I",
                "   #545 = Class              #546         // java/lang/AbstractStringBuilder",
                "   #546 = Utf8               java/lang/AbstractStringBuilder",
                "   #547 = Methodref          #545.#548    // java/lang/AbstractStringBuilder.getValue:()[B",
                "   #548 = NameAndType        #549:#335    // getValue:()[B",
                "   #549 = Utf8               getValue",
                "   #550 = Methodref          #545.#551    // java/lang/AbstractStringBuilder.getCoder:()B",
                "   #551 = NameAndType        #552:#332    // getCoder:()B",
                "   #552 = Utf8               getCoder",
                "   #553 = Methodref          #554.#555    // jdk/internal/util/ArraysSupport.mismatch:([B[BI)I",
                "   #554 = Class              #556         // jdk/internal/util/ArraysSupport",
                "   #555 = NameAndType        #557:#558    // mismatch:([B[BI)I",
                "   #556 = Utf8               jdk/internal/util/ArraysSupport",
                "   #557 = Utf8               mismatch",
                "   #558 = Utf8               ([B[BI)I",
                "   #559 = Methodref          #48.#560     // java/lang/StringUTF16.contentEquals:([B[BI)Z",
                "   #560 = NameAndType        #542:#561    // contentEquals:([B[BI)Z",
                "   #561 = Utf8               ([B[BI)Z",
                "   #562 = Methodref          #10.#563     // java/lang/String.nonSyncContentEquals:(Ljava/lang/AbstractStringBuilder;)Z",
                "   #563 = NameAndType        #564:#565    // nonSyncContentEquals:(Ljava/lang/AbstractStringBuilder;)Z",
                "   #564 = Utf8               nonSyncContentEquals",
                "   #565 = Utf8               (Ljava/lang/AbstractStringBuilder;)Z",
                "   #566 = Methodref          #10.#567     // java/lang/String.equals:(Ljava/lang/Object;)Z",
                "   #567 = NameAndType        #538:#568    // equals:(Ljava/lang/Object;)Z",
                "   #568 = Utf8               (Ljava/lang/Object;)Z",
                "   #569 = InterfaceMethodref #570.#501    // java/lang/CharSequence.length:()I",
                "   #570 = Class              #571         // java/lang/CharSequence",
                "   #571 = Utf8               java/lang/CharSequence",
                "   #572 = InterfaceMethodref #570.#573    // java/lang/CharSequence.charAt:(I)C",
                "   #573 = NameAndType        #492:#422    // charAt:(I)C",
                "   #574 = Methodref          #48.#575     // java/lang/StringUTF16.contentEquals:([BLjava/lang/CharSequence;I)Z",
                "   #575 = NameAndType        #542:#576    // contentEquals:([BLjava/lang/CharSequence;I)Z",
                "   #576 = Utf8               ([BLjava/lang/CharSequence;I)Z",
                "   #577 = Methodref          #10.#578     // java/lang/String.regionMatches:(ZILjava/lang/String;II)Z",
                "   #578 = NameAndType        #579:#580    // regionMatches:(ZILjava/lang/String;II)Z",
                "   #579 = Utf8               regionMatches",
                "   #580 = Utf8               (ZILjava/lang/String;II)Z",
                "   #581 = Methodref          #42.#582     // java/lang/StringLatin1.compareTo:([B[B)I",
                "   #582 = NameAndType        #583:#584    // compareTo:([B[B)I",
                "   #583 = Utf8               compareTo",
                "   #584 = Utf8               ([B[B)I",
                "   #585 = Methodref          #48.#582     // java/lang/StringUTF16.compareTo:([B[B)I",
                "   #586 = Methodref          #42.#587     // java/lang/StringLatin1.compareToUTF16:([B[B)I",
                "   #587 = NameAndType        #588:#584    // compareToUTF16:([B[B)I",
                "   #588 = Utf8               compareToUTF16",
                "   #589 = Methodref          #48.#590     // java/lang/StringUTF16.compareToLatin1:([B[B)I",
                "   #590 = NameAndType        #591:#584    // compareToLatin1:([B[B)I",
                "   #591 = Utf8               compareToLatin1",
                "   #592 = Fieldref           #10.#593     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;",
                "   #593 = NameAndType        #594:#595    // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;",
                "   #594 = Utf8               CASE_INSENSITIVE_ORDER",
                "   #595 = Utf8               Ljava/util/Comparator;",
                "   #596 = InterfaceMethodref #597.#598    // java/util/Comparator.compare:(Ljava/lang/Object;Ljava/lang/Object;)I",
                "   #597 = Class              #599         // java/util/Comparator",
                "   #598 = NameAndType        #600:#601    // compare:(Ljava/lang/Object;Ljava/lang/Object;)I",
                "   #599 = Utf8               java/util/Comparator",
                "   #600 = Utf8               compare",
                "   #601 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)I",
                "   #602 = Methodref          #554.#603    // jdk/internal/util/ArraysSupport.mismatch:([BI[BII)I",
                "   #603 = NameAndType        #557:#371    // mismatch:([BI[BII)I",
                "   #604 = Methodref          #42.#356     // java/lang/StringLatin1.getChar:([BI)C",
                "   #605 = Methodref          #10.#606     // java/lang/String.regionMatches:(ILjava/lang/String;II)Z",
                "   #606 = NameAndType        #579:#607    // regionMatches:(ILjava/lang/String;II)Z",
                "   #607 = Utf8               (ILjava/lang/String;II)Z",
                "   #608 = Methodref          #42.#609     // java/lang/StringLatin1.regionMatchesCI:([BI[BII)Z",
                "   #609 = NameAndType        #610:#611    // regionMatchesCI:([BI[BII)Z",
                "   #610 = Utf8               regionMatchesCI",
                "   #611 = Utf8               ([BI[BII)Z",
                "   #612 = Methodref          #48.#609     // java/lang/StringUTF16.regionMatchesCI:([BI[BII)Z",
                "   #613 = Methodref          #42.#614     // java/lang/StringLatin1.regionMatchesCI_UTF16:([BI[BII)Z",
                "   #614 = NameAndType        #615:#611    // regionMatchesCI_UTF16:([BI[BII)Z",
                "   #615 = Utf8               regionMatchesCI_UTF16",
                "   #616 = Methodref          #48.#617     // java/lang/StringUTF16.regionMatchesCI_Latin1:([BI[BII)Z",
                "   #617 = NameAndType        #618:#611    // regionMatchesCI_Latin1:([BI[BII)Z",
                "   #618 = Utf8               regionMatchesCI_Latin1",
                "   #619 = Methodref          #10.#620     // java/lang/String.startsWith:(Ljava/lang/String;I)Z",
                "   #620 = NameAndType        #621:#622    // startsWith:(Ljava/lang/String;I)Z",
                "   #621 = Utf8               startsWith",
                "   #622 = Utf8               (Ljava/lang/String;I)Z",
                "   #623 = Methodref          #42.#624     // java/lang/StringLatin1.hashCode:([B)I",
                "   #624 = NameAndType        #625:#626    // hashCode:([B)I",
                "   #625 = Utf8               hashCode",
                "   #626 = Utf8               ([B)I",
                "   #627 = Methodref          #48.#624     // java/lang/StringUTF16.hashCode:([B)I",
                "   #628 = Methodref          #10.#629     // java/lang/String.indexOf:(II)I",
                "   #629 = NameAndType        #630:#631    // indexOf:(II)I",
                "   #630 = Utf8               indexOf",
                "   #631 = Utf8               (II)I",
                "   #632 = Methodref          #42.#633     // java/lang/StringLatin1.indexOf:([BIII)I",
                "   #633 = NameAndType        #630:#634    // indexOf:([BIII)I",
                "   #634 = Utf8               ([BIII)I",
                "   #635 = Methodref          #48.#633     // java/lang/StringUTF16.indexOf:([BIII)I",
                "   #636 = Methodref          #10.#637     // java/lang/String.lastIndexOf:(II)I",
                "   #637 = NameAndType        #638:#631    // lastIndexOf:(II)I",
                "   #638 = Utf8               lastIndexOf",
                "   #639 = Methodref          #42.#640     // java/lang/StringLatin1.lastIndexOf:([BII)I",
                "   #640 = NameAndType        #638:#93     // lastIndexOf:([BII)I",
                "   #641 = Methodref          #48.#640     // java/lang/StringUTF16.lastIndexOf:([BII)I",
                "   #642 = Methodref          #42.#643     // java/lang/StringLatin1.indexOf:([B[B)I",
                "   #643 = NameAndType        #630:#584    // indexOf:([B[B)I",
                "   #644 = Methodref          #48.#643     // java/lang/StringUTF16.indexOf:([B[B)I",
                "   #645 = Methodref          #48.#646     // java/lang/StringUTF16.indexOfLatin1:([B[B)I",
                "   #646 = NameAndType        #647:#584    // indexOfLatin1:([B[B)I",
                "   #647 = Utf8               indexOfLatin1",
                "   #648 = Methodref          #10.#649     // java/lang/String.indexOf:([BBILjava/lang/String;I)I",
                "   #649 = NameAndType        #630:#650    // indexOf:([BBILjava/lang/String;I)I",
                "   #650 = Utf8               ([BBILjava/lang/String;I)I",
                "   #651 = Methodref          #10.#573     // java/lang/String.charAt:(I)C",
                "   #652 = Methodref          #10.#653     // java/lang/String.indexOf:(III)I",
                "   #653 = NameAndType        #630:#37     // indexOf:(III)I",
                "   #654 = Methodref          #655.#656    // java/lang/Math.clamp:(JII)I",
                "   #655 = Class              #657         // java/lang/Math",
                "   #656 = NameAndType        #658:#659    // clamp:(JII)I",
                "   #657 = Utf8               java/lang/Math",
                "   #658 = Utf8               clamp",
                "   #659 = Utf8               (JII)I",
                "   #660 = Methodref          #42.#661     // java/lang/StringLatin1.indexOf:([BI[BII)I",
                "   #661 = NameAndType        #630:#371    // indexOf:([BI[BII)I",
                "   #662 = Methodref          #48.#661     // java/lang/StringUTF16.indexOf:([BI[BII)I",
                "   #663 = Methodref          #48.#664     // java/lang/StringUTF16.indexOfLatin1:([BI[BII)I",
                "   #664 = NameAndType        #647:#371    // indexOfLatin1:([BI[BII)I",
                "   #665 = Methodref          #10.#666     // java/lang/String.lastIndexOf:(Ljava/lang/String;I)I",
                "   #666 = NameAndType        #638:#667    // lastIndexOf:(Ljava/lang/String;I)I",
                "   #667 = Utf8               (Ljava/lang/String;I)I",
                "   #668 = Methodref          #10.#669     // java/lang/String.lastIndexOf:([BBILjava/lang/String;I)I",
                "   #669 = NameAndType        #638:#650    // lastIndexOf:([BBILjava/lang/String;I)I",
                "   #670 = Methodref          #42.#671     // java/lang/StringLatin1.lastIndexOf:([BI[BII)I",
                "   #671 = NameAndType        #638:#371    // lastIndexOf:([BI[BII)I",
                "   #672 = Methodref          #48.#671     // java/lang/StringUTF16.lastIndexOf:([BI[BII)I",
                "   #673 = Methodref          #48.#674     // java/lang/StringUTF16.lastIndexOfLatin1:([BI[BII)I",
                "   #674 = NameAndType        #675:#371    // lastIndexOfLatin1:([BI[BII)I",
                "   #675 = Utf8               lastIndexOfLatin1",
                "   #676 = Methodref          #10.#677     // java/lang/String.substring:(II)Ljava/lang/String;",
                "   #677 = NameAndType        #678:#679    // substring:(II)Ljava/lang/String;",
                "   #678 = Utf8               substring",
                "   #679 = Utf8               (II)Ljava/lang/String;",
                "   #680 = Methodref          #42.#681     // java/lang/StringLatin1.newString:([BII)Ljava/lang/String;",
                "   #681 = NameAndType        #682:#683    // newString:([BII)Ljava/lang/String;",
                "   #682 = Utf8               newString",
                "   #683 = Utf8               ([BII)Ljava/lang/String;",
                "   #684 = Methodref          #48.#681     // java/lang/StringUTF16.newString:([BII)Ljava/lang/String;",
                "   #685 = Methodref          #10.#686     // java/lang/String.isEmpty:()Z",
                "   #686 = NameAndType        #687:#142    // isEmpty:()Z",
                "   #687 = Utf8               isEmpty",
                "   #688 = Methodref          #689.#690    // java/lang/StringConcatHelper.simpleConcat:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;",
                "   #689 = Class              #691         // java/lang/StringConcatHelper",
                "   #690 = NameAndType        #692:#693    // simpleConcat:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;",
                "   #691 = Utf8               java/lang/StringConcatHelper",
                "   #692 = Utf8               simpleConcat",
                "   #693 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;",
                "   #694 = Methodref          #42.#695     // java/lang/StringLatin1.replace:([BCC)Ljava/lang/String;",
                "   #695 = NameAndType        #696:#697    // replace:([BCC)Ljava/lang/String;",
                "   #696 = Utf8               replace",
                "   #697 = Utf8               ([BCC)Ljava/lang/String;",
                "   #698 = Methodref          #48.#695     // java/lang/StringUTF16.replace:([BCC)Ljava/lang/String;",
                "   #699 = Methodref          #700.#701    // java/util/regex/Pattern.matches:(Ljava/lang/String;Ljava/lang/CharSequence;)Z",
                "   #700 = Class              #702         // java/util/regex/Pattern",
                "   #701 = NameAndType        #703:#704    // matches:(Ljava/lang/String;Ljava/lang/CharSequence;)Z",
                "   #702 = Utf8               java/util/regex/Pattern",
                "   #703 = Utf8               matches",
                "   #704 = Utf8               (Ljava/lang/String;Ljava/lang/CharSequence;)Z",
                "   #705 = InterfaceMethodref #570.#457    // java/lang/CharSequence.toString:()Ljava/lang/String;",
                "   #706 = Methodref          #10.#707     // java/lang/String.indexOf:(Ljava/lang/String;)I",
                "   #707 = NameAndType        #630:#708    // indexOf:(Ljava/lang/String;)I",
                "   #708 = Utf8               (Ljava/lang/String;)I",
                "   #709 = Methodref          #700.#710    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;",
                "   #710 = NameAndType        #711:#712    // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;",
                "   #711 = Utf8               compile",
                "   #712 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;",
                "   #713 = Methodref          #700.#714    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;",
                "   #714 = NameAndType        #715:#716    // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;",
                "   #715 = Utf8               matcher",
                "   #716 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;",
                "   #717 = Methodref          #718.#719    // java/util/regex/Matcher.replaceFirst:(Ljava/lang/String;)Ljava/lang/String;",
                "   #718 = Class              #720         // java/util/regex/Matcher",
                "   #719 = NameAndType        #721:#722    // replaceFirst:(Ljava/lang/String;)Ljava/lang/String;",
                "   #720 = Utf8               java/util/regex/Matcher",
                "   #721 = Utf8               replaceFirst",
                "   #722 = Utf8               (Ljava/lang/String;)Ljava/lang/String;",
                "   #723 = Methodref          #718.#724    // java/util/regex/Matcher.replaceAll:(Ljava/lang/String;)Ljava/lang/String;",
                "   #724 = NameAndType        #725:#722    // replaceAll:(Ljava/lang/String;)Ljava/lang/String;",
                "   #725 = Utf8               replaceAll",
                "   #726 = Methodref          #10.#727     // java/lang/String.replace:(CC)Ljava/lang/String;",
                "   #727 = NameAndType        #696:#728    // replace:(CC)Ljava/lang/String;",
                "   #728 = Utf8               (CC)Ljava/lang/String;",
                "   #729 = Methodref          #42.#730     // java/lang/StringLatin1.replace:([BI[BI[BI)Ljava/lang/String;",
                "   #730 = NameAndType        #696:#731    // replace:([BI[BI[BI)Ljava/lang/String;",
                "   #731 = Utf8               ([BI[BI[BI)Ljava/lang/String;",
                "   #732 = Methodref          #48.#733     // java/lang/StringUTF16.replace:([BIZ[BIZ[BIZ)Ljava/lang/String;",
                "   #733 = NameAndType        #696:#734    // replace:([BIZ[BIZ[BIZ)Ljava/lang/String;",
                "   #734 = Utf8               ([BIZ[BIZ[BIZ)Ljava/lang/String;",
                "   #735 = Methodref          #655.#736    // java/lang/Math.addExact:(II)I",
                "   #736 = NameAndType        #737:#631    // addExact:(II)I",
                "   #737 = Utf8               addExact",
                "   #738 = Methodref          #655.#739    // java/lang/Math.multiplyExact:(II)I",
                "   #739 = NameAndType        #740:#631    // multiplyExact:(II)I",
                "   #740 = Utf8               multiplyExact",
                "   #741 = Class              #742         // java/lang/ArithmeticException",
                "   #742 = Utf8               java/lang/ArithmeticException",
                "   #743 = Class              #744         // java/lang/OutOfMemoryError",
                "   #744 = Utf8               java/lang/OutOfMemoryError",
                "   #745 = String             #746         // Required length exceeds implementation limit",
                "   #746 = Utf8               Required length exceeds implementation limit",
                "   #747 = Methodref          #743.#245    // java/lang/OutOfMemoryError.\"<init>\":(Ljava/lang/String;)V",
                "   #748 = Methodref          #442.#461    // java/lang/StringBuilder.\"<init>\":(I)V",
                "   #749 = Methodref          #442.#750    // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;",
                "   #750 = NameAndType        #449:#751    // append:(C)Ljava/lang/StringBuilder;",
                "   #751 = Utf8               (C)Ljava/lang/StringBuilder;",
                "   #752 = Methodref          #10.#753     // java/lang/String.split:(Ljava/lang/String;IZ)[Ljava/lang/String;",
                "   #753 = NameAndType        #754:#755    // split:(Ljava/lang/String;IZ)[Ljava/lang/String;",
                "   #754 = Utf8               split",
                "   #755 = Utf8               (Ljava/lang/String;IZ)[Ljava/lang/String;",
                "   #756 = String             #757         // .$|()[{^?*+\\\\",
                "   #757 = Utf8               .$|()[{^?*+\\\\",
                "   #758 = Methodref          #10.#759     // java/lang/String.indexOf:(I)I",
                "   #759 = NameAndType        #630:#760    // indexOf:(I)I",
                "   #760 = Utf8               (I)I",
                "   #761 = Integer            55296",
                "   #762 = Integer            57343",
                "   #763 = Methodref          #10.#764     // java/lang/String.split:(CIZ)[Ljava/lang/String;",
                "   #764 = NameAndType        #754:#765    // split:(CIZ)[Ljava/lang/String;",
                "   #765 = Utf8               (CIZ)[Ljava/lang/String;",
                "   #766 = Methodref          #700.#767    // java/util/regex/Pattern.splitWithDelimiters:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #767 = NameAndType        #768:#769    // splitWithDelimiters:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #768 = Utf8               splitWithDelimiters",
                "   #769 = Utf8               (Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #770 = Methodref          #700.#771    // java/util/regex/Pattern.split:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #771 = NameAndType        #754:#769    // split:(Ljava/lang/CharSequence;I)[Ljava/lang/String;",
                "   #772 = Class              #773         // java/util/ArrayList",
                "   #773 = Utf8               java/util/ArrayList",
                "   #774 = Methodref          #772.#3      // java/util/ArrayList.\"<init>\":()V",
                "   #775 = Methodref          #10.#776     // java/lang/String.valueOf:(C)Ljava/lang/String;",
                "   #776 = NameAndType        #777:#778    // valueOf:(C)Ljava/lang/String;",
                "   #777 = Utf8               valueOf",
                "   #778 = Utf8               (C)Ljava/lang/String;",
                "   #779 = Methodref          #772.#780    // java/util/ArrayList.add:(Ljava/lang/Object;)Z",
                "   #780 = NameAndType        #781:#568    // add:(Ljava/lang/Object;)Z",
                "   #781 = Utf8               add",
                "   #782 = Methodref          #772.#783    // java/util/ArrayList.size:()I",
                "   #783 = NameAndType        #784:#329    // size:()I",
                "   #784 = Utf8               size",
                "   #785 = Methodref          #772.#786    // java/util/ArrayList.get:(I)Ljava/lang/Object;",
                "   #786 = NameAndType        #787:#788    // get:(I)Ljava/lang/Object;",
                "   #787 = Utf8               get",
                "   #788 = Utf8               (I)Ljava/lang/Object;",
                "   #789 = Methodref          #772.#790    // java/util/ArrayList.subList:(II)Ljava/util/List;",
                "   #790 = NameAndType        #791:#792    // subList:(II)Ljava/util/List;",
                "   #791 = Utf8               subList",
                "   #792 = Utf8               (II)Ljava/util/List;",
                "   #793 = InterfaceMethodref #794.#795    // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;",
                "   #794 = Class              #796         // java/util/List",
                "   #795 = NameAndType        #797:#798    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;",
                "   #796 = Utf8               java/util/List",
                "   #797 = Utf8               toArray",
                "   #798 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;",
                "   #799 = Class              #800         // \"[Ljava/lang/String;\"",
                "   #800 = Utf8               [Ljava/lang/String;",
                "   #801 = Methodref          #10.#802     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;",
                "   #802 = NameAndType        #777:#803    // valueOf:(Ljava/lang/Object;)Ljava/lang/String;",
                "   #803 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;",
                "   #804 = Methodref          #10.#805     // java/lang/String.join:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;",
                "   #805 = NameAndType        #806:#807    // join:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;",
                "   #806 = Utf8               join",
                "   #807 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;",
                "   #808 = String             #809         // Requested string length exceeds VM limit",
                "   #809 = Utf8               Requested string length exceeds VM limit",
                "   #810 = Methodref          #689.#811    // java/lang/StringConcatHelper.newArray:(J)[B",
                "   #811 = NameAndType        #812:#813    // newArray:(J)[B",
                "   #812 = Utf8               newArray",
                "   #813 = Utf8               (J)[B",
                "   #814 = Methodref          #10.#815     // java/lang/String.getBytes:([BIB)V",
                "   #815 = NameAndType        #527:#816    // getBytes:([BIB)V",
                "   #816 = Utf8               ([BIB)V",
                "   #817 = InterfaceMethodref #818.#819    // java/lang/Iterable.iterator:()Ljava/util/Iterator;",
                "   #818 = Class              #820         // java/lang/Iterable",
                "   #819 = NameAndType        #821:#822    // iterator:()Ljava/util/Iterator;",
                "   #820 = Utf8               java/lang/Iterable",
                "   #821 = Utf8               iterator",
                "   #822 = Utf8               ()Ljava/util/Iterator;",
                "   #823 = InterfaceMethodref #824.#825    // java/util/Iterator.hasNext:()Z",
                "   #824 = Class              #826         // java/util/Iterator",
                "   #825 = NameAndType        #827:#142    // hasNext:()Z",
                "   #826 = Utf8               java/util/Iterator",
                "   #827 = Utf8               hasNext",
                "   #828 = InterfaceMethodref #824.#829    // java/util/Iterator.next:()Ljava/lang/Object;",
                "   #829 = NameAndType        #830:#278    // next:()Ljava/lang/Object;",
                "   #830 = Utf8               next",
                "   #831 = Methodref          #51.#832     // java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #832 = NameAndType        #106:#833    // copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #833 = Utf8               ([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #834 = Methodref          #42.#835     // java/lang/StringLatin1.toLowerCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #835 = NameAndType        #836:#837    // toLowerCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #836 = Utf8               toLowerCase",
                "   #837 = Utf8               (Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #838 = Methodref          #48.#835     // java/lang/StringUTF16.toLowerCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #839 = Methodref          #840.#841    // java/util/Locale.getDefault:()Ljava/util/Locale;",
                "   #840 = Class              #842         // java/util/Locale",
                "   #841 = NameAndType        #843:#844    // getDefault:()Ljava/util/Locale;",
                "   #842 = Utf8               java/util/Locale",
                "   #843 = Utf8               getDefault",
                "   #844 = Utf8               ()Ljava/util/Locale;",
                "   #845 = Methodref          #10.#846     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #846 = NameAndType        #836:#847    // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #847 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;",
                "   #848 = Methodref          #42.#849     // java/lang/StringLatin1.toUpperCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #849 = NameAndType        #850:#837    // toUpperCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #850 = Utf8               toUpperCase",
                "   #851 = Methodref          #48.#849     // java/lang/StringUTF16.toUpperCase:(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String;",
                "   #852 = Methodref          #10.#853     // java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #853 = NameAndType        #850:#847    // toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;",
                "   #854 = Methodref          #42.#855     // java/lang/StringLatin1.trim:([B)Ljava/lang/String;",
                "   #855 = NameAndType        #856:#857    // trim:([B)Ljava/lang/String;",
                "   #856 = Utf8               trim",
                "   #857 = Utf8               ([B)Ljava/lang/String;",
                "   #858 = Methodref          #48.#855     // java/lang/StringUTF16.trim:([B)Ljava/lang/String;",
                "   #859 = Methodref          #42.#860     // java/lang/StringLatin1.strip:([B)Ljava/lang/String;",
                "   #860 = NameAndType        #861:#857    // strip:([B)Ljava/lang/String;",
                "   #861 = Utf8               strip",
                "   #862 = Methodref          #48.#860     // java/lang/StringUTF16.strip:([B)Ljava/lang/String;",
                "   #863 = Methodref          #42.#864     // java/lang/StringLatin1.stripLeading:([B)Ljava/lang/String;",
                "   #864 = NameAndType        #865:#857    // stripLeading:([B)Ljava/lang/String;",
                "   #865 = Utf8               stripLeading",
                "   #866 = Methodref          #48.#864     // java/lang/StringUTF16.stripLeading:([B)Ljava/lang/String;",
                "   #867 = Methodref          #42.#868     // java/lang/StringLatin1.stripTrailing:([B)Ljava/lang/String;",
                "   #868 = NameAndType        #869:#857    // stripTrailing:([B)Ljava/lang/String;",
                "   #869 = Utf8               stripTrailing",
                "   #870 = Methodref          #48.#868     // java/lang/StringUTF16.stripTrailing:([B)Ljava/lang/String;",
                "   #871 = Methodref          #10.#872     // java/lang/String.indexOfNonWhitespace:()I",
                "   #872 = NameAndType        #873:#329    // indexOfNonWhitespace:()I",
                "   #873 = Utf8               indexOfNonWhitespace",
                "   #874 = Methodref          #42.#875     // java/lang/StringLatin1.lines:([B)Ljava/util/stream/Stream;",
                "   #875 = NameAndType        #876:#877    // lines:([B)Ljava/util/stream/Stream;",
                "   #876 = Utf8               lines",
                "   #877 = Utf8               ([B)Ljava/util/stream/Stream;",
                "   #878 = Methodref          #48.#875     // java/lang/StringUTF16.lines:([B)Ljava/util/stream/Stream;",
                "   #879 = Methodref          #10.#880     // java/lang/String.lines:()Ljava/util/stream/Stream;",
                "   #880 = NameAndType        #876:#881    // lines:()Ljava/util/stream/Stream;",
                "   #881 = Utf8               ()Ljava/util/stream/Stream;",
                "   #882 = String             #883         //",
                "   #883 = Utf8",
                "   #884 = Methodref          #10.#885     // java/lang/String.repeat:(I)Ljava/lang/String;",
                "   #885 = NameAndType        #886:#887    // repeat:(I)Ljava/lang/String;",
                "   #886 = Utf8               repeat",
                "   #887 = Utf8               (I)Ljava/lang/String;",
                "   #888 = InvokeDynamic      #0:#889      // #0:apply:(Ljava/lang/String;)Ljava/util/function/Function;",
                "   #889 = NameAndType        #890:#891    // apply:(Ljava/lang/String;)Ljava/util/function/Function;",
                "   #890 = Utf8               apply",
                "   #891 = Utf8               (Ljava/lang/String;)Ljava/util/function/Function;",
                "   #892 = InterfaceMethodref #893.#894    // java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;",
                "   #893 = Class              #895         // java/util/stream/Stream",
                "   #894 = NameAndType        #896:#897    // map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;",
                "   #895 = Utf8               java/util/stream/Stream",
                "   #896 = Utf8               map",
                "   #897 = Utf8               (Ljava/util/function/Function;)Ljava/util/stream/Stream;",
                "   #898 = Class              #899         // java/lang/Integer",
                "   #899 = Utf8               java/lang/Integer",
                "   #900 = Integer            -2147483648",
                "   #901 = InvokeDynamic      #1:#902      // #1:apply:()Ljava/util/function/Function;",
                "   #902 = NameAndType        #890:#903    // apply:()Ljava/util/function/Function;",
                "   #903 = Utf8               ()Ljava/util/function/Function;",
                "   #904 = InvokeDynamic      #2:#905      // #2:apply:(I)Ljava/util/function/Function;",
                "   #905 = NameAndType        #890:#906    // apply:(I)Ljava/util/function/Function;",
                "   #906 = Utf8               (I)Ljava/util/function/Function;",
                "   #907 = String             #908         // \\n",
                "   #908 = Utf8               \\n",
                "   #909 = Methodref          #910.#911    // java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;",
                "   #910 = Class              #912         // java/util/stream/Collectors",
                "   #911 = NameAndType        #913:#914    // joining:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;",
                "   #912 = Utf8               java/util/stream/Collectors",
                "   #913 = Utf8               joining",
                "   #914 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;",
                "   #915 = InterfaceMethodref #893.#916    // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;",
                "   #916 = NameAndType        #917:#918    // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;",
                "   #917 = Utf8               collect",
                "   #918 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;",
                "   #919 = Methodref          #42.#920     // java/lang/StringLatin1.indexOfNonWhitespace:([B)I",
                "   #920 = NameAndType        #873:#626    // indexOfNonWhitespace:([B)I",
                "   #921 = Methodref          #48.#920     // java/lang/StringUTF16.indexOfNonWhitespace:([B)I",
                "   #922 = Methodref          #42.#923     // java/lang/StringLatin1.lastIndexOfNonWhitespace:([B)I",
                "   #923 = NameAndType        #924:#626    // lastIndexOfNonWhitespace:([B)I",
                "   #924 = Utf8               lastIndexOfNonWhitespace",
                "   #925 = Methodref          #48.#923     // java/lang/StringUTF16.lastIndexOfNonWhitespace:([B)I",
                "   #926 = InterfaceMethodref #893.#927    // java/util/stream/Stream.toList:()Ljava/util/List;",
                "   #927 = NameAndType        #928:#929    // toList:()Ljava/util/List;",
                "   #928 = Utf8               toList",
                "   #929 = Utf8               ()Ljava/util/List;",
                "   #930 = Methodref          #10.#931     // java/lang/String.outdent:(Ljava/util/List;)I",
                "   #931 = NameAndType        #932:#933    // outdent:(Ljava/util/List;)I",
                "   #932 = Utf8               outdent",
                "   #933 = Utf8               (Ljava/util/List;)I",
                "   #934 = InterfaceMethodref #794.#935    // java/util/List.stream:()Ljava/util/stream/Stream;",
                "   #935 = NameAndType        #936:#881    // stream:()Ljava/util/stream/Stream;",
                "   #936 = Utf8               stream",
                "   #937 = InvokeDynamic      #3:#905      // #3:apply:(I)Ljava/util/function/Function;",
                "   #938 = Integer            2147483647",
                "   #939 = InterfaceMethodref #794.#819    // java/util/List.iterator:()Ljava/util/Iterator;",
                "   #940 = Methodref          #898.#941    // java/lang/Integer.min:(II)I",
                "   #941 = NameAndType        #942:#631    // min:(II)I",
                "   #942 = Utf8               min",
                "   #943 = InterfaceMethodref #794.#783    // java/util/List.size:()I",
                "   #944 = InterfaceMethodref #794.#786    // java/util/List.get:(I)Ljava/lang/Object;",
                "   #945 = Methodref          #10.#946     // java/lang/String.isBlank:()Z",
                "   #946 = NameAndType        #947:#142    // isBlank:()Z",
                "   #947 = Utf8               isBlank",
                "   #948 = Methodref          #10.#949     // java/lang/String.toCharArray:()[C",
                "   #949 = NameAndType        #950:#951    // toCharArray:()[C",
                "   #950 = Utf8               toCharArray",
                "   #951 = Utf8               ()[C",
                "   #952 = String             #953         // Invalid escape sequence: \\\\%c \\\\\\\\u%04X",
                "   #953 = Utf8               Invalid escape sequence: \\\\%c \\\\\\\\u%04X",
                "   #954 = Methodref          #360.#955    // java/lang/Character.valueOf:(C)Ljava/lang/Character;",
                "   #955 = NameAndType        #777:#956    // valueOf:(C)Ljava/lang/Character;",
                "   #956 = Utf8               (C)Ljava/lang/Character;",
                "   #957 = Methodref          #898.#958    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;",
                "   #958 = NameAndType        #777:#959    // valueOf:(I)Ljava/lang/Integer;",
                "   #959 = Utf8               (I)Ljava/lang/Integer;",
                "   #960 = Methodref          #10.#961     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "   #961 = NameAndType        #962:#963    // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "   #962 = Utf8               format",
                "   #963 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "   #964 = Methodref          #215.#245    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "   #965 = Methodref          #10.#966     // java/lang/String.\"<init>\":([CII)V",
                "   #966 = NameAndType        #5:#967      // \"<init>\":([CII)V",
                "   #967 = Utf8               ([CII)V",
                "   #968 = InterfaceMethodref #969.#970    // java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #969 = Class              #971         // java/util/function/Function",
                "   #970 = NameAndType        #890:#79     // apply:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #971 = Utf8               java/util/function/Function",
                "   #972 = Class              #973         // java/lang/StringLatin1$CharsSpliterator",
                "   #973 = Utf8               java/lang/StringLatin1$CharsSpliterator",
                "   #974 = Class              #975         // java/util/Spliterator",
                "   #975 = Utf8               java/util/Spliterator",
                "   #976 = Methodref          #972.#977    // java/lang/StringLatin1$CharsSpliterator.\"<init>\":([BI)V",
                "   #977 = NameAndType        #5:#354      // \"<init>\":([BI)V",
                "   #978 = Class              #979         // java/lang/StringUTF16$CharsSpliterator",
                "   #979 = Utf8               java/lang/StringUTF16$CharsSpliterator",
                "   #980 = Methodref          #978.#977    // java/lang/StringUTF16$CharsSpliterator.\"<init>\":([BI)V",
                "   #981 = Methodref          #982.#983    // java/util/stream/StreamSupport.intStream:(Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;",
                "   #982 = Class              #984         // java/util/stream/StreamSupport",
                "   #983 = NameAndType        #985:#986    // intStream:(Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;",
                "   #984 = Utf8               java/util/stream/StreamSupport",
                "   #985 = Utf8               intStream",
                "   #986 = Utf8               (Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;",
                "   #987 = Class              #988         // java/lang/StringUTF16$CodePointsSpliterator",
                "   #988 = Utf8               java/lang/StringUTF16$CodePointsSpliterator",
                "   #989 = Methodref          #987.#977    // java/lang/StringUTF16$CodePointsSpliterator.\"<init>\":([BI)V",
                "   #990 = Class              #991         // java/util/Formatter",
                "   #991 = Utf8               java/util/Formatter",
                "   #992 = Methodref          #990.#3      // java/util/Formatter.\"<init>\":()V",
                "   #993 = Methodref          #990.#994    // java/util/Formatter.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;",
                "   #994 = NameAndType        #962:#995    // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;",
                "   #995 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;",
                "   #996 = Methodref          #990.#457    // java/util/Formatter.toString:()Ljava/lang/String;",
                "   #997 = Methodref          #990.#998    // java/util/Formatter.\"<init>\":(Ljava/util/Locale;)V",
                "   #998 = NameAndType        #5:#999      // \"<init>\":(Ljava/util/Locale;)V",
                "   #999 = Utf8               (Ljava/util/Locale;)V",
                "  #1000 = String             #1001        // null",
                "  #1001 = Utf8               null",
                "  #1002 = Methodref          #2.#457      // java/lang/Object.toString:()Ljava/lang/String;",
                "  #1003 = Methodref          #10.#1004    // java/lang/String.\"<init>\":([C)V",
                "  #1004 = NameAndType        #5:#1005     // \"<init>\":([C)V",
                "  #1005 = Utf8               ([C)V",
                "  #1006 = String             #1007        // true",
                "  #1007 = Utf8               true",
                "  #1008 = String             #1009        // false",
                "  #1009 = Utf8               false",
                "  #1010 = Methodref          #42.#1011    // java/lang/StringLatin1.canEncode:(I)Z",
                "  #1011 = NameAndType        #1012:#383   // canEncode:(I)Z",
                "  #1012 = Utf8               canEncode",
                "  #1013 = Methodref          #42.#1014    // java/lang/StringLatin1.toBytes:(C)[B",
                "  #1014 = NameAndType        #45:#1015    // toBytes:(C)[B",
                "  #1015 = Utf8               (C)[B",
                "  #1016 = Methodref          #48.#1014    // java/lang/StringUTF16.toBytes:(C)[B",
                "  #1017 = Methodref          #898.#1018   // java/lang/Integer.toString:(I)Ljava/lang/String;",
                "  #1018 = NameAndType        #458:#887    // toString:(I)Ljava/lang/String;",
                "  #1019 = Methodref          #1020.#1021  // java/lang/Long.toString:(J)Ljava/lang/String;",
                "  #1020 = Class              #1022        // java/lang/Long",
                "  #1021 = NameAndType        #458:#1023   // toString:(J)Ljava/lang/String;",
                "  #1022 = Utf8               java/lang/Long",
                "  #1023 = Utf8               (J)Ljava/lang/String;",
                "  #1024 = Methodref          #1025.#1026  // java/lang/Float.toString:(F)Ljava/lang/String;",
                "  #1025 = Class              #1027        // java/lang/Float",
                "  #1026 = NameAndType        #458:#1028   // toString:(F)Ljava/lang/String;",
                "  #1027 = Utf8               java/lang/Float",
                "  #1028 = Utf8               (F)Ljava/lang/String;",
                "  #1029 = Methodref          #1030.#1031  // java/lang/Double.toString:(D)Ljava/lang/String;",
                "  #1030 = Class              #1032        // java/lang/Double",
                "  #1031 = NameAndType        #458:#1033   // toString:(D)Ljava/lang/String;",
                "  #1032 = Utf8               java/lang/Double",
                "  #1033 = Utf8               (D)Ljava/lang/String;",
                "  #1034 = String             #1035        // count is negative:",
                "  #1035 = Utf8               count is negative:",
                "  #1036 = Methodref          #51.#1037    // java/util/Arrays.fill:([BB)V",
                "  #1037 = NameAndType        #1038:#210   // fill:([BB)V",
                "  #1038 = Utf8               fill",
                "  #1039 = Methodref          #10.#1040    // java/lang/String.repeatCopyRest:([BIII)V",
                "  #1040 = NameAndType        #1041:#66    // repeatCopyRest:([BIII)V",
                "  #1041 = Utf8               repeatCopyRest",
                "  #1042 = Methodref          #545.#488    // java/lang/AbstractStringBuilder.isLatin1:()Z",
                "  #1043 = Fieldref           #545.#1044   // java/lang/AbstractStringBuilder.maybeLatin1:Z",
                "  #1044 = NameAndType        #1045:#26    // maybeLatin1:Z",
                "  #1045 = Utf8               maybeLatin1",
                "  #1046 = Methodref          #48.#1047    // java/lang/StringUTF16.compress:([BII)[B",
                "  #1047 = NameAndType        #179:#55     // compress:([BII)[B",
                "  #1048 = Fieldref           #1049.#1050  // jdk/internal/util/Preconditions.SIOOBE_FORMATTER:Ljava/util/function/BiFunction;",
                "  #1049 = Class              #1051        // jdk/internal/util/Preconditions",
                "  #1050 = NameAndType        #1052:#1053  // SIOOBE_FORMATTER:Ljava/util/function/BiFunction;",
                "  #1051 = Utf8               jdk/internal/util/Preconditions",
                "  #1052 = Utf8               SIOOBE_FORMATTER",
                "  #1053 = Utf8               Ljava/util/function/BiFunction;",
                "  #1054 = Methodref          #1049.#1055  // jdk/internal/util/Preconditions.checkIndex:(IILjava/util/function/BiFunction;)I",
                "  #1055 = NameAndType        #496:#1056   // checkIndex:(IILjava/util/function/BiFunction;)I",
                "  #1056 = Utf8               (IILjava/util/function/BiFunction;)I",
                "  #1057 = Methodref          #1049.#1058  // jdk/internal/util/Preconditions.checkFromToIndex:(IIILjava/util/function/BiFunction;)I",
                "  #1058 = NameAndType        #508:#1059   // checkFromToIndex:(IIILjava/util/function/BiFunction;)I",
                "  #1059 = Utf8               (IIILjava/util/function/BiFunction;)I",
                "  #1060 = Methodref          #1049.#1061  // jdk/internal/util/Preconditions.checkFromIndexSize:(IIILjava/util/function/BiFunction;)I",
                "  #1061 = NameAndType        #1062:#1059  // checkFromIndexSize:(IIILjava/util/function/BiFunction;)I",
                "  #1062 = Utf8               checkFromIndexSize",
                "  #1063 = Methodref          #360.#1064   // java/lang/Character.isBmpCodePoint:(I)Z",
                "  #1064 = NameAndType        #1065:#383   // isBmpCodePoint:(I)Z",
                "  #1065 = Utf8               isBmpCodePoint",
                "  #1066 = Methodref          #48.#1067    // java/lang/StringUTF16.toBytesSupplementary:(I)[B",
                "  #1067 = NameAndType        #1068:#59    // toBytesSupplementary:(I)[B",
                "  #1068 = Utf8               toBytesSupplementary",
                "  #1069 = String             #1070        // Not a valid Unicode code point: 0x%X",
                "  #1070 = Utf8               Not a valid Unicode code point: 0x%X",
                "  #1071 = Methodref          #1072.#1073  // java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;",
                "  #1072 = Class              #1074        // java/util/Optional",
                "  #1073 = NameAndType        #1075:#1076  // of:(Ljava/lang/Object;)Ljava/util/Optional;",
                "  #1074 = Utf8               java/util/Optional",
                "  #1075 = Utf8               of",
                "  #1076 = Utf8               (Ljava/lang/Object;)Ljava/util/Optional;",
                "  #1077 = Methodref          #10.#1078    // java/lang/String.compareTo:(Ljava/lang/String;)I",
                "  #1078 = NameAndType        #583:#708    // compareTo:(Ljava/lang/String;)I",
                "  #1079 = Methodref          #10.#1080    // java/lang/String.resolveConstantDesc:(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;",
                "  #1080 = NameAndType        #1081:#1082  // resolveConstantDesc:(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;",
                "  #1081 = Utf8               resolveConstantDesc",
                "  #1082 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;",
                "  #1083 = Methodref          #10.#1084    // java/lang/String.lastIndexOfNonWhitespace:()I",
                "  #1084 = NameAndType        #924:#329    // lastIndexOfNonWhitespace:()I",
                "  #1085 = Methodref          #655.#941    // java/lang/Math.min:(II)I",
                "  #1086 = Methodref          #10.#1087    // java/lang/String.substring:(I)Ljava/lang/String;",
                "  #1087 = NameAndType        #678:#887    // substring:(I)Ljava/lang/String;",
                "  #1088 = Methodref          #10.#1089    // java/lang/String.stripLeading:()Ljava/lang/String;",
                "  #1089 = NameAndType        #865:#459    // stripLeading:()Ljava/lang/String;",
                "  #1090 = Class              #1091        // java/io/ObjectStreamField",
                "  #1091 = Utf8               java/io/ObjectStreamField",
                "  #1092 = Fieldref           #10.#1093    // java/lang/String.serialPersistentFields:[Ljava/io/ObjectStreamField;",
                "  #1093 = NameAndType        #1094:#1095  // serialPersistentFields:[Ljava/io/ObjectStreamField;",
                "  #1094 = Utf8               serialPersistentFields",
                "  #1095 = Utf8               [Ljava/io/ObjectStreamField;",
                "  #1096 = Class              #1097        // java/lang/String$CaseInsensitiveComparator",
                "  #1097 = Utf8               java/lang/String$CaseInsensitiveComparator",
                "  #1098 = Methodref          #1096.#3     // java/lang/String$CaseInsensitiveComparator.\"<init>\":()V",
                "  #1099 = Class              #1100        // java/io/Serializable",
                "  #1100 = Utf8               java/io/Serializable",
                "  #1101 = Class              #1102        // java/lang/Comparable",
                "  #1102 = Utf8               java/lang/Comparable",
                "  #1103 = Class              #1104        // java/lang/constant/Constable",
                "  #1104 = Utf8               java/lang/constant/Constable",
                "  #1105 = Class              #1106        // java/lang/constant/ConstantDesc",
                "  #1106 = Utf8               java/lang/constant/ConstantDesc",
                "  #1107 = Utf8               RuntimeVisibleAnnotations",
                "  #1108 = Utf8               Ljdk/internal/vm/annotation/Stable;",
                "  #1109 = Utf8               serialVersionUID",
                "  #1110 = Utf8               J",
                "  #1111 = Utf8               ConstantValue",
                "  #1112 = Long               -6849794470754667710l",
                "  #1114 = Utf8               REPL",
                "  #1115 = Utf8               C",
                "  #1116 = Utf8               Signature",
                "  #1117 = Utf8               Ljava/util/Comparator<Ljava/lang/String;>;",
                "  #1118 = Utf8               LATIN1",
                "  #1119 = Integer            0",
                "  #1120 = Utf8               UTF16",
                "  #1121 = Integer            1",
                "  #1122 = Utf8               Code",
                "  #1123 = Utf8               LineNumberTable",
                "  #1124 = Utf8               LocalVariableTable",
                "  #1125 = Utf8               this",
                "  #1126 = Utf8               Ljava/lang/String;",
                "  #1127 = Utf8               original",
                "  #1128 = Utf8               Ljdk/internal/vm/annotation/IntrinsicCandidate;",
                "  #1129 = Utf8               [C",
                "  #1130 = Utf8               offset",
                "  #1131 = Utf8               count",
                "  #1132 = Utf8               ([III)V",
                "  #1133 = Utf8               val",
                "  #1134 = Utf8               codePoints",
                "  #1135 = Utf8               [I",
                "  #1136 = Utf8               StackMapTable",
                "  #1137 = Class              #1135        // \"[I\"",
                "  #1138 = Utf8               i",
                "  #1139 = Utf8               ascii",
                "  #1140 = Utf8               hibyte",
                "  #1141 = Utf8               Deprecated",
                "  #1142 = Utf8               Ljava/lang/Deprecated;",
                "  #1143 = Utf8               since",
                "  #1144 = Utf8               1.1",
                "  #1145 = Utf8               ([BIILjava/lang/String;)V",
                "  #1146 = Utf8               bytes",
                "  #1147 = Utf8               charsetName",
                "  #1148 = Utf8               Exceptions",
                "  #1149 = Utf8               charset",
                "  #1150 = Utf8               Ljava/nio/charset/Charset;",
                "  #1151 = Utf8               b2",
                "  #1152 = Utf8               b1",
                "  #1153 = Utf8               dp",
                "  #1154 = Utf8               sl",
                "  #1155 = Utf8               dst",
                "  #1156 = Utf8               buf",
                "  #1157 = Utf8               b",
                "  #1158 = Utf8               bs",
                "  #1159 = Utf8               en",
                "  #1160 = Utf8               ca",
                "  #1161 = Utf8               clen",
                "  #1162 = Utf8               ad",
                "  #1163 = Utf8               Lsun/nio/cs/ArrayDecoder;",
                "  #1164 = Utf8               caLen",
                "  #1165 = Utf8               x",
                "  #1166 = Utf8               Ljava/nio/charset/CharacterCodingException;",
                "  #1167 = Utf8               cd",
                "  #1168 = Utf8               Ljava/nio/charset/CharsetDecoder;",
                "  #1169 = Class              #1129        // \"[C\"",
                "  #1170 = Utf8               noShare",
                "  #1171 = Utf8               newStringNoRepl",
                "  #1172 = Utf8               mie",
                "  #1173 = Utf8               Ljava/nio/charset/MalformedInputException;",
                "  #1174 = Utf8               cause",
                "  #1175 = Utf8               Ljava/lang/Throwable;",
                "  #1176 = Utf8               e",
                "  #1177 = Utf8               Ljava/lang/IllegalArgumentException;",
                "  #1178 = Utf8               src",
                "  #1179 = Utf8               cs",
                "  #1180 = Class              #1181        // java/lang/Throwable",
                "  #1181 = Utf8               java/lang/Throwable",
                "  #1182 = Utf8               len",
                "  #1183 = Utf8               ba",
                "  #1184 = Utf8               isTrusted",
                "  #1185 = Utf8               expansionFactor",
                "  #1186 = Utf8               F",
                "  #1187 = Utf8               csn",
                "  #1188 = Utf8               blen",
                "  #1189 = Utf8               ae",
                "  #1190 = Utf8               Lsun/nio/cs/ArrayEncoder;",
                "  #1191 = Utf8               cr",
                "  #1192 = Utf8               Ljava/nio/charset/CoderResult;",
                "  #1193 = Utf8               doReplace",
                "  #1194 = Utf8               ce",
                "  #1195 = Utf8               Ljava/nio/charset/CharsetEncoder;",
                "  #1196 = Utf8               bb",
                "  #1197 = Utf8               Ljava/nio/ByteBuffer;",
                "  #1198 = Utf8               cb",
                "  #1199 = Utf8               Ljava/nio/CharBuffer;",
                "  #1200 = Utf8               getBytesUTF8NoRepl",
                "  #1201 = Utf8               (Ljava/lang/String;)[B",
                "  #1202 = Utf8               s",
                "  #1203 = Utf8               getBytesNoRepl",
                "  #1204 = Utf8               positives",
                "  #1205 = Utf8               c",
                "  #1206 = Utf8               fromIndex",
                "  #1207 = Utf8               ret",
                "  #1208 = Utf8               sp",
                "  #1209 = Utf8               decodeASCII",
                "  #1210 = Utf8               ([BI[CII)I",
                "  #1211 = Utf8               sa",
                "  #1212 = Utf8               da",
                "  #1213 = Utf8               b3",
                "  #1214 = Utf8               b4",
                "  #1215 = Utf8               uc",
                "  #1216 = Utf8               off",
                "  #1217 = Utf8               nb",
                "  #1218 = Utf8               msg",
                "  #1219 = Utf8               c2",
                "  #1220 = Utf8               ([BLjava/lang/String;)V",
                "  #1221 = Utf8               ([BLjava/nio/charset/Charset;)V",
                "  #1222 = Utf8               (Ljava/lang/StringBuffer;)V",
                "  #1223 = Utf8               buffer",
                "  #1224 = Utf8               Ljava/lang/StringBuffer;",
                "  #1225 = Utf8               (Ljava/lang/StringBuilder;)V",
                "  #1226 = Utf8               builder",
                "  #1227 = Utf8               Ljava/lang/StringBuilder;",
                "  #1228 = Utf8               index",
                "  #1229 = Utf8               beginIndex",
                "  #1230 = Utf8               endIndex",
                "  #1231 = Utf8               codePointOffset",
                "  #1232 = Utf8               (II[CI)V",
                "  #1233 = Utf8               srcBegin",
                "  #1234 = Utf8               srcEnd",
                "  #1235 = Utf8               dstBegin",
                "  #1236 = Utf8               (II[BI)V",
                "  #1237 = Utf8               (Ljava/nio/charset/Charset;)[B",
                "  #1238 = Utf8               aString",
                "  #1239 = Utf8               anObject",
                "  #1240 = Utf8               Ljava/lang/Object;",
                "  #1241 = Utf8               (Ljava/lang/StringBuffer;)Z",
                "  #1242 = Utf8               sb",
                "  #1243 = Utf8               Ljava/lang/AbstractStringBuilder;",
                "  #1244 = Utf8               v1",
                "  #1245 = Utf8               v2",
                "  #1246 = Utf8               Ljava/lang/CharSequence;",
                "  #1247 = Utf8               n",
                "  #1248 = Utf8               equalsIgnoreCase",
                "  #1249 = Utf8               (Ljava/lang/String;)Z",
                "  #1250 = Utf8               anotherString",
                "  #1251 = Utf8               compareToIgnoreCase",
                "  #1252 = Utf8               str",
                "  #1253 = Utf8               toffset",
                "  #1254 = Utf8               other",
                "  #1255 = Utf8               ooffset",
                "  #1256 = Utf8               tv",
                "  #1257 = Utf8               ov",
                "  #1258 = Utf8               ignoreCase",
                "  #1259 = Utf8               prefix",
                "  #1260 = Utf8               ta",
                "  #1261 = Utf8               pa",
                "  #1262 = Utf8               po",
                "  #1263 = Utf8               pc",
                "  #1264 = Utf8               endsWith",
                "  #1265 = Utf8               suffix",
                "  #1266 = Utf8               h",
                "  #1267 = Utf8               ch",
                "  #1268 = Utf8               (Ljava/lang/String;II)I",
                "  #1269 = Utf8               srcCoder",
                "  #1270 = Utf8               srcCount",
                "  #1271 = Utf8               tgtStr",
                "  #1272 = Utf8               tgtCount",
                "  #1273 = Utf8               tgt",
                "  #1274 = Utf8               tgtCoder",
                "  #1275 = Utf8               rightIndex",
                "  #1276 = Utf8               subLen",
                "  #1277 = Utf8               subSequence",
                "  #1278 = Utf8               (II)Ljava/lang/CharSequence;",
                "  #1279 = Utf8               concat",
                "  #1280 = Utf8               oldChar",
                "  #1281 = Utf8               newChar",
                "  #1282 = Utf8               regex",
                "  #1283 = Utf8               contains",
                "  #1284 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1285 = Utf8               replacement",
                "  #1286 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;",
                "  #1287 = Utf8               thisIsLatin1",
                "  #1288 = Utf8               trgtIsLatin1",
                "  #1289 = Utf8               replIsLatin1",
                "  #1290 = Utf8               resultLen",
                "  #1291 = Utf8               ignored",
                "  #1292 = Utf8               Ljava/lang/ArithmeticException;",
                "  #1293 = Utf8               target",
                "  #1294 = Utf8               trgtStr",
                "  #1295 = Utf8               replStr",
                "  #1296 = Utf8               thisLen",
                "  #1297 = Utf8               trgtLen",
                "  #1298 = Utf8               replLen",
                "  #1299 = Utf8               (Ljava/lang/String;I)[Ljava/lang/String;",
                "  #1300 = Utf8               limit",
                "  #1301 = Utf8               withDelimiters",
                "  #1302 = Utf8               pattern",
                "  #1303 = Utf8               Ljava/util/regex/Pattern;",
                "  #1304 = Utf8               last",
                "  #1305 = Utf8               matchCount",
                "  #1306 = Utf8               limited",
                "  #1307 = Utf8               list",
                "  #1308 = Utf8               Ljava/util/ArrayList;",
                "  #1309 = Utf8               del",
                "  #1310 = Utf8               resultSize",
                "  #1311 = Utf8               result",
                "  #1312 = Utf8               LocalVariableTypeTable",
                "  #1313 = Utf8               Ljava/util/ArrayList<Ljava/lang/String;>;",
                "  #1314 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;",
                "  #1315 = Utf8               (Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;",
                "  #1316 = Utf8               delimiter",
                "  #1317 = Utf8               elements",
                "  #1318 = Utf8               [Ljava/lang/CharSequence;",
                "  #1319 = Utf8               delim",
                "  #1320 = Utf8               elems",
                "  #1321 = Utf8               el",
                "  #1322 = Utf8               icoder",
                "  #1323 = Utf8               Ljdk/internal/vm/annotation/ForceInline;",
                "  #1324 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;",
                "  #1325 = Utf8               Ljava/lang/Iterable;",
                "  #1326 = Utf8               Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;",
                "  #1327 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)Ljava/lang/String;",
                "  #1328 = Utf8               locale",
                "  #1329 = Utf8               Ljava/util/Locale;",
                "  #1330 = Utf8               ()Ljava/util/stream/Stream<Ljava/lang/String;>;",
                "  #1331 = Utf8               indent",
                "  #1332 = Utf8               spaces",
                "  #1333 = Utf8               Ljava/util/stream/Stream;",
                "  #1334 = Utf8               Ljava/util/stream/Stream<Ljava/lang/String;>;",
                "  #1335 = Utf8               stripIndent",
                "  #1336 = Utf8               lastChar",
                "  #1337 = Utf8               optOut",
                "  #1338 = Utf8               Ljava/util/List;",
                "  #1339 = Utf8               Ljava/util/List<Ljava/lang/String;>;",
                "  #1340 = Utf8               leadingWhitespace",
                "  #1341 = Utf8               line",
                "  #1342 = Utf8               lastLine",
                "  #1343 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)I",
                "  #1344 = Utf8               translateEscapes",
                "  #1345 = Utf8               code",
                "  #1346 = Utf8               chars",
                "  #1347 = Utf8               from",
                "  #1348 = Utf8               to",
                "  #1349 = Utf8               transform",
                "  #1350 = Utf8               (Ljava/util/function/Function;)Ljava/lang/Object;",
                "  #1351 = Utf8               f",
                "  #1352 = Utf8               Ljava/util/function/Function;",
                "  #1353 = Utf8               Ljava/util/function/Function<-Ljava/lang/String;+TR;>;",
                "  #1354 = Utf8               <R:Ljava/lang/Object;>(Ljava/util/function/Function<-Ljava/lang/String;+TR;>;)TR;",
                "  #1355 = Utf8               ()Ljava/util/stream/IntStream;",
                "  #1356 = Class              #1357        // java/util/Spliterator$OfInt",
                "  #1357 = Utf8               java/util/Spliterator$OfInt",
                "  #1358 = Utf8               args",
                "  #1359 = Utf8               [Ljava/lang/Object;",
                "  #1360 = Utf8               (Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
                "  #1361 = Utf8               l",
                "  #1362 = Utf8               formatted",
                "  #1363 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;",
                "  #1364 = Utf8               obj",
                "  #1365 = Utf8               ([C)Ljava/lang/String;",
                "  #1366 = Utf8               data",
                "  #1367 = Utf8               ([CII)Ljava/lang/String;",
                "  #1368 = Utf8               copyValueOf",
                "  #1369 = Utf8               (Z)Ljava/lang/String;",
                "  #1370 = Utf8               d",
                "  #1371 = Utf8               D",
                "  #1372 = Utf8               intern",
                "  #1373 = Utf8               single",
                "  #1374 = Utf8               multiple",
                "  #1375 = Utf8               copied",
                "  #1376 = Utf8               ([BIIBI)V",
                "  #1377 = Utf8               srcPos",
                "  #1378 = Utf8               sig",
                "  #1379 = Utf8               Ljava/lang/Void;",
                "  #1380 = Class              #1381        // java/lang/Void",
                "  #1381 = Utf8               java/lang/Void",
                "  #1382 = Utf8               asb",
                "  #1383 = Utf8               checkOffset",
                "  #1384 = Utf8               begin",
                "  #1385 = Utf8               end",
                "  #1386 = Utf8               valueOfCodePoint",
                "  #1387 = Utf8               codePoint",
                "  #1388 = Utf8               describeConstable",
                "  #1389 = Utf8               ()Ljava/util/Optional;",
                "  #1390 = Utf8               ()Ljava/util/Optional<Ljava/lang/String;>;",
                "  #1391 = Utf8               lookup",
                "  #1392 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;",
                "  #1393 = Utf8               (Ljava/lang/Object;)I",
                "  #1394 = Utf8               MethodParameters",
                "  #1395 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Object;",
                "  #1396 = Class              #1397        // java/lang/ReflectiveOperationException",
                "  #1397 = Utf8               java/lang/ReflectiveOperationException",
                "  #1398 = Utf8               lambda$stripIndent$3",
                "  #1399 = Utf8               (ILjava/lang/String;)Ljava/lang/String;",
                "  #1400 = Utf8               firstNonWhitespace",
                "  #1401 = Utf8               lastNonWhitespace",
                "  #1402 = Utf8               incidentalWhitespace",
                "  #1403 = Utf8               lambda$indent$2",
                "  #1404 = Utf8               lambda$indent$1",
                "  #1405 = Utf8               lambda$indent$0",
                "  #1406 = Utf8               <clinit>",
                "  #1407 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;Ljava/lang/constant/Constable;Ljava/lang/constant/ConstantDesc;",
                "  #1408 = Utf8               SourceFile",
                "  #1409 = Utf8               String.java",
                "  #1410 = Utf8               NestMembers",
                "  #1411 = Utf8               BootstrapMethods",
                "  #1412 = MethodType         #79          //  (Ljava/lang/Object;)Ljava/lang/Object;",
                "  #1413 = MethodHandle       6:#1414      // REF_invokeStatic java/lang/String.lambda$indent$0:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1414 = Methodref          #10.#1415    // java/lang/String.lambda$indent$0:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1415 = NameAndType        #1405:#1284  // lambda$indent$0:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "  #1416 = MethodType         #722         //  (Ljava/lang/String;)Ljava/lang/String;",
                "  #1417 = MethodHandle       6:#1418      // REF_invokeStatic java/lang/String.lambda$indent$1:(Ljava/lang/String;)Ljava/lang/String;",
                "  #1418 = Methodref          #10.#1419    // java/lang/String.lambda$indent$1:(Ljava/lang/String;)Ljava/lang/String;",
                "  #1419 = NameAndType        #1404:#722   // lambda$indent$1:(Ljava/lang/String;)Ljava/lang/String;",
                "  #1420 = MethodHandle       6:#1421      // REF_invokeStatic java/lang/String.lambda$indent$2:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1421 = Methodref          #10.#1422    // java/lang/String.lambda$indent$2:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1422 = NameAndType        #1403:#1399  // lambda$indent$2:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1423 = MethodHandle       6:#1424      // REF_invokeStatic java/lang/String.lambda$stripIndent$3:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1424 = Methodref          #10.#1425    // java/lang/String.lambda$stripIndent$3:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1425 = NameAndType        #1398:#1399  // lambda$stripIndent$3:(ILjava/lang/String;)Ljava/lang/String;",
                "  #1426 = MethodHandle       6:#1427      // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #1427 = Methodref          #1428.#1429  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #1428 = Class              #1430        // java/lang/invoke/LambdaMetafactory",
                "  #1429 = NameAndType        #1431:#1432  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #1430 = Utf8               java/lang/invoke/LambdaMetafactory",
                "  #1431 = Utf8               metafactory",
                "  #1432 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #1433 = Utf8               InnerClasses",
                "  #1434 = Utf8               CharsSpliterator",
                "  #1435 = Utf8               OfInt",
                "  #1436 = Utf8               CodePointsSpliterator",
                "  #1437 = Class              #1438        // java/lang/invoke/MethodHandles$Lookup",
                "  #1438 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "  #1439 = Class              #1440        // java/lang/invoke/MethodHandles",
                "  #1440 = Utf8               java/lang/invoke/MethodHandles",
                "  #1441 = Utf8               Lookup",
                "  #1442 = Utf8               CaseInsensitiveComparator"
        );
    }
}
