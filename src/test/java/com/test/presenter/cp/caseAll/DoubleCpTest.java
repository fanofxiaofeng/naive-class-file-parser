package com.test.presenter.cp.caseAll;

import com.study.constants.ConstantKind;
import com.test.annotations.ExpectedConstantKind;
import com.test.annotations.GeneratedBy;
import com.test.presenter.cp.ConstantPoolPresenterTestBase;
import com.test.presenter.cp.ConstantPoolTestGenerator;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

@GeneratedBy(ConstantPoolTestGenerator.class)
public class DoubleCpTest extends ConstantPoolPresenterTestBase {

    @BeforeClass
    public static void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.Double"));
    }

    @ExpectedConstantKind(ConstantKind.CONSTANT_Class)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Fieldref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Methodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_String)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Integer)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Long)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Double)
    @ExpectedConstantKind(ConstantKind.CONSTANT_NameAndType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Utf8)
    @Test
    public void test() {
        expectedLines = List.of(
                "    #1 = Class              #2            // java/lang/Double",
                "    #2 = Utf8               java/lang/Double",
                "    #3 = Class              #4            // java/lang/Byte",
                "    #4 = Utf8               java/lang/Byte",
                "    #5 = Methodref          #6.#7         // jdk/internal/math/DoubleToDecimal.toString:(D)Ljava/lang/String;",
                "    #6 = Class              #8            // jdk/internal/math/DoubleToDecimal",
                "    #7 = NameAndType        #9:#10        // toString:(D)Ljava/lang/String;",
                "    #8 = Utf8               jdk/internal/math/DoubleToDecimal",
                "    #9 = Utf8               toString",
                "   #10 = Utf8               (D)Ljava/lang/String;",
                "   #11 = Methodref          #1.#12        // java/lang/Double.isFinite:(D)Z",
                "   #12 = NameAndType        #13:#14       // isFinite:(D)Z",
                "   #13 = Utf8               isFinite",
                "   #14 = Utf8               (D)Z",
                "   #15 = Methodref          #1.#7         // java/lang/Double.toString:(D)Ljava/lang/String;",
                "   #16 = Class              #17           // java/lang/StringBuilder",
                "   #17 = Utf8               java/lang/StringBuilder",
                "   #18 = Methodref          #16.#19       // java/lang/StringBuilder.\"<init>\":(I)V",
                "   #19 = NameAndType        #20:#21       // \"<init>\":(I)V",
                "   #20 = Utf8               <init>",
                "   #21 = Utf8               (I)V",
                "   #22 = Methodref          #23.#24       // java/lang/Math.copySign:(DD)D",
                "   #23 = Class              #25           // java/lang/Math",
                "   #24 = NameAndType        #26:#27       // copySign:(DD)D",
                "   #25 = Utf8               java/lang/Math",
                "   #26 = Utf8               copySign",
                "   #27 = Utf8               (DD)D",
                "   #28 = Double             -1.0d",
                "   #30 = String             #31           // -",
                "   #31 = Utf8               -",
                "   #32 = Methodref          #16.#33       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #33 = NameAndType        #34:#35       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #34 = Utf8               append",
                "   #35 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "   #36 = String             #37           // 0x",
                "   #37 = Utf8               0x",
                "   #38 = Methodref          #23.#39       // java/lang/Math.abs:(D)D",
                "   #39 = NameAndType        #40:#41       // abs:(D)D",
                "   #40 = Utf8               abs",
                "   #41 = Utf8               (D)D",
                "   #42 = String             #43           // 0.0p0",
                "   #43 = Utf8               0.0p0",
                "   #44 = Double             2.2250738585072014E-308d",
                "   #46 = Methodref          #1.#47        // java/lang/Double.doubleToLongBits:(D)J",
                "   #47 = NameAndType        #48:#49       // doubleToLongBits:(D)J",
                "   #48 = Utf8               doubleToLongBits",
                "   #49 = Utf8               (D)J",
                "   #50 = Class              #51           // jdk/internal/math/DoubleConsts",
                "   #51 = Utf8               jdk/internal/math/DoubleConsts",
                "   #52 = Long               4503599627370495l",
                "   #54 = Long               1152921504606846976l",
                "   #56 = String             #57           // 0.",
                "   #57 = Utf8               0.",
                "   #58 = String             #59           // 1.",
                "   #59 = Utf8               1.",
                "   #60 = Methodref          #61.#62       // java/lang/Long.toHexString:(J)Ljava/lang/String;",
                "   #61 = Class              #63           // java/lang/Long",
                "   #62 = NameAndType        #64:#65       // toHexString:(J)Ljava/lang/String;",
                "   #63 = Utf8               java/lang/Long",
                "   #64 = Utf8               toHexString",
                "   #65 = Utf8               (J)Ljava/lang/String;",
                "   #66 = Methodref          #67.#68       // java/lang/String.substring:(II)Ljava/lang/String;",
                "   #67 = Class              #69           // java/lang/String",
                "   #68 = NameAndType        #70:#71       // substring:(II)Ljava/lang/String;",
                "   #69 = Utf8               java/lang/String",
                "   #70 = Utf8               substring",
                "   #71 = Utf8               (II)Ljava/lang/String;",
                "   #72 = String             #73           // 0000000000000",
                "   #73 = Utf8               0000000000000",
                "   #74 = Methodref          #67.#75       // java/lang/String.equals:(Ljava/lang/Object;)Z",
                "   #75 = NameAndType        #76:#77       // equals:(Ljava/lang/Object;)Z",
                "   #76 = Utf8               equals",
                "   #77 = Utf8               (Ljava/lang/Object;)Z",
                "   #78 = String             #79           // 0",
                "   #79 = Utf8               0",
                "   #80 = String             #81           // 0{1,12}$",
                "   #81 = Utf8               0{1,12}$",
                "   #82 = String             #83           //",
                "   #83 = Utf8",
                "   #84 = Methodref          #67.#85       // java/lang/String.replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "   #85 = NameAndType        #86:#87       // replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "   #86 = Utf8               replaceFirst",
                "   #87 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "   #88 = Methodref          #16.#89       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;",
                "   #89 = NameAndType        #34:#90       // append:(C)Ljava/lang/StringBuilder;",
                "   #90 = Utf8               (C)Ljava/lang/StringBuilder;",
                "   #91 = Methodref          #23.#92       // java/lang/Math.getExponent:(D)I",
                "   #92 = NameAndType        #93:#94       // getExponent:(D)I",
                "   #93 = Utf8               getExponent",
                "   #94 = Utf8               (D)I",
                "   #95 = Methodref          #16.#96       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;",
                "   #96 = NameAndType        #34:#97       // append:(I)Ljava/lang/StringBuilder;",
                "   #97 = Utf8               (I)Ljava/lang/StringBuilder;",
                "   #98 = Methodref          #16.#99       // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "   #99 = NameAndType        #9:#100       // toString:()Ljava/lang/String;",
                "  #100 = Utf8               ()Ljava/lang/String;",
                "  #101 = Methodref          #1.#102       // java/lang/Double.parseDouble:(Ljava/lang/String;)D",
                "  #102 = NameAndType        #103:#104     // parseDouble:(Ljava/lang/String;)D",
                "  #103 = Utf8               parseDouble",
                "  #104 = Utf8               (Ljava/lang/String;)D",
                "  #105 = Methodref          #1.#106       // java/lang/Double.\"<init>\":(D)V",
                "  #106 = NameAndType        #20:#107      // \"<init>\":(D)V",
                "  #107 = Utf8               (D)V",
                "  #108 = Methodref          #109.#102     // jdk/internal/math/FloatingDecimal.parseDouble:(Ljava/lang/String;)D",
                "  #109 = Class              #110          // jdk/internal/math/FloatingDecimal",
                "  #110 = Utf8               jdk/internal/math/FloatingDecimal",
                "  #111 = Double             1.7976931348623157E308d",
                "  #113 = Methodref          #114.#115     // java/lang/Number.\"<init>\":()V",
                "  #114 = Class              #116          // java/lang/Number",
                "  #115 = NameAndType        #20:#117      // \"<init>\":()V",
                "  #116 = Utf8               java/lang/Number",
                "  #117 = Utf8               ()V",
                "  #118 = Fieldref           #1.#119       // java/lang/Double.value:D",
                "  #119 = NameAndType        #120:#121     // value:D",
                "  #120 = Utf8               value",
                "  #121 = Utf8               D",
                "  #122 = Methodref          #1.#123       // java/lang/Double.isNaN:(D)Z",
                "  #123 = NameAndType        #124:#14      // isNaN:(D)Z",
                "  #124 = Utf8               isNaN",
                "  #125 = Methodref          #1.#126       // java/lang/Double.isInfinite:(D)Z",
                "  #126 = NameAndType        #127:#14      // isInfinite:(D)Z",
                "  #127 = Utf8               isInfinite",
                "  #128 = Methodref          #1.#129       // java/lang/Double.hashCode:(D)I",
                "  #129 = NameAndType        #130:#94      // hashCode:(D)I",
                "  #130 = Utf8               hashCode",
                "  #131 = Methodref          #61.#132      // java/lang/Long.hashCode:(J)I",
                "  #132 = NameAndType        #130:#133     // hashCode:(J)I",
                "  #133 = Utf8               (J)I",
                "  #134 = Methodref          #1.#135       // java/lang/Double.doubleToRawLongBits:(D)J",
                "  #135 = NameAndType        #136:#49      // doubleToRawLongBits:(D)J",
                "  #136 = Utf8               doubleToRawLongBits",
                "  #137 = Long               9221120237041090560l",
                "  #139 = Methodref          #1.#140       // java/lang/Double.compare:(DD)I",
                "  #140 = NameAndType        #141:#142     // compare:(DD)I",
                "  #141 = Utf8               compare",
                "  #142 = Utf8               (DD)I",
                "  #143 = Methodref          #23.#144      // java/lang/Math.max:(DD)D",
                "  #144 = NameAndType        #145:#27      // max:(DD)D",
                "  #145 = Utf8               max",
                "  #146 = Methodref          #23.#147      // java/lang/Math.min:(DD)D",
                "  #147 = NameAndType        #148:#27      // min:(DD)D",
                "  #148 = Utf8               min",
                "  #149 = Methodref          #150.#151     // java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;",
                "  #150 = Class              #152          // java/util/Optional",
                "  #151 = NameAndType        #153:#154     // of:(Ljava/lang/Object;)Ljava/util/Optional;",
                "  #152 = Utf8               java/util/Optional",
                "  #153 = Utf8               of",
                "  #154 = Utf8               (Ljava/lang/Object;)Ljava/util/Optional;",
                "  #155 = Methodref          #1.#156       // java/lang/Double.compareTo:(Ljava/lang/Double;)I",
                "  #156 = NameAndType        #157:#158     // compareTo:(Ljava/lang/Double;)I",
                "  #157 = Utf8               compareTo",
                "  #158 = Utf8               (Ljava/lang/Double;)I",
                "  #159 = Methodref          #1.#160       // java/lang/Double.resolveConstantDesc:(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Double;",
                "  #160 = NameAndType        #161:#162     // resolveConstantDesc:(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Double;",
                "  #161 = Utf8               resolveConstantDesc",
                "  #162 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Double;",
                "  #163 = String             #164          // double",
                "  #164 = Utf8               double",
                "  #165 = Methodref          #166.#167     // java/lang/Class.getPrimitiveClass:(Ljava/lang/String;)Ljava/lang/Class;",
                "  #166 = Class              #168          // java/lang/Class",
                "  #167 = NameAndType        #169:#170     // getPrimitiveClass:(Ljava/lang/String;)Ljava/lang/Class;",
                "  #168 = Utf8               java/lang/Class",
                "  #169 = Utf8               getPrimitiveClass",
                "  #170 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;",
                "  #171 = Fieldref           #1.#172       // java/lang/Double.TYPE:Ljava/lang/Class;",
                "  #172 = NameAndType        #173:#174     // TYPE:Ljava/lang/Class;",
                "  #173 = Utf8               TYPE",
                "  #174 = Utf8               Ljava/lang/Class;",
                "  #175 = Class              #176          // java/lang/Comparable",
                "  #176 = Utf8               java/lang/Comparable",
                "  #177 = Class              #178          // java/lang/constant/Constable",
                "  #178 = Utf8               java/lang/constant/Constable",
                "  #179 = Class              #180          // java/lang/constant/ConstantDesc",
                "  #180 = Utf8               java/lang/constant/ConstantDesc",
                "  #181 = Utf8               POSITIVE_INFINITY",
                "  #182 = Utf8               ConstantValue",
                "  #183 = Double             Infinityd",
                "  #185 = Utf8               NEGATIVE_INFINITY",
                "  #186 = Double             -Infinityd",
                "  #188 = Utf8               NaN",
                "  #189 = Double             NaNd",
                "  #191 = Utf8               MAX_VALUE",
                "  #192 = Utf8               MIN_NORMAL",
                "  #193 = Utf8               MIN_VALUE",
                "  #194 = Double             4.9E-324d",
                "  #196 = Utf8               SIZE",
                "  #197 = Utf8               I",
                "  #198 = Integer            64",
                "  #199 = Utf8               PRECISION",
                "  #200 = Integer            53",
                "  #201 = Utf8               MAX_EXPONENT",
                "  #202 = Integer            1023",
                "  #203 = Utf8               MIN_EXPONENT",
                "  #204 = Integer            -1022",
                "  #205 = Utf8               BYTES",
                "  #206 = Integer            8",
                "  #207 = Utf8               Signature",
                "  #208 = Utf8               Ljava/lang/Class<Ljava/lang/Double;>;",
                "  #209 = Utf8               serialVersionUID",
                "  #210 = Utf8               J",
                "  #211 = Long               -9172774392245257468l",
                "  #213 = Utf8               Code",
                "  #214 = Utf8               LineNumberTable",
                "  #215 = Utf8               LocalVariableTable",
                "  #216 = Utf8               d",
                "  #217 = Utf8               subnormal",
                "  #218 = Utf8               Z",
                "  #219 = Utf8               signifBits",
                "  #220 = Utf8               signif",
                "  #221 = Utf8               Ljava/lang/String;",
                "  #222 = Utf8               answer",
                "  #223 = Utf8               Ljava/lang/StringBuilder;",
                "  #224 = Utf8               StackMapTable",
                "  #225 = Utf8               valueOf",
                "  #226 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;",
                "  #227 = Utf8               s",
                "  #228 = Utf8               Exceptions",
                "  #229 = Class              #230          // java/lang/NumberFormatException",
                "  #230 = Utf8               java/lang/NumberFormatException",
                "  #231 = Utf8               (D)Ljava/lang/Double;",
                "  #232 = Utf8               RuntimeVisibleAnnotations",
                "  #233 = Utf8               Ljdk/internal/vm/annotation/IntrinsicCandidate;",
                "  #234 = Utf8               v",
                "  #235 = Utf8               this",
                "  #236 = Utf8               Ljava/lang/Double;",
                "  #237 = Utf8               Deprecated",
                "  #238 = Utf8               Ljava/lang/Deprecated;",
                "  #239 = Utf8               since",
                "  #240 = Utf8               9",
                "  #241 = Utf8               forRemoval",
                "  #242 = Integer            1",
                "  #243 = Utf8               (Ljava/lang/String;)V",
                "  #244 = Utf8               ()Z",
                "  #245 = Utf8               byteValue",
                "  #246 = Utf8               ()B",
                "  #247 = Utf8               shortValue",
                "  #248 = Utf8               ()S",
                "  #249 = Utf8               intValue",
                "  #250 = Utf8               ()I",
                "  #251 = Utf8               longValue",
                "  #252 = Utf8               ()J",
                "  #253 = Utf8               floatValue",
                "  #254 = Utf8               ()F",
                "  #255 = Utf8               doubleValue",
                "  #256 = Utf8               ()D",
                "  #257 = Utf8               obj",
                "  #258 = Utf8               Ljava/lang/Object;",
                "  #259 = Utf8               longBitsToDouble",
                "  #260 = Utf8               (J)D",
                "  #261 = Utf8               anotherDouble",
                "  #262 = Utf8               d1",
                "  #263 = Utf8               d2",
                "  #264 = Utf8               thisBits",
                "  #265 = Utf8               anotherBits",
                "  #266 = Utf8               sum",
                "  #267 = Utf8               a",
                "  #268 = Utf8               b",
                "  #269 = Utf8               describeConstable",
                "  #270 = Utf8               ()Ljava/util/Optional;",
                "  #271 = Utf8               ()Ljava/util/Optional<Ljava/lang/Double;>;",
                "  #272 = Utf8               lookup",
                "  #273 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;",
                "  #274 = Utf8               (Ljava/lang/Object;)I",
                "  #275 = Utf8               MethodParameters",
                "  #276 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Object;",
                "  #277 = Class              #278          // java/lang/ReflectiveOperationException",
                "  #278 = Utf8               java/lang/ReflectiveOperationException",
                "  #279 = Utf8               <clinit>",
                "  #280 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Ljava/lang/Double;>;Ljava/lang/constant/Constable;Ljava/lang/constant/ConstantDesc;",
                "  #281 = Utf8               SourceFile",
                "  #282 = Utf8               Double.java",
                "  #283 = Utf8               Ljdk/internal/ValueBased;",
                "  #284 = Utf8               InnerClasses",
                "  #285 = Class              #286          // java/lang/invoke/MethodHandles$Lookup",
                "  #286 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "  #287 = Class              #288          // java/lang/invoke/MethodHandles",
                "  #288 = Utf8               java/lang/invoke/MethodHandles",
                "  #289 = Utf8               Lookup"
        );
    }
}
