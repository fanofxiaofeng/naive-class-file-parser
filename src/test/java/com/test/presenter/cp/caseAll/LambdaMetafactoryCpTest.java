package com.test.presenter.cp.caseAll;

import com.study.constants.ConstantKind;
import com.test.annotations.ExpectedConstantKind;
import com.test.annotations.GeneratedBy;
import com.test.presenter.cp.ConstantPoolPresenterTestBase;
import com.test.presenter.cp.ConstantPoolTestGenerator;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

@GeneratedBy(ConstantPoolTestGenerator.class)
public class LambdaMetafactoryCpTest extends ConstantPoolPresenterTestBase {

    @BeforeClass
    public static void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.invoke.LambdaMetafactory"));
    }

    @ExpectedConstantKind(ConstantKind.CONSTANT_Class)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Fieldref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Methodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_String)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Integer)
    @ExpectedConstantKind(ConstantKind.CONSTANT_NameAndType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Utf8)
    @Test
    public void test() {
        expectedLines = List.of(
                "    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V",
                "    #2 = Class              #4            // java/lang/Object",
                "    #3 = NameAndType        #5:#6         // \"<init>\":()V",
                "    #4 = Utf8               java/lang/Object",
                "    #5 = Utf8               <init>",
                "    #6 = Utf8               ()V",
                "    #7 = Class              #8            // java/lang/invoke/InnerClassLambdaMetafactory",
                "    #8 = Utf8               java/lang/invoke/InnerClassLambdaMetafactory",
                "    #9 = Methodref          #10.#11       // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #10 = Class              #12           // java/util/Objects",
                "   #11 = NameAndType        #13:#14       // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #12 = Utf8               java/util/Objects",
                "   #13 = Utf8               requireNonNull",
                "   #14 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;",
                "   #15 = Class              #16           // java/lang/invoke/MethodHandles$Lookup",
                "   #16 = Utf8               java/lang/invoke/MethodHandles$Lookup",
                "   #17 = Class              #18           // java/lang/invoke/MethodType",
                "   #18 = Utf8               java/lang/invoke/MethodType",
                "   #19 = Class              #20           // java/lang/String",
                "   #20 = Utf8               java/lang/String",
                "   #21 = Class              #22           // java/lang/invoke/MethodHandle",
                "   #22 = Utf8               java/lang/invoke/MethodHandle",
                "   #23 = Fieldref           #24.#25       // java/lang/invoke/LambdaMetafactory.EMPTY_CLASS_ARRAY:[Ljava/lang/Class;",
                "   #24 = Class              #26           // java/lang/invoke/LambdaMetafactory",
                "   #25 = NameAndType        #27:#28       // EMPTY_CLASS_ARRAY:[Ljava/lang/Class;",
                "   #26 = Utf8               java/lang/invoke/LambdaMetafactory",
                "   #27 = Utf8               EMPTY_CLASS_ARRAY",
                "   #28 = Utf8               [Ljava/lang/Class;",
                "   #29 = Fieldref           #24.#30       // java/lang/invoke/LambdaMetafactory.EMPTY_MT_ARRAY:[Ljava/lang/invoke/MethodType;",
                "   #30 = NameAndType        #31:#32       // EMPTY_MT_ARRAY:[Ljava/lang/invoke/MethodType;",
                "   #31 = Utf8               EMPTY_MT_ARRAY",
                "   #32 = Utf8               [Ljava/lang/invoke/MethodType;",
                "   #33 = Methodref          #7.#34        // java/lang/invoke/InnerClassLambdaMetafactory.\"<init>\":(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/invoke/MethodType;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)V",
                "   #34 = NameAndType        #5:#35        // \"<init>\":(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/invoke/MethodType;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)V",
                "   #35 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/invoke/MethodType;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)V",
                "   #36 = Methodref          #37.#38       // java/lang/invoke/AbstractValidatingLambdaMetafactory.validateMetafactoryArgs:()V",
                "   #37 = Class              #39           // java/lang/invoke/AbstractValidatingLambdaMetafactory",
                "   #38 = NameAndType        #40:#6        // validateMetafactoryArgs:()V",
                "   #39 = Utf8               java/lang/invoke/AbstractValidatingLambdaMetafactory",
                "   #40 = Utf8               validateMetafactoryArgs",
                "   #41 = Methodref          #37.#42       // java/lang/invoke/AbstractValidatingLambdaMetafactory.buildCallSite:()Ljava/lang/invoke/CallSite;",
                "   #42 = NameAndType        #43:#44       // buildCallSite:()Ljava/lang/invoke/CallSite;",
                "   #43 = Utf8               buildCallSite",
                "   #44 = Utf8               ()Ljava/lang/invoke/CallSite;",
                "   #45 = Methodref          #24.#46       // java/lang/invoke/LambdaMetafactory.extractArg:([Ljava/lang/Object;ILjava/lang/Class;)Ljava/lang/Object;",
                "   #46 = NameAndType        #47:#48       // extractArg:([Ljava/lang/Object;ILjava/lang/Class;)Ljava/lang/Object;",
                "   #47 = Utf8               extractArg",
                "   #48 = Utf8               ([Ljava/lang/Object;ILjava/lang/Class;)Ljava/lang/Object;",
                "   #49 = Class              #50           // java/lang/Integer",
                "   #50 = Utf8               java/lang/Integer",
                "   #51 = Methodref          #49.#52       // java/lang/Integer.intValue:()I",
                "   #52 = NameAndType        #53:#54       // intValue:()I",
                "   #53 = Utf8               intValue",
                "   #54 = Utf8               ()I",
                "   #55 = Class              #56           // java/lang/IllegalArgumentException",
                "   #56 = Utf8               java/lang/IllegalArgumentException",
                "   #57 = String             #58           // negative argument count",
                "   #58 = Utf8               negative argument count",
                "   #59 = Methodref          #55.#60       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "   #60 = NameAndType        #5:#61        // \"<init>\":(Ljava/lang/String;)V",
                "   #61 = Utf8               (Ljava/lang/String;)V",
                "   #62 = Class              #63           // java/lang/Class",
                "   #63 = Utf8               java/lang/Class",
                "   #64 = Methodref          #24.#65       // java/lang/invoke/LambdaMetafactory.extractArgs:([Ljava/lang/Object;ILjava/lang/Class;I)[Ljava/lang/Object;",
                "   #65 = NameAndType        #66:#67       // extractArgs:([Ljava/lang/Object;ILjava/lang/Class;I)[Ljava/lang/Object;",
                "   #66 = Utf8               extractArgs",
                "   #67 = Utf8               ([Ljava/lang/Object;ILjava/lang/Class;I)[Ljava/lang/Object;",
                "   #68 = Class              #28           // \"[Ljava/lang/Class;\"",
                "   #69 = Class              #32           // \"[Ljava/lang/invoke/MethodType;\"",
                "   #70 = String             #71           // too many arguments",
                "   #71 = Utf8               too many arguments",
                "   #72 = Class              #73           // java/io/Serializable",
                "   #73 = Utf8               java/io/Serializable",
                "   #74 = Methodref          #17.#75       // java/lang/invoke/MethodType.returnType:()Ljava/lang/Class;",
                "   #75 = NameAndType        #76:#77       // returnType:()Ljava/lang/Class;",
                "   #76 = Utf8               returnType",
                "   #77 = Utf8               ()Ljava/lang/Class;",
                "   #78 = Methodref          #62.#79       // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z",
                "   #79 = NameAndType        #80:#81       // isAssignableFrom:(Ljava/lang/Class;)Z",
                "   #80 = Utf8               isAssignableFrom",
                "   #81 = Utf8               (Ljava/lang/Class;)Z",
                "   #82 = Methodref          #83.#84       // java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #83 = Class              #85           // java/util/Arrays",
                "   #84 = NameAndType        #86:#87       // copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #85 = Utf8               java/util/Arrays",
                "   #86 = Utf8               copyOf",
                "   #87 = Utf8               ([Ljava/lang/Object;I)[Ljava/lang/Object;",
                "   #88 = String             #89           // missing argument",
                "   #89 = Utf8               missing argument",
                "   #90 = Methodref          #62.#91       // java/lang/Class.isInstance:(Ljava/lang/Object;)Z",
                "   #91 = NameAndType        #92:#93       // isInstance:(Ljava/lang/Object;)Z",
                "   #92 = Utf8               isInstance",
                "   #93 = Utf8               (Ljava/lang/Object;)Z",
                "   #94 = String             #95           // argument has wrong type",
                "   #95 = Utf8               argument has wrong type",
                "   #96 = Methodref          #62.#97       // java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #97 = NameAndType        #98:#14       // cast:(Ljava/lang/Object;)Ljava/lang/Object;",
                "   #98 = Utf8               cast",
                "   #99 = Methodref          #100.#101     // java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #100 = Class              #102          // java/lang/reflect/Array",
                "  #101 = NameAndType        #103:#104     // newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #102 = Utf8               java/lang/reflect/Array",
                "  #103 = Utf8               newInstance",
                "  #104 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Object;",
                "  #105 = Class              #106          // \"[Ljava/lang/Object;\"",
                "  #106 = Utf8               [Ljava/lang/Object;",
                "  #107 = Utf8               FLAG_SERIALIZABLE",
                "  #108 = Utf8               I",
                "  #109 = Utf8               ConstantValue",
                "  #110 = Integer            1",
                "  #111 = Utf8               FLAG_MARKERS",
                "  #112 = Integer            2",
                "  #113 = Utf8               FLAG_BRIDGES",
                "  #114 = Integer            4",
                "  #115 = Utf8               Signature",
                "  #116 = Utf8               [Ljava/lang/Class<*>;",
                "  #117 = Utf8               Code",
                "  #118 = Utf8               LineNumberTable",
                "  #119 = Utf8               LocalVariableTable",
                "  #120 = Utf8               this",
                "  #121 = Utf8               Ljava/lang/invoke/LambdaMetafactory;",
                "  #122 = Utf8               metafactory",
                "  #123 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",
                "  #124 = Utf8               caller",
                "  #125 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;",
                "  #126 = Utf8               interfaceMethodName",
                "  #127 = Utf8               Ljava/lang/String;",
                "  #128 = Utf8               factoryType",
                "  #129 = Utf8               Ljava/lang/invoke/MethodType;",
                "  #130 = Utf8               interfaceMethodType",
                "  #131 = Utf8               implementation",
                "  #132 = Utf8               Ljava/lang/invoke/MethodHandle;",
                "  #133 = Utf8               dynamicMethodType",
                "  #134 = Utf8               mf",
                "  #135 = Utf8               Ljava/lang/invoke/AbstractValidatingLambdaMetafactory;",
                "  #136 = Utf8               Exceptions",
                "  #137 = Class              #138          // java/lang/invoke/LambdaConversionException",
                "  #138 = Utf8               java/lang/invoke/LambdaConversionException",
                "  #139 = Utf8               altMetafactory",
                "  #140 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;",
                "  #141 = Utf8               altInterfaceCount",
                "  #142 = Utf8               altMethodCount",
                "  #143 = Utf8               c",
                "  #144 = Utf8               Ljava/lang/Class;",
                "  #145 = Utf8               foundSerializableSupertype",
                "  #146 = Utf8               Z",
                "  #147 = Utf8               args",
                "  #148 = Utf8               argIndex",
                "  #149 = Utf8               flags",
                "  #150 = Utf8               altInterfaces",
                "  #151 = Utf8               altMethods",
                "  #152 = Utf8               isSerializable",
                "  #153 = Utf8               LocalVariableTypeTable",
                "  #154 = Utf8               Ljava/lang/Class<*>;",
                "  #155 = Utf8               StackMapTable",
                "  #156 = Utf8               index",
                "  #157 = Utf8               type",
                "  #158 = Utf8               result",
                "  #159 = Utf8               Ljava/lang/Object;",
                "  #160 = Utf8               Ljava/lang/Class<TT;>;",
                "  #161 = Utf8               <T:Ljava/lang/Object;>([Ljava/lang/Object;ILjava/lang/Class<TT;>;)TT;",
                "  #162 = Utf8               i",
                "  #163 = Utf8               count",
                "  #164 = Utf8               [TT;",
                "  #165 = Utf8               <T:Ljava/lang/Object;>([Ljava/lang/Object;ILjava/lang/Class<TT;>;I)[TT;",
                "  #166 = Utf8               <clinit>",
                "  #167 = Utf8               SourceFile",
                "  #168 = Utf8               LambdaMetafactory.java",
                "  #169 = Utf8               InnerClasses",
                "  #170 = Class              #171          // java/lang/invoke/MethodHandles",
                "  #171 = Utf8               java/lang/invoke/MethodHandles",
                "  #172 = Utf8               Lookup"
        );
    }
}
