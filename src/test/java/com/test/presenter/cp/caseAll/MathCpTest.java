package com.test.presenter.cp.caseAll;

import com.study.constants.ConstantKind;
import com.test.annotations.ExpectedConstantKind;
import com.test.annotations.GeneratedBy;
import com.test.presenter.cp.ConstantPoolPresenterTestBase;
import com.test.presenter.cp.ConstantPoolTestGenerator;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

@GeneratedBy(ConstantPoolTestGenerator.class)
public class MathCpTest extends ConstantPoolPresenterTestBase {

    @BeforeClass
    public static void prepare() throws IOException, ClassNotFoundException {
        buildRealLines(Class.forName("java.lang.Math"));
    }

    @ExpectedConstantKind(ConstantKind.CONSTANT_Class)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Fieldref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Methodref)
    @ExpectedConstantKind(ConstantKind.CONSTANT_String)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Integer)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Float)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Long)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Double)
    @ExpectedConstantKind(ConstantKind.CONSTANT_NameAndType)
    @ExpectedConstantKind(ConstantKind.CONSTANT_Utf8)
    @Test
    public void test() {
        expectedLines = List.of(
                "    #1 = Class              #2            // java/lang/Math",
                "    #2 = Utf8               java/lang/Math",
                "    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V",
                "    #4 = Class              #6            // java/lang/Object",
                "    #5 = NameAndType        #7:#8         // \"<init>\":()V",
                "    #6 = Utf8               java/lang/Object",
                "    #7 = Utf8               <init>",
                "    #8 = Utf8               ()V",
                "    #9 = Methodref          #10.#11       // java/lang/StrictMath.sin:(D)D",
                "   #10 = Class              #12           // java/lang/StrictMath",
                "   #11 = NameAndType        #13:#14       // sin:(D)D",
                "   #12 = Utf8               java/lang/StrictMath",
                "   #13 = Utf8               sin",
                "   #14 = Utf8               (D)D",
                "   #15 = Methodref          #10.#16       // java/lang/StrictMath.cos:(D)D",
                "   #16 = NameAndType        #17:#14       // cos:(D)D",
                "   #17 = Utf8               cos",
                "   #18 = Methodref          #10.#19       // java/lang/StrictMath.tan:(D)D",
                "   #19 = NameAndType        #20:#14       // tan:(D)D",
                "   #20 = Utf8               tan",
                "   #21 = Methodref          #10.#22       // java/lang/StrictMath.asin:(D)D",
                "   #22 = NameAndType        #23:#14       // asin:(D)D",
                "   #23 = Utf8               asin",
                "   #24 = Methodref          #10.#25       // java/lang/StrictMath.acos:(D)D",
                "   #25 = NameAndType        #26:#14       // acos:(D)D",
                "   #26 = Utf8               acos",
                "   #27 = Methodref          #10.#28       // java/lang/StrictMath.atan:(D)D",
                "   #28 = NameAndType        #29:#14       // atan:(D)D",
                "   #29 = Utf8               atan",
                "   #30 = Double             0.017453292519943295d",
                "   #32 = Double             57.29577951308232d",
                "   #34 = Methodref          #10.#35       // java/lang/StrictMath.exp:(D)D",
                "   #35 = NameAndType        #36:#14       // exp:(D)D",
                "   #36 = Utf8               exp",
                "   #37 = Methodref          #10.#38       // java/lang/StrictMath.log:(D)D",
                "   #38 = NameAndType        #39:#14       // log:(D)D",
                "   #39 = Utf8               log",
                "   #40 = Methodref          #10.#41       // java/lang/StrictMath.log10:(D)D",
                "   #41 = NameAndType        #42:#14       // log10:(D)D",
                "   #42 = Utf8               log10",
                "   #43 = Methodref          #10.#44       // java/lang/StrictMath.sqrt:(D)D",
                "   #44 = NameAndType        #45:#14       // sqrt:(D)D",
                "   #45 = Utf8               sqrt",
                "   #46 = Methodref          #10.#47       // java/lang/StrictMath.cbrt:(D)D",
                "   #47 = NameAndType        #48:#14       // cbrt:(D)D",
                "   #48 = Utf8               cbrt",
                "   #49 = Methodref          #10.#50       // java/lang/StrictMath.IEEEremainder:(DD)D",
                "   #50 = NameAndType        #51:#52       // IEEEremainder:(DD)D",
                "   #51 = Utf8               IEEEremainder",
                "   #52 = Utf8               (DD)D",
                "   #53 = Methodref          #10.#54       // java/lang/StrictMath.ceil:(D)D",
                "   #54 = NameAndType        #55:#14       // ceil:(D)D",
                "   #55 = Utf8               ceil",
                "   #56 = Methodref          #10.#57       // java/lang/StrictMath.floor:(D)D",
                "   #57 = NameAndType        #58:#14       // floor:(D)D",
                "   #58 = Utf8               floor",
                "   #59 = Methodref          #10.#60       // java/lang/StrictMath.rint:(D)D",
                "   #60 = NameAndType        #61:#14       // rint:(D)D",
                "   #61 = Utf8               rint",
                "   #62 = Methodref          #10.#63       // java/lang/StrictMath.atan2:(DD)D",
                "   #63 = NameAndType        #64:#52       // atan2:(DD)D",
                "   #64 = Utf8               atan2",
                "   #65 = Methodref          #10.#66       // java/lang/StrictMath.pow:(DD)D",
                "   #66 = NameAndType        #67:#52       // pow:(DD)D",
                "   #67 = Utf8               pow",
                "   #68 = Methodref          #69.#70       // java/lang/Float.floatToRawIntBits:(F)I",
                "   #69 = Class              #71           // java/lang/Float",
                "   #70 = NameAndType        #72:#73       // floatToRawIntBits:(F)I",
                "   #71 = Utf8               java/lang/Float",
                "   #72 = Utf8               floatToRawIntBits",
                "   #73 = Utf8               (F)I",
                "   #74 = Class              #75           // jdk/internal/math/FloatConsts",
                "   #75 = Utf8               jdk/internal/math/FloatConsts",
                "   #76 = Integer            2139095040",
                "   #77 = Integer            8388607",
                "   #78 = Integer            8388608",
                "   #79 = Methodref          #80.#81       // java/lang/Double.doubleToRawLongBits:(D)J",
                "   #80 = Class              #82           // java/lang/Double",
                "   #81 = NameAndType        #83:#84       // doubleToRawLongBits:(D)J",
                "   #82 = Utf8               java/lang/Double",
                "   #83 = Utf8               doubleToRawLongBits",
                "   #84 = Utf8               (D)J",
                "   #85 = Class              #86           // jdk/internal/math/DoubleConsts",
                "   #86 = Utf8               jdk/internal/math/DoubleConsts",
                "   #87 = Long               9218868437227405312l",
                "   #89 = Long               1074l",
                "   #91 = Long               -64l",
                "   #93 = Long               4503599627370495l",
                "   #95 = Long               4503599627370496l",
                "   #97 = Fieldref           #98.#99       // java/lang/Math$RandomNumberGeneratorHolder.randomNumberGenerator:Ljava/util/Random;",
                "   #98 = Class              #100          // java/lang/Math$RandomNumberGeneratorHolder",
                "   #99 = NameAndType        #101:#102     // randomNumberGenerator:Ljava/util/Random;",
                "  #100 = Utf8               java/lang/Math$RandomNumberGeneratorHolder",
                "  #101 = Utf8               randomNumberGenerator",
                "  #102 = Utf8               Ljava/util/Random;",
                "  #103 = Methodref          #104.#105     // java/util/Random.nextDouble:()D",
                "  #104 = Class              #106          // java/util/Random",
                "  #105 = NameAndType        #107:#108     // nextDouble:()D",
                "  #106 = Utf8               java/util/Random",
                "  #107 = Utf8               nextDouble",
                "  #108 = Utf8               ()D",
                "  #109 = Class              #110          // java/lang/ArithmeticException",
                "  #110 = Utf8               java/lang/ArithmeticException",
                "  #111 = String             #112          // integer overflow",
                "  #112 = Utf8               integer overflow",
                "  #113 = Methodref          #109.#114     // java/lang/ArithmeticException.\"<init>\":(Ljava/lang/String;)V",
                "  #114 = NameAndType        #7:#115       // \"<init>\":(Ljava/lang/String;)V",
                "  #115 = Utf8               (Ljava/lang/String;)V",
                "  #116 = String             #117          // long overflow",
                "  #117 = Utf8               long overflow",
                "  #118 = Methodref          #1.#119       // java/lang/Math.multiplyExact:(JJ)J",
                "  #119 = NameAndType        #120:#121     // multiplyExact:(JJ)J",
                "  #120 = Utf8               multiplyExact",
                "  #121 = Utf8               (JJ)J",
                "  #122 = Methodref          #1.#123       // java/lang/Math.abs:(J)J",
                "  #123 = NameAndType        #124:#125     // abs:(J)J",
                "  #124 = Utf8               abs",
                "  #125 = Utf8               (J)J",
                "  #126 = Class              #127          // java/lang/Long",
                "  #127 = Utf8               java/lang/Long",
                "  #128 = Long               -9223372036854775808l",
                "  #130 = Long               -1l",
                "  #132 = Class              #133          // java/lang/Integer",
                "  #133 = Utf8               java/lang/Integer",
                "  #134 = Integer            2147483647",
                "  #135 = Long               9223372036854775807l",
                "  #137 = Integer            -2147483648",
                "  #138 = Long               4294967295l",
                "  #140 = Methodref          #1.#141       // java/lang/Math.multiplyHigh:(JJ)J",
                "  #141 = NameAndType        #142:#121     // multiplyHigh:(JJ)J",
                "  #142 = Utf8               multiplyHigh",
                "  #143 = Methodref          #1.#144       // java/lang/Math.floorDiv:(JJ)J",
                "  #144 = NameAndType        #145:#121     // floorDiv:(JJ)J",
                "  #145 = Utf8               floorDiv",
                "  #146 = Methodref          #1.#147       // java/lang/Math.floorMod:(JJ)J",
                "  #147 = NameAndType        #148:#121     // floorMod:(JJ)J",
                "  #148 = Utf8               floorMod",
                "  #149 = Methodref          #1.#150       // java/lang/Math.ceilDiv:(JJ)J",
                "  #150 = NameAndType        #151:#121     // ceilDiv:(JJ)J",
                "  #151 = Utf8               ceilDiv",
                "  #152 = Methodref          #1.#153       // java/lang/Math.ceilMod:(JJ)J",
                "  #153 = NameAndType        #154:#121     // ceilMod:(JJ)J",
                "  #154 = Utf8               ceilMod",
                "  #155 = String             #156          // Overflow to represent absolute value of Integer.MIN_VALUE",
                "  #156 = Utf8               Overflow to represent absolute value of Integer.MIN_VALUE",
                "  #157 = Methodref          #1.#158       // java/lang/Math.abs:(I)I",
                "  #158 = NameAndType        #124:#159     // abs:(I)I",
                "  #159 = Utf8               (I)I",
                "  #160 = String             #161          // Overflow to represent absolute value of Long.MIN_VALUE",
                "  #161 = Utf8               Overflow to represent absolute value of Long.MIN_VALUE",
                "  #162 = Methodref          #69.#163      // java/lang/Float.intBitsToFloat:(I)F",
                "  #163 = NameAndType        #164:#165     // intBitsToFloat:(I)F",
                "  #164 = Utf8               intBitsToFloat",
                "  #165 = Utf8               (I)F",
                "  #166 = Methodref          #80.#167      // java/lang/Double.longBitsToDouble:(J)D",
                "  #167 = NameAndType        #168:#169     // longBitsToDouble:(J)D",
                "  #168 = Utf8               longBitsToDouble",
                "  #169 = Utf8               (J)D",
                "  #170 = Fieldref           #1.#171       // java/lang/Math.negativeZeroFloatBits:J",
                "  #171 = NameAndType        #172:#173     // negativeZeroFloatBits:J",
                "  #172 = Utf8               negativeZeroFloatBits",
                "  #173 = Utf8               J",
                "  #174 = Fieldref           #1.#175       // java/lang/Math.negativeZeroDoubleBits:J",
                "  #175 = NameAndType        #176:#173     // negativeZeroDoubleBits:J",
                "  #176 = Utf8               negativeZeroDoubleBits",
                "  #177 = Class              #178          // java/lang/IllegalArgumentException",
                "  #178 = Utf8               java/lang/IllegalArgumentException",
                "  #179 = Class              #180          // java/lang/StringBuilder",
                "  #180 = Utf8               java/lang/StringBuilder",
                "  #181 = Methodref          #179.#5       // java/lang/StringBuilder.\"<init>\":()V",
                "  #182 = Methodref          #179.#183     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;",
                "  #183 = NameAndType        #184:#185     // append:(I)Ljava/lang/StringBuilder;",
                "  #184 = Utf8               append",
                "  #185 = Utf8               (I)Ljava/lang/StringBuilder;",
                "  #186 = String             #187          //  >",
                "  #187 = Utf8                >",
                "  #188 = Methodref          #179.#189     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "  #189 = NameAndType        #184:#190     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "  #190 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;",
                "  #191 = Methodref          #179.#192     // java/lang/StringBuilder.toString:()Ljava/lang/String;",
                "  #192 = NameAndType        #193:#194     // toString:()Ljava/lang/String;",
                "  #193 = Utf8               toString",
                "  #194 = Utf8               ()Ljava/lang/String;",
                "  #195 = Methodref          #177.#114     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V",
                "  #196 = Methodref          #1.#197       // java/lang/Math.max:(JJ)J",
                "  #197 = NameAndType        #198:#121     // max:(JJ)J",
                "  #198 = Utf8               max",
                "  #199 = Methodref          #1.#200       // java/lang/Math.min:(JJ)J",
                "  #200 = NameAndType        #201:#121     // min:(JJ)J",
                "  #201 = Utf8               min",
                "  #202 = Methodref          #179.#203     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;",
                "  #203 = NameAndType        #184:#204     // append:(J)Ljava/lang/StringBuilder;",
                "  #204 = Utf8               (J)Ljava/lang/StringBuilder;",
                "  #205 = Methodref          #80.#206      // java/lang/Double.isNaN:(D)Z",
                "  #206 = NameAndType        #207:#208     // isNaN:(D)Z",
                "  #207 = Utf8               isNaN",
                "  #208 = Utf8               (D)Z",
                "  #209 = String             #210          // min is NaN",
                "  #210 = Utf8               min is NaN",
                "  #211 = String             #212          // max is NaN",
                "  #212 = Utf8               max is NaN",
                "  #213 = Methodref          #80.#214      // java/lang/Double.compare:(DD)I",
                "  #214 = NameAndType        #215:#216     // compare:(DD)I",
                "  #215 = Utf8               compare",
                "  #216 = Utf8               (DD)I",
                "  #217 = Methodref          #179.#218     // java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;",
                "  #218 = NameAndType        #184:#219     // append:(D)Ljava/lang/StringBuilder;",
                "  #219 = Utf8               (D)Ljava/lang/StringBuilder;",
                "  #220 = Methodref          #1.#221       // java/lang/Math.max:(DD)D",
                "  #221 = NameAndType        #198:#52      // max:(DD)D",
                "  #222 = Methodref          #1.#223       // java/lang/Math.min:(DD)D",
                "  #223 = NameAndType        #201:#52      // min:(DD)D",
                "  #224 = Methodref          #69.#225      // java/lang/Float.isNaN:(F)Z",
                "  #225 = NameAndType        #207:#226     // isNaN:(F)Z",
                "  #226 = Utf8               (F)Z",
                "  #227 = Methodref          #69.#228      // java/lang/Float.compare:(FF)I",
                "  #228 = NameAndType        #215:#229     // compare:(FF)I",
                "  #229 = Utf8               (FF)I",
                "  #230 = Methodref          #179.#231     // java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;",
                "  #231 = NameAndType        #184:#232     // append:(F)Ljava/lang/StringBuilder;",
                "  #232 = Utf8               (F)Ljava/lang/StringBuilder;",
                "  #233 = Methodref          #1.#234       // java/lang/Math.max:(FF)F",
                "  #234 = NameAndType        #198:#235     // max:(FF)F",
                "  #235 = Utf8               (FF)F",
                "  #236 = Methodref          #1.#237       // java/lang/Math.min:(FF)F",
                "  #237 = NameAndType        #201:#235     // min:(FF)F",
                "  #238 = Double             NaNd",
                "  #240 = Methodref          #80.#241      // java/lang/Double.isInfinite:(D)Z",
                "  #241 = NameAndType        #242:#208     // isInfinite:(D)Z",
                "  #242 = Utf8               isInfinite",
                "  #243 = Fieldref           #1.#244       // java/lang/Math.$assertionsDisabled:Z",
                "  #244 = NameAndType        #245:#246     // $assertionsDisabled:Z",
                "  #245 = Utf8               $assertionsDisabled",
                "  #246 = Utf8               Z",
                "  #247 = Class              #248          // java/lang/AssertionError",
                "  #248 = Utf8               java/lang/AssertionError",
                "  #249 = Methodref          #247.#5       // java/lang/AssertionError.\"<init>\":()V",
                "  #250 = Methodref          #80.#251      // java/lang/Double.isFinite:(D)Z",
                "  #251 = NameAndType        #252:#208     // isFinite:(D)Z",
                "  #252 = Utf8               isFinite",
                "  #253 = Class              #254          // java/math/BigDecimal",
                "  #254 = Utf8               java/math/BigDecimal",
                "  #255 = Methodref          #253.#256     // java/math/BigDecimal.\"<init>\":(D)V",
                "  #256 = NameAndType        #7:#257       // \"<init>\":(D)V",
                "  #257 = Utf8               (D)V",
                "  #258 = Methodref          #253.#259     // java/math/BigDecimal.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;",
                "  #259 = NameAndType        #260:#261     // multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;",
                "  #260 = Utf8               multiply",
                "  #261 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;",
                "  #262 = Methodref          #253.#263     // java/math/BigDecimal.doubleValue:()D",
                "  #263 = NameAndType        #264:#108     // doubleValue:()D",
                "  #264 = Utf8               doubleValue",
                "  #265 = Methodref          #253.#266     // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;",
                "  #266 = NameAndType        #267:#261     // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;",
                "  #267 = Utf8               add",
                "  #268 = Methodref          #69.#269      // java/lang/Float.isFinite:(F)Z",
                "  #269 = NameAndType        #252:#226     // isFinite:(F)Z",
                "  #270 = Methodref          #253.#271     // java/math/BigDecimal.floatValue:()F",
                "  #271 = NameAndType        #272:#273     // floatValue:()F",
                "  #272 = Utf8               floatValue",
                "  #273 = Utf8               ()F",
                "  #274 = Methodref          #1.#275       // java/lang/Math.fma:(DDD)D",
                "  #275 = NameAndType        #276:#277     // fma:(DDD)D",
                "  #276 = Utf8               fma",
                "  #277 = Utf8               (DDD)D",
                "  #278 = Methodref          #1.#279       // java/lang/Math.getExponent:(D)I",
                "  #279 = NameAndType        #280:#281     // getExponent:(D)I",
                "  #280 = Utf8               getExponent",
                "  #281 = Utf8               (D)I",
                "  #282 = Methodref          #1.#283       // java/lang/Math.abs:(D)D",
                "  #283 = NameAndType        #124:#14      // abs:(D)D",
                "  #284 = Double             4.9E-324d",
                "  #286 = Methodref          #1.#287       // java/lang/Math.powerOfTwoD:(I)D",
                "  #287 = NameAndType        #288:#289     // powerOfTwoD:(I)D",
                "  #288 = Utf8               powerOfTwoD",
                "  #289 = Utf8               (I)D",
                "  #290 = Methodref          #1.#291       // java/lang/Math.getExponent:(F)I",
                "  #291 = NameAndType        #280:#73      // getExponent:(F)I",
                "  #292 = Methodref          #1.#293       // java/lang/Math.abs:(F)F",
                "  #293 = NameAndType        #124:#294     // abs:(F)F",
                "  #294 = Utf8               (F)F",
                "  #295 = Float              1.4E-45f",
                "  #296 = Methodref          #1.#297       // java/lang/Math.powerOfTwoF:(I)F",
                "  #297 = NameAndType        #298:#165     // powerOfTwoF:(I)F",
                "  #298 = Utf8               powerOfTwoF",
                "  #299 = Methodref          #1.#300       // java/lang/Math.copySign:(DD)D",
                "  #300 = NameAndType        #301:#52      // copySign:(DD)D",
                "  #301 = Utf8               copySign",
                "  #302 = Methodref          #1.#303       // java/lang/Math.copySign:(FF)F",
                "  #303 = NameAndType        #301:#235     // copySign:(FF)F",
                "  #304 = Methodref          #10.#305      // java/lang/StrictMath.sinh:(D)D",
                "  #305 = NameAndType        #306:#14      // sinh:(D)D",
                "  #306 = Utf8               sinh",
                "  #307 = Methodref          #10.#308      // java/lang/StrictMath.cosh:(D)D",
                "  #308 = NameAndType        #309:#14      // cosh:(D)D",
                "  #309 = Utf8               cosh",
                "  #310 = Methodref          #10.#311      // java/lang/StrictMath.tanh:(D)D",
                "  #311 = NameAndType        #312:#14      // tanh:(D)D",
                "  #312 = Utf8               tanh",
                "  #313 = Methodref          #10.#314      // java/lang/StrictMath.hypot:(DD)D",
                "  #314 = NameAndType        #315:#52      // hypot:(DD)D",
                "  #315 = Utf8               hypot",
                "  #316 = Methodref          #10.#317      // java/lang/StrictMath.expm1:(D)D",
                "  #317 = NameAndType        #318:#14      // expm1:(D)D",
                "  #318 = Utf8               expm1",
                "  #319 = Methodref          #10.#320      // java/lang/StrictMath.log1p:(D)D",
                "  #320 = NameAndType        #321:#14      // log1p:(D)D",
                "  #321 = Utf8               log1p",
                "  #322 = Long               1023l",
                "  #324 = Double             -4.9E-324d",
                "  #326 = Float              -1.4E-45f",
                "  #327 = Double             Infinityd",
                "  #329 = Float              Infinityf",
                "  #330 = Double             -Infinityd",
                "  #332 = Float              -Infinityf",
                "  #333 = Methodref          #1.#334       // java/lang/Math.max:(II)I",
                "  #334 = NameAndType        #198:#335     // max:(II)I",
                "  #335 = Utf8               (II)I",
                "  #336 = Fieldref           #1.#337       // java/lang/Math.twoToTheDoubleScaleDown:D",
                "  #337 = NameAndType        #338:#339     // twoToTheDoubleScaleDown:D",
                "  #338 = Utf8               twoToTheDoubleScaleDown",
                "  #339 = Utf8               D",
                "  #340 = Methodref          #1.#341       // java/lang/Math.min:(II)I",
                "  #341 = NameAndType        #201:#335     // min:(II)I",
                "  #342 = Fieldref           #1.#343       // java/lang/Math.twoToTheDoubleScaleUp:D",
                "  #343 = NameAndType        #344:#339     // twoToTheDoubleScaleUp:D",
                "  #344 = Utf8               twoToTheDoubleScaleUp",
                "  #345 = Methodref          #346.#347     // java/lang/Class.desiredAssertionStatus:()Z",
                "  #346 = Class              #348          // java/lang/Class",
                "  #347 = NameAndType        #349:#350     // desiredAssertionStatus:()Z",
                "  #348 = Utf8               java/lang/Class",
                "  #349 = Utf8               desiredAssertionStatus",
                "  #350 = Utf8               ()Z",
                "  #351 = Float              -0.0f",
                "  #352 = Double             -0.0d",
                "  #354 = Utf8               E",
                "  #355 = Utf8               ConstantValue",
                "  #356 = Double             2.718281828459045d",
                "  #358 = Utf8               PI",
                "  #359 = Double             3.141592653589793d",
                "  #361 = Utf8               TAU",
                "  #362 = Double             6.283185307179586d",
                "  #364 = Utf8               DEGREES_TO_RADIANS",
                "  #365 = Utf8               RADIANS_TO_DEGREES",
                "  #366 = Utf8               Code",
                "  #367 = Utf8               LineNumberTable",
                "  #368 = Utf8               LocalVariableTable",
                "  #369 = Utf8               this",
                "  #370 = Utf8               Ljava/lang/Math;",
                "  #371 = Utf8               a",
                "  #372 = Utf8               RuntimeVisibleAnnotations",
                "  #373 = Utf8               Ljdk/internal/vm/annotation/IntrinsicCandidate;",
                "  #374 = Utf8               toRadians",
                "  #375 = Utf8               angdeg",
                "  #376 = Utf8               toDegrees",
                "  #377 = Utf8               angrad",
                "  #378 = Utf8               f1",
                "  #379 = Utf8               f2",
                "  #380 = Utf8               y",
                "  #381 = Utf8               x",
                "  #382 = Utf8               b",
                "  #383 = Utf8               round",
                "  #384 = Utf8               r",
                "  #385 = Utf8               I",
                "  #386 = Utf8               F",
                "  #387 = Utf8               intBits",
                "  #388 = Utf8               biasedExp",
                "  #389 = Utf8               shift",
                "  #390 = Utf8               StackMapTable",
                "  #391 = Utf8               longBits",
                "  #392 = Utf8               random",
                "  #393 = Utf8               addExact",
                "  #394 = Utf8               subtractExact",
                "  #395 = Utf8               (JI)J",
                "  #396 = Utf8               ax",
                "  #397 = Utf8               ay",
                "  #398 = Utf8               divideExact",
                "  #399 = Utf8               q",
                "  #400 = Utf8               floorDivExact",
                "  #401 = Utf8               ceilDivExact",
                "  #402 = Utf8               incrementExact",
                "  #403 = Utf8               decrementExact",
                "  #404 = Utf8               negateExact",
                "  #405 = Utf8               toIntExact",
                "  #406 = Utf8               (J)I",
                "  #407 = Utf8               value",
                "  #408 = Utf8               multiplyFull",
                "  #409 = Utf8               (II)J",
                "  #410 = Utf8               x1",
                "  #411 = Utf8               x2",
                "  #412 = Utf8               y1",
                "  #413 = Utf8               y2",
                "  #414 = Utf8               z2",
                "  #415 = Utf8               t",
                "  #416 = Utf8               z1",
                "  #417 = Utf8               z0",
                "  #418 = Utf8               unsignedMultiplyHigh",
                "  #419 = Utf8               result",
                "  #420 = Utf8               (JI)I",
                "  #421 = Utf8               absExact",
                "  #422 = Utf8               clamp",
                "  #423 = Utf8               (JII)I",
                "  #424 = Utf8               (JJJ)J",
                "  #425 = Utf8               (FFF)F",
                "  #426 = Utf8               product",
                "  #427 = Utf8               Ljava/math/BigDecimal;",
                "  #428 = Utf8               infiniteA",
                "  #429 = Utf8               infiniteB",
                "  #430 = Utf8               infiniteC",
                "  #431 = Utf8               c",
                "  #432 = Utf8               ulp",
                "  #433 = Utf8               d",
                "  #434 = Utf8               f",
                "  #435 = Utf8               signum",
                "  #436 = Utf8               magnitude",
                "  #437 = Utf8               sign",
                "  #438 = Utf8               nextAfter",
                "  #439 = Utf8               transducer",
                "  #440 = Utf8               start",
                "  #441 = Utf8               direction",
                "  #442 = Utf8               (FD)F",
                "  #443 = Utf8               nextUp",
                "  #444 = Utf8               nextDown",
                "  #445 = Utf8               scalb",
                "  #446 = Utf8               (DI)D",
                "  #447 = Utf8               scaleFactor",
                "  #448 = Utf8               MAX_SCALE",
                "  #449 = Utf8               exp_adjust",
                "  #450 = Utf8               scale_increment",
                "  #451 = Utf8               exp_delta",
                "  #452 = Utf8               (FI)F",
                "  #453 = Utf8               n",
                "  #454 = Utf8               <clinit>",
                "  #455 = Utf8               SourceFile",
                "  #456 = Utf8               Math.java",
                "  #457 = Utf8               NestMembers",
                "  #458 = Utf8               InnerClasses",
                "  #459 = Utf8               RandomNumberGeneratorHolder"
        );
    }
}
